
PowerManagementBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08005000  08005000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d8  080052d8  00007024  2**0
                  CONTENTS
  4 .ARM          00000000  080052d8  080052d8  00007024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052d8  080052d8  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d8  080052d8  000062d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052dc  080052dc  000062dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080052e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000024  08005304  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08005304  0000744c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c204  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1d  00000000  00000000  00013250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00015170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f8  00000000  00000000  00015a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b13  00000000  00000000  00016168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be12  00000000  00000000  0002ac7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080a42  00000000  00000000  00036a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b74cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f6c  00000000  00000000  000b7514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000b9480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004fe8 	.word	0x08004fe8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08004fe8 	.word	0x08004fe8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f001 f97e 	bl	80016fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f935 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f9df 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000406:	f000 f9bf 	bl	8000788 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800040a:	f000 f96d 	bl	80006e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  if(modbus_set_rx() != HAL_OK)
 800040e:	f000 fe8d 	bl	800112c <modbus_set_rx>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <main+0x26>
  {
	  Error_Handler();
 8000416:	f000 fa53 	bl	80008c0 <Error_Handler>
  }
  wdg_time = 0;
 800041a:	4b8f      	ldr	r3, [pc, #572]	@ (8000658 <main+0x264>)
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
  shutdown = 0;
 8000420:	4b8e      	ldr	r3, [pc, #568]	@ (800065c <main+0x268>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(MANUAL_GPIO_Port, MANUAL_Pin) == GPIO_PIN_SET)
 8000426:	4b8e      	ldr	r3, [pc, #568]	@ (8000660 <main+0x26c>)
 8000428:	2140      	movs	r1, #64	@ 0x40
 800042a:	0018      	movs	r0, r3
 800042c:	f002 f912 	bl	8002654 <HAL_GPIO_ReadPin>
 8000430:	0003      	movs	r3, r0
 8000432:	2b01      	cmp	r3, #1
 8000434:	d000      	beq.n	8000438 <main+0x44>
 8000436:	e0f5      	b.n	8000624 <main+0x230>
	  {
		  if(shutdown)
 8000438:	4b88      	ldr	r3, [pc, #544]	@ (800065c <main+0x268>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d01e      	beq.n	800047e <main+0x8a>
		  {
			  // Set all GPIO pins low
			  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, GPIO_PIN_RESET);
 8000440:	4b87      	ldr	r3, [pc, #540]	@ (8000660 <main+0x26c>)
 8000442:	2200      	movs	r2, #0
 8000444:	2180      	movs	r1, #128	@ 0x80
 8000446:	0018      	movs	r0, r3
 8000448:	f002 f921 	bl	800268e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, GPIO_PIN_RESET);
 800044c:	4b84      	ldr	r3, [pc, #528]	@ (8000660 <main+0x26c>)
 800044e:	2200      	movs	r2, #0
 8000450:	2180      	movs	r1, #128	@ 0x80
 8000452:	0018      	movs	r0, r3
 8000454:	f002 f91b 	bl	800268e <HAL_GPIO_WritePin>

			  // Carry the pin changes to the register database
			  holding_register_database[GPIO_WRITE] = 0;
 8000458:	4b82      	ldr	r3, [pc, #520]	@ (8000664 <main+0x270>)
 800045a:	2200      	movs	r2, #0
 800045c:	821a      	strh	r2, [r3, #16]
			  prev_gpio_write_register = 0;
 800045e:	4b82      	ldr	r3, [pc, #520]	@ (8000668 <main+0x274>)
 8000460:	2200      	movs	r2, #0
 8000462:	801a      	strh	r2, [r3, #0]

			  // Restart the Modbus
			  int8_t status = modbus_startup();
 8000464:	1dbc      	adds	r4, r7, #6
 8000466:	f000 fea9 	bl	80011bc <modbus_startup>
 800046a:	0003      	movs	r3, r0
 800046c:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
			  status = modbus_set_rx();
 800046e:	1dbc      	adds	r4, r7, #6
 8000470:	f000 fe5c 	bl	800112c <modbus_set_rx>
 8000474:	0003      	movs	r3, r0
 8000476:	7023      	strb	r3, [r4, #0]
			  {
				  // log error in a queue
			  }

			  // Ensure this code only executes once
			  shutdown = 0;
 8000478:	4b78      	ldr	r3, [pc, #480]	@ (800065c <main+0x268>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
		  }
		  // Update the GPIO_READ register
		  GPIO_PinState estop_sense = HAL_GPIO_ReadPin(ESTOP_SENSE_GPIO_Port, ESTOP_SENSE_Pin);
 800047e:	1d7c      	adds	r4, r7, #5
 8000480:	2380      	movs	r3, #128	@ 0x80
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4a76      	ldr	r2, [pc, #472]	@ (8000660 <main+0x26c>)
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f002 f8e3 	bl	8002654 <HAL_GPIO_ReadPin>
 800048e:	0003      	movs	r3, r0
 8000490:	7023      	strb	r3, [r4, #0]
		  GPIO_PinState sense_120 = HAL_GPIO_ReadPin(SENSE_120_GPIO_Port, SENSE_120_Pin);
 8000492:	1d3c      	adds	r4, r7, #4
 8000494:	2380      	movs	r3, #128	@ 0x80
 8000496:	021b      	lsls	r3, r3, #8
 8000498:	4a71      	ldr	r2, [pc, #452]	@ (8000660 <main+0x26c>)
 800049a:	0019      	movs	r1, r3
 800049c:	0010      	movs	r0, r2
 800049e:	f002 f8d9 	bl	8002654 <HAL_GPIO_ReadPin>
 80004a2:	0003      	movs	r3, r0
 80004a4:	7023      	strb	r3, [r4, #0]

		  holding_register_database[GPIO_READ] = ((estop_sense << ESTOP_SENSE_POS) | (sense_120 << SENSE_120_POS));
 80004a6:	1d7b      	adds	r3, r7, #5
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	b21a      	sxth	r2, r3
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	b21b      	sxth	r3, r3
 80004b4:	4313      	orrs	r3, r2
 80004b6:	b21b      	sxth	r3, r3
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	4b6a      	ldr	r3, [pc, #424]	@ (8000664 <main+0x270>)
 80004bc:	81da      	strh	r2, [r3, #14]

		  // Handle adjustment of the GPIO_WRITE pins
		  if(prev_gpio_write_register != holding_register_database[GPIO_WRITE])
 80004be:	4b69      	ldr	r3, [pc, #420]	@ (8000664 <main+0x270>)
 80004c0:	8a1a      	ldrh	r2, [r3, #16]
 80004c2:	4b69      	ldr	r3, [pc, #420]	@ (8000668 <main+0x274>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d02e      	beq.n	8000528 <main+0x134>
		  {
			  if((prev_gpio_write_register & RELAY_120_MASK) != (holding_register_database[GPIO_WRITE] & RELAY_120_MASK))
 80004ca:	4b66      	ldr	r3, [pc, #408]	@ (8000664 <main+0x270>)
 80004cc:	8a1a      	ldrh	r2, [r3, #16]
 80004ce:	4b66      	ldr	r3, [pc, #408]	@ (8000668 <main+0x274>)
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	4053      	eors	r3, r2
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	001a      	movs	r2, r3
 80004d8:	2301      	movs	r3, #1
 80004da:	4013      	ands	r3, r2
 80004dc:	d00b      	beq.n	80004f6 <main+0x102>
			  {
				  HAL_GPIO_WritePin(RELAY_120_GPIO_Port, RELAY_120_Pin, (holding_register_database[GPIO_WRITE] & RELAY_120_MASK));
 80004de:	4b61      	ldr	r3, [pc, #388]	@ (8000664 <main+0x270>)
 80004e0:	8a1b      	ldrh	r3, [r3, #16]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2201      	movs	r2, #1
 80004e6:	4013      	ands	r3, r2
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	2380      	movs	r3, #128	@ 0x80
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	485c      	ldr	r0, [pc, #368]	@ (8000660 <main+0x26c>)
 80004f0:	0019      	movs	r1, r3
 80004f2:	f002 f8cc 	bl	800268e <HAL_GPIO_WritePin>
			  }
			  if((prev_gpio_write_register & RELAY_480_MASK) != (holding_register_database[GPIO_WRITE] & RELAY_480_MASK))
 80004f6:	4b5b      	ldr	r3, [pc, #364]	@ (8000664 <main+0x270>)
 80004f8:	8a1a      	ldrh	r2, [r3, #16]
 80004fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000668 <main+0x274>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	4053      	eors	r3, r2
 8000500:	b29b      	uxth	r3, r3
 8000502:	001a      	movs	r2, r3
 8000504:	2302      	movs	r3, #2
 8000506:	4013      	ands	r3, r2
 8000508:	d00a      	beq.n	8000520 <main+0x12c>
			  {
				  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, (holding_register_database[GPIO_WRITE] & RELAY_480_MASK));
 800050a:	4b56      	ldr	r3, [pc, #344]	@ (8000664 <main+0x270>)
 800050c:	8a1b      	ldrh	r3, [r3, #16]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2202      	movs	r2, #2
 8000512:	4013      	ands	r3, r2
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4852      	ldr	r0, [pc, #328]	@ (8000660 <main+0x26c>)
 8000518:	001a      	movs	r2, r3
 800051a:	2180      	movs	r1, #128	@ 0x80
 800051c:	f002 f8b7 	bl	800268e <HAL_GPIO_WritePin>
			  }
			  prev_gpio_write_register = holding_register_database[GPIO_WRITE];
 8000520:	4b50      	ldr	r3, [pc, #320]	@ (8000664 <main+0x270>)
 8000522:	8a1a      	ldrh	r2, [r3, #16]
 8000524:	4b50      	ldr	r3, [pc, #320]	@ (8000668 <main+0x274>)
 8000526:	801a      	strh	r2, [r3, #0]
		  }

		  // Handle Watchdog Timeout
		  if(HAL_GetTick() - wdg_time > (uint32_t)(holding_register_database[WDG_TIMEOUT]))
 8000528:	f001 f95a 	bl	80017e0 <HAL_GetTick>
 800052c:	0002      	movs	r2, r0
 800052e:	4b4a      	ldr	r3, [pc, #296]	@ (8000658 <main+0x264>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	4a4b      	ldr	r2, [pc, #300]	@ (8000664 <main+0x270>)
 8000536:	8a52      	ldrh	r2, [r2, #18]
 8000538:	4293      	cmp	r3, r2
 800053a:	d912      	bls.n	8000562 <main+0x16e>
		  {
			  // Turn off the TBM
			  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, GPIO_PIN_RESET);
 800053c:	4b48      	ldr	r3, [pc, #288]	@ (8000660 <main+0x26c>)
 800053e:	2200      	movs	r2, #0
 8000540:	2180      	movs	r1, #128	@ 0x80
 8000542:	0018      	movs	r0, r3
 8000544:	f002 f8a3 	bl	800268e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RELAY_120_GPIO_Port, RELAY_120_Pin, GPIO_PIN_RESET);
 8000548:	2380      	movs	r3, #128	@ 0x80
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4844      	ldr	r0, [pc, #272]	@ (8000660 <main+0x26c>)
 800054e:	2200      	movs	r2, #0
 8000550:	0019      	movs	r1, r3
 8000552:	f002 f89c 	bl	800268e <HAL_GPIO_WritePin>

			  // Update the holding register database
			  holding_register_database[GPIO_WRITE] = 0;
 8000556:	4b43      	ldr	r3, [pc, #268]	@ (8000664 <main+0x270>)
 8000558:	2200      	movs	r2, #0
 800055a:	821a      	strh	r2, [r3, #16]
			  prev_gpio_write_register = 0;
 800055c:	4b42      	ldr	r3, [pc, #264]	@ (8000668 <main+0x274>)
 800055e:	2200      	movs	r2, #0
 8000560:	801a      	strh	r2, [r3, #0]
		  }

		  if(modbus_rx())
 8000562:	f000 fdcd 	bl	8001100 <modbus_rx>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d100      	bne.n	800056c <main+0x178>
 800056a:	e75c      	b.n	8000426 <main+0x32>
		  {
			  int8_t status = 0;
 800056c:	1cfb      	adds	r3, r7, #3
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
			  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000572:	2000      	movs	r0, #0
 8000574:	f000 fa96 	bl	8000aa4 <get_rx_buffer>
 8000578:	0003      	movs	r3, r0
 800057a:	001a      	movs	r2, r3
 800057c:	4b39      	ldr	r3, [pc, #228]	@ (8000664 <main+0x270>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	429a      	cmp	r2, r3
 8000582:	d121      	bne.n	80005c8 <main+0x1d4>
			  {
				  switch(get_rx_buffer(1))
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fa8d 	bl	8000aa4 <get_rx_buffer>
 800058a:	0003      	movs	r3, r0
 800058c:	2b03      	cmp	r3, #3
 800058e:	d002      	beq.n	8000596 <main+0x1a2>
 8000590:	2b10      	cmp	r3, #16
 8000592:	d006      	beq.n	80005a2 <main+0x1ae>
 8000594:	e00b      	b.n	80005ae <main+0x1ba>
				  {
					  case 0x03:
					  {
						  // Return holding registers
						  status = return_holding_registers();
 8000596:	1cfc      	adds	r4, r7, #3
 8000598:	f000 fab6 	bl	8000b08 <return_holding_registers>
 800059c:	0003      	movs	r3, r0
 800059e:	7023      	strb	r3, [r4, #0]
						  break;
 80005a0:	e00c      	b.n	80005bc <main+0x1c8>
					  }
					  case 0x10:
					  {
						  // Write holding registers
						  status = edit_multiple_registers();
 80005a2:	1cfc      	adds	r4, r7, #3
 80005a4:	f000 fb4c 	bl	8000c40 <edit_multiple_registers>
 80005a8:	0003      	movs	r3, r0
 80005aa:	7023      	strb	r3, [r4, #0]
						  break;
 80005ac:	e006      	b.n	80005bc <main+0x1c8>
					  }
					  default:
					  {
						  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80005ae:	1cfc      	adds	r4, r7, #3
 80005b0:	2004      	movs	r0, #4
 80005b2:	f000 fc33 	bl	8000e1c <modbus_exception>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
						  break;
 80005ba:	46c0      	nop			@ (mov r8, r8)
				  {
					  // log error in a queue
				  }

				  // Handle refreshing the watchdog timer
				  wdg_time = HAL_GetTick();
 80005bc:	f001 f910 	bl	80017e0 <HAL_GetTick>
 80005c0:	0002      	movs	r2, r0
 80005c2:	4b25      	ldr	r3, [pc, #148]	@ (8000658 <main+0x264>)
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	e027      	b.n	8000618 <main+0x224>
			  }
			  // Special case where you retrieve the modbus ID
			  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fa6b 	bl	8000aa4 <get_rx_buffer>
 80005ce:	0003      	movs	r3, r0
 80005d0:	2bff      	cmp	r3, #255	@ 0xff
 80005d2:	d121      	bne.n	8000618 <main+0x224>
				(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 fa65 	bl	8000aa4 <get_rx_buffer>
 80005da:	0003      	movs	r3, r0
			  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d11b      	bne.n	8000618 <main+0x224>
				(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 80005e0:	2002      	movs	r0, #2
 80005e2:	f000 fa5f 	bl	8000aa4 <get_rx_buffer>
 80005e6:	0003      	movs	r3, r0
 80005e8:	021c      	lsls	r4, r3, #8
 80005ea:	2003      	movs	r0, #3
 80005ec:	f000 fa5a 	bl	8000aa4 <get_rx_buffer>
 80005f0:	0003      	movs	r3, r0
 80005f2:	4323      	orrs	r3, r4
				(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80005f4:	d110      	bne.n	8000618 <main+0x224>
				(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 80005f6:	2004      	movs	r0, #4
 80005f8:	f000 fa54 	bl	8000aa4 <get_rx_buffer>
 80005fc:	0003      	movs	r3, r0
 80005fe:	021c      	lsls	r4, r3, #8
 8000600:	2005      	movs	r0, #5
 8000602:	f000 fa4f 	bl	8000aa4 <get_rx_buffer>
 8000606:	0003      	movs	r3, r0
 8000608:	4323      	orrs	r3, r4
				(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d104      	bne.n	8000618 <main+0x224>
			  {
				  status = return_holding_registers();
 800060e:	1cfc      	adds	r4, r7, #3
 8000610:	f000 fa7a 	bl	8000b08 <return_holding_registers>
 8000614:	0003      	movs	r3, r0
 8000616:	7023      	strb	r3, [r4, #0]
				  if(status != 0)
				  {
					  // log error in a queue
				  }
			  }
			  status = modbus_set_rx();
 8000618:	1cfc      	adds	r4, r7, #3
 800061a:	f000 fd87 	bl	800112c <modbus_set_rx>
 800061e:	0003      	movs	r3, r0
 8000620:	7023      	strb	r3, [r4, #0]
 8000622:	e700      	b.n	8000426 <main+0x32>
			  }
		  }
	  }
	  else
	  {
		  if(!shutdown)
 8000624:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <main+0x268>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d000      	beq.n	800062e <main+0x23a>
 800062c:	e6fb      	b.n	8000426 <main+0x32>
		  {
			  // Shutdown the Modbus
			  int8_t status = modbus_shutdown();
 800062e:	1dfc      	adds	r4, r7, #7
 8000630:	f000 fd9e 	bl	8001170 <modbus_shutdown>
 8000634:	0003      	movs	r3, r0
 8000636:	7023      	strb	r3, [r4, #0]
			  {
				  // log error in a queue
			  }

			  // Set all GPIO pins high
			  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, GPIO_PIN_SET);
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <main+0x26c>)
 800063a:	2201      	movs	r2, #1
 800063c:	2180      	movs	r1, #128	@ 0x80
 800063e:	0018      	movs	r0, r3
 8000640:	f002 f825 	bl	800268e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, GPIO_PIN_SET);
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <main+0x26c>)
 8000646:	2201      	movs	r2, #1
 8000648:	2180      	movs	r1, #128	@ 0x80
 800064a:	0018      	movs	r0, r3
 800064c:	f002 f81f 	bl	800268e <HAL_GPIO_WritePin>

			  // Ensure this code only executes once
			  shutdown = 1;
 8000650:	4b02      	ldr	r3, [pc, #8]	@ (800065c <main+0x268>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(MANUAL_GPIO_Port, MANUAL_Pin) == GPIO_PIN_SET)
 8000656:	e6e6      	b.n	8000426 <main+0x32>
 8000658:	20000134 	.word	0x20000134
 800065c:	20000138 	.word	0x20000138
 8000660:	50000400 	.word	0x50000400
 8000664:	20000000 	.word	0x20000000
 8000668:	20000130 	.word	0x20000130

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b08f      	sub	sp, #60	@ 0x3c
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	2418      	movs	r4, #24
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0018      	movs	r0, r3
 8000678:	2320      	movs	r3, #32
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f004 fc7d 	bl	8004f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	0018      	movs	r0, r3
 8000686:	2314      	movs	r3, #20
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f004 fc76 	bl	8004f7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2201      	movs	r2, #1
 8000694:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2280      	movs	r2, #128	@ 0x80
 800069a:	0252      	lsls	r2, r2, #9
 800069c:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 f811 	bl	80026c8 <HAL_RCC_OscConfig>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x42>
  {
    Error_Handler();
 80006aa:	f000 f909 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2201      	movs	r2, #1
 80006b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2100      	movs	r1, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 fa1f 	bl	8002b14 <HAL_RCC_ClockConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006da:	f000 f8f1 	bl	80008c0 <Error_Handler>
  }
}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b00f      	add	sp, #60	@ 0x3c
 80006e4:	bd90      	pop	{r4, r7, pc}
	...

080006e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 80006ee:	4a25      	ldr	r2, [pc, #148]	@ (8000784 <MX_USART1_UART_Init+0x9c>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 80006f4:	2296      	movs	r2, #150	@ 0x96
 80006f6:	0192      	lsls	r2, r2, #6
 80006f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000706:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000730:	4813      	ldr	r0, [pc, #76]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 8000732:	2300      	movs	r3, #0
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	f004 fa14 	bl	8004b64 <HAL_RS485Ex_Init>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000740:	f000 f8be 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 8000746:	2100      	movs	r1, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f004 facf 	bl	8004cec <HAL_UARTEx_SetTxFifoThreshold>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 f8b5 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 8000758:	2100      	movs	r1, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f004 fb06 	bl	8004d6c <HAL_UARTEx_SetRxFifoThreshold>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000764:	f000 f8ac 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <MX_USART1_UART_Init+0x98>)
 800076a:	0018      	movs	r0, r3
 800076c:	f004 fa84 	bl	8004c78 <HAL_UARTEx_DisableFifoMode>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000774:	f000 f8a4 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	20000040 	.word	0x20000040
 8000784:	40013800 	.word	0x40013800

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_DMA_Init+0x38>)
 8000790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_DMA_Init+0x38>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	639a      	str	r2, [r3, #56]	@ 0x38
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_DMA_Init+0x38>)
 800079c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2009      	movs	r0, #9
 80007ac:	f001 f914 	bl	80019d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007b0:	2009      	movs	r0, #9
 80007b2:	f001 f926 	bl	8001a02 <HAL_NVIC_EnableIRQ>

}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b08b      	sub	sp, #44	@ 0x2c
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	2414      	movs	r4, #20
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	0018      	movs	r0, r3
 80007d0:	2314      	movs	r3, #20
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f004 fbd1 	bl	8004f7c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b37      	ldr	r3, [pc, #220]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007de:	4b36      	ldr	r3, [pc, #216]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 80007e0:	2104      	movs	r1, #4
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007e6:	4b34      	ldr	r3, [pc, #208]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ea:	2204      	movs	r2, #4
 80007ec:	4013      	ands	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007f6:	4b30      	ldr	r3, [pc, #192]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 80007f8:	2120      	movs	r1, #32
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80007fe:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000802:	2220      	movs	r2, #32
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800080e:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 8000810:	2102      	movs	r1, #2
 8000812:	430a      	orrs	r2, r1
 8000814:	635a      	str	r2, [r3, #52]	@ 0x34
 8000816:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 8000818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800081a:	2202      	movs	r2, #2
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
 800082e:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <MX_GPIO_Init+0xf4>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_480_Pin|RELAY_120_Pin, GPIO_PIN_RESET);
 800083a:	23c0      	movs	r3, #192	@ 0xc0
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	481f      	ldr	r0, [pc, #124]	@ (80008bc <MX_GPIO_Init+0xf8>)
 8000840:	2200      	movs	r2, #0
 8000842:	0019      	movs	r1, r3
 8000844:	f001 ff23 	bl	800268e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_120_Pin ESTOP_SENSE_Pin */
  GPIO_InitStruct.Pin = SENSE_120_Pin|ESTOP_SENSE_Pin;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2282      	movs	r2, #130	@ 0x82
 800084c:	0212      	lsls	r2, r2, #8
 800084e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	193b      	adds	r3, r7, r4
 800085e:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <MX_GPIO_Init+0xf8>)
 8000860:	0019      	movs	r1, r3
 8000862:	0010      	movs	r0, r2
 8000864:	f001 fcac 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MANUAL_Pin */
  GPIO_InitStruct.Pin = MANUAL_Pin;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2240      	movs	r2, #64	@ 0x40
 800086c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2201      	movs	r2, #1
 8000878:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MANUAL_GPIO_Port, &GPIO_InitStruct);
 800087a:	193b      	adds	r3, r7, r4
 800087c:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <MX_GPIO_Init+0xf8>)
 800087e:	0019      	movs	r1, r3
 8000880:	0010      	movs	r0, r2
 8000882:	f001 fc9d 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_480_Pin RELAY_120_Pin */
  GPIO_InitStruct.Pin = RELAY_480_Pin|RELAY_120_Pin;
 8000886:	0021      	movs	r1, r4
 8000888:	187b      	adds	r3, r7, r1
 800088a:	22c0      	movs	r2, #192	@ 0xc0
 800088c:	0052      	lsls	r2, r2, #1
 800088e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2201      	movs	r2, #1
 8000894:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <MX_GPIO_Init+0xf8>)
 80008a6:	0019      	movs	r1, r3
 80008a8:	0010      	movs	r0, r2
 80008aa:	f001 fc89 	bl	80021c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b00b      	add	sp, #44	@ 0x2c
 80008b4:	bd90      	pop	{r4, r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	40021000 	.word	0x40021000
 80008bc:	50000400 	.word	0x50000400

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	e7fd      	b.n	80008c8 <Error_Handler+0x8>

080008cc <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	000a      	movs	r2, r1
 80008d6:	1cbb      	adds	r3, r7, #2
 80008d8:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a45      	ldr	r2, [pc, #276]	@ (80009f4 <HAL_UARTEx_RxEventCallback+0x128>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d000      	beq.n	80008e6 <HAL_UARTEx_RxEventCallback+0x1a>
 80008e4:	e081      	b.n	80009ea <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 80008e6:	4b44      	ldr	r3, [pc, #272]	@ (80009f8 <HAL_UARTEx_RxEventCallback+0x12c>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b43      	ldr	r3, [pc, #268]	@ (80009fc <HAL_UARTEx_RxEventCallback+0x130>)
 80008ee:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 80008f0:	4b42      	ldr	r3, [pc, #264]	@ (80009fc <HAL_UARTEx_RxEventCallback+0x130>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	001a      	movs	r2, r3
 80008f8:	1cbb      	adds	r3, r7, #2
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	18d2      	adds	r2, r2, r3
 80008fe:	2380      	movs	r3, #128	@ 0x80
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	429a      	cmp	r2, r3
 8000904:	dd29      	ble.n	800095a <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8000906:	4b3d      	ldr	r3, [pc, #244]	@ (80009fc <HAL_UARTEx_RxEventCallback+0x130>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29a      	uxth	r2, r3
 800090c:	240e      	movs	r4, #14
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2180      	movs	r1, #128	@ 0x80
 8000912:	0049      	lsls	r1, r1, #1
 8000914:	1a8a      	subs	r2, r1, r2
 8000916:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8000918:	4b38      	ldr	r3, [pc, #224]	@ (80009fc <HAL_UARTEx_RxEventCallback+0x130>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b29b      	uxth	r3, r3
 800091e:	001a      	movs	r2, r3
 8000920:	4b37      	ldr	r3, [pc, #220]	@ (8000a00 <HAL_UARTEx_RxEventCallback+0x134>)
 8000922:	18d0      	adds	r0, r2, r3
 8000924:	193b      	adds	r3, r7, r4
 8000926:	881a      	ldrh	r2, [r3, #0]
 8000928:	4b36      	ldr	r3, [pc, #216]	@ (8000a04 <HAL_UARTEx_RxEventCallback+0x138>)
 800092a:	0019      	movs	r1, r3
 800092c:	f004 fb52 	bl	8004fd4 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8000930:	1cba      	adds	r2, r7, #2
 8000932:	193b      	adds	r3, r7, r4
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	b29a      	uxth	r2, r3
 800093c:	4b2e      	ldr	r3, [pc, #184]	@ (80009f8 <HAL_UARTEx_RxEventCallback+0x12c>)
 800093e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8000940:	193b      	adds	r3, r7, r4
 8000942:	881a      	ldrh	r2, [r3, #0]
 8000944:	4b2f      	ldr	r3, [pc, #188]	@ (8000a04 <HAL_UARTEx_RxEventCallback+0x138>)
 8000946:	18d1      	adds	r1, r2, r3
 8000948:	4b2b      	ldr	r3, [pc, #172]	@ (80009f8 <HAL_UARTEx_RxEventCallback+0x12c>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b29b      	uxth	r3, r3
 800094e:	001a      	movs	r2, r3
 8000950:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <HAL_UARTEx_RxEventCallback+0x134>)
 8000952:	0018      	movs	r0, r3
 8000954:	f004 fb3e 	bl	8004fd4 <memcpy>
 8000958:	e014      	b.n	8000984 <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 800095a:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <HAL_UARTEx_RxEventCallback+0x130>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b29b      	uxth	r3, r3
 8000960:	001a      	movs	r2, r3
 8000962:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <HAL_UARTEx_RxEventCallback+0x134>)
 8000964:	18d0      	adds	r0, r2, r3
 8000966:	1cbb      	adds	r3, r7, #2
 8000968:	881a      	ldrh	r2, [r3, #0]
 800096a:	4b26      	ldr	r3, [pc, #152]	@ (8000a04 <HAL_UARTEx_RxEventCallback+0x138>)
 800096c:	0019      	movs	r1, r3
 800096e:	f004 fb31 	bl	8004fd4 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <HAL_UARTEx_RxEventCallback+0x130>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	1cbb      	adds	r3, r7, #2
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	18d3      	adds	r3, r2, r3
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000982:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8000984:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	b29b      	uxth	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d027      	beq.n	80009de <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 800098e:	f000 ff27 	bl	80017e0 <HAL_GetTick>
 8000992:	0002      	movs	r2, r0
 8000994:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <HAL_UARTEx_RxEventCallback+0x140>)
 8000996:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8000998:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <HAL_UARTEx_RxEventCallback+0x130>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <HAL_UARTEx_RxEventCallback+0x144>)
 80009a0:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <HAL_UARTEx_RxEventCallback+0x13c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 80009a8:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <HAL_UARTEx_RxEventCallback+0x138>)
 80009aa:	791b      	ldrb	r3, [r3, #4]
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	4a15      	ldr	r2, [pc, #84]	@ (8000a04 <HAL_UARTEx_RxEventCallback+0x138>)
 80009b0:	7952      	ldrb	r2, [r2, #5]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	3301      	adds	r3, #1
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	18db      	adds	r3, r3, r3
 80009bc:	b29b      	uxth	r3, r3
 80009be:	3301      	adds	r3, #1
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4910      	ldr	r1, [pc, #64]	@ (8000a04 <HAL_UARTEx_RxEventCallback+0x138>)
 80009c4:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <HAL_UARTEx_RxEventCallback+0x148>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f004 fa12 	bl	8004df0 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_UARTEx_RxEventCallback+0x14c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <HAL_UARTEx_RxEventCallback+0x14c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2104      	movs	r1, #4
 80009d8:	438a      	bics	r2, r1
 80009da:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 80009dc:	e005      	b.n	80009ea <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 80009de:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <HAL_UARTEx_RxEventCallback+0x13c>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <HAL_UARTEx_RxEventCallback+0x150>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b005      	add	sp, #20
 80009f0:	bd90      	pop	{r4, r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	40013800 	.word	0x40013800
 80009f8:	20000444 	.word	0x20000444
 80009fc:	20000442 	.word	0x20000442
 8000a00:	2000013c 	.word	0x2000013c
 8000a04:	2000033c 	.word	0x2000033c
 8000a08:	20000014 	.word	0x20000014
 8000a0c:	2000043c 	.word	0x2000043c
 8000a10:	20000440 	.word	0x20000440
 8000a14:	20000040 	.word	0x20000040
 8000a18:	200000d4 	.word	0x200000d4
 8000a1c:	20000446 	.word	0x20000446

08000a20 <HAL_UART_TxCpltCallback>:

// Transmit Interrupt Handler
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	tx_int = 1;
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <HAL_UART_TxCpltCallback+0x18>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	20000447 	.word	0x20000447

08000a3c <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <handle_chunk_miss+0x5c>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d120      	bne.n	8000a8e <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8000a4c:	f000 fec8 	bl	80017e0 <HAL_GetTick>
 8000a50:	0002      	movs	r2, r0
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <handle_chunk_miss+0x60>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	2b0a      	cmp	r3, #10
 8000a5a:	d918      	bls.n	8000a8e <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <handle_chunk_miss+0x5c>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <handle_chunk_miss+0x64>)
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 fbdf 	bl	8003228 <HAL_UART_Abort>
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d104      	bne.n	8000a86 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8000a7c:	1dfc      	adds	r4, r7, #7
 8000a7e:	f000 fb55 	bl	800112c <modbus_set_rx>
 8000a82:	0003      	movs	r3, r0
 8000a84:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	e000      	b.n	8000a90 <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b003      	add	sp, #12
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	20000014 	.word	0x20000014
 8000a9c:	2000043c 	.word	0x2000043c
 8000aa0:	20000040 	.word	0x20000040

08000aa4 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	0002      	movs	r2, r0
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2bff      	cmp	r3, #255	@ 0xff
 8000ab6:	d01e      	beq.n	8000af6 <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <get_rx_buffer+0x5c>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	001a      	movs	r2, r3
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8000ac6:	2bff      	cmp	r3, #255	@ 0xff
 8000ac8:	dd0b      	ble.n	8000ae2 <get_rx_buffer+0x3e>
 8000aca:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <get_rx_buffer+0x5c>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	18d3      	adds	r3, r2, r3
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	3bff      	subs	r3, #255	@ 0xff
 8000adc:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <get_rx_buffer+0x60>)
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
 8000ae0:	e00a      	b.n	8000af8 <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <get_rx_buffer+0x5c>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	001a      	movs	r2, r3
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8000af0:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <get_rx_buffer+0x60>)
 8000af2:	5cd3      	ldrb	r3, [r2, r3]
 8000af4:	e000      	b.n	8000af8 <get_rx_buffer+0x54>
	}
	return 0xFF;
 8000af6:	23ff      	movs	r3, #255	@ 0xff
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000440 	.word	0x20000440
 8000b04:	2000013c 	.word	0x2000013c

08000b08 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f7ff ffc8 	bl	8000aa4 <get_rx_buffer>
 8000b14:	0003      	movs	r3, r0
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b21c      	sxth	r4, r3
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f7ff ffc2 	bl	8000aa4 <get_rx_buffer>
 8000b20:	0003      	movs	r3, r0
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4323      	orrs	r3, r4
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000b2c:	2004      	movs	r0, #4
 8000b2e:	f7ff ffb9 	bl	8000aa4 <get_rx_buffer>
 8000b32:	0003      	movs	r3, r0
 8000b34:	021b      	lsls	r3, r3, #8
 8000b36:	b21c      	sxth	r4, r3
 8000b38:	2005      	movs	r0, #5
 8000b3a:	f7ff ffb3 	bl	8000aa4 <get_rx_buffer>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	4323      	orrs	r3, r4
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	1cbb      	adds	r3, r7, #2
 8000b48:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000b4a:	1cbb      	adds	r3, r7, #2
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	2b7d      	cmp	r3, #125	@ 0x7d
 8000b50:	d803      	bhi.n	8000b5a <return_holding_registers+0x52>
 8000b52:	1cbb      	adds	r3, r7, #2
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d104      	bne.n	8000b64 <return_holding_registers+0x5c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000b5a:	2006      	movs	r0, #6
 8000b5c:	f000 f95e 	bl	8000e1c <modbus_exception>
 8000b60:	0003      	movs	r3, r0
 8000b62:	e065      	b.n	8000c30 <return_holding_registers+0x128>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000b64:	1cba      	adds	r2, r7, #2
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	18d3      	adds	r3, r2, r3
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	003b      	movs	r3, r7
 8000b72:	3a01      	subs	r2, #1
 8000b74:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000b76:	003b      	movs	r3, r7
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	2b0a      	cmp	r3, #10
 8000b7c:	d904      	bls.n	8000b88 <return_holding_registers+0x80>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000b7e:	2005      	movs	r0, #5
 8000b80:	f000 f94c 	bl	8000e1c <modbus_exception>
 8000b84:	0003      	movs	r3, r0
 8000b86:	e053      	b.n	8000c30 <return_holding_registers+0x128>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff ff8b 	bl	8000aa4 <get_rx_buffer>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	001a      	movs	r2, r3
 8000b92:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <return_holding_registers+0x130>)
 8000b94:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff ff84 	bl	8000aa4 <get_rx_buffer>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <return_holding_registers+0x130>)
 8000ba2:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000ba4:	1cbb      	adds	r3, r7, #2
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	18db      	adds	r3, r3, r3
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <return_holding_registers+0x130>)
 8000bb0:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000bb8:	1dbb      	adds	r3, r7, #6
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e028      	b.n	8000c12 <return_holding_registers+0x10a>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	881a      	ldrh	r2, [r3, #0]
 8000bc4:	1dbb      	adds	r3, r7, #6
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	18d2      	adds	r2, r2, r3
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <return_holding_registers+0x134>)
 8000bcc:	0052      	lsls	r2, r2, #1
 8000bce:	5ad3      	ldrh	r3, [r2, r3]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b299      	uxth	r1, r3
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	1dfa      	adds	r2, r7, #7
 8000bda:	1c58      	adds	r0, r3, #1
 8000bdc:	7010      	strb	r0, [r2, #0]
 8000bde:	001a      	movs	r2, r3
 8000be0:	b2c9      	uxtb	r1, r1
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <return_holding_registers+0x130>)
 8000be4:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	881a      	ldrh	r2, [r3, #0]
 8000bea:	1dbb      	adds	r3, r7, #6
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	18d2      	adds	r2, r2, r3
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <return_holding_registers+0x134>)
 8000bf2:	0052      	lsls	r2, r2, #1
 8000bf4:	5ad1      	ldrh	r1, [r2, r3]
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	1dfa      	adds	r2, r7, #7
 8000bfc:	1c58      	adds	r0, r3, #1
 8000bfe:	7010      	strb	r0, [r2, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	b2c9      	uxtb	r1, r1
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <return_holding_registers+0x130>)
 8000c06:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8000c08:	1dbb      	adds	r3, r7, #6
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	1dbb      	adds	r3, r7, #6
 8000c0e:	3201      	adds	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	1dbb      	adds	r3, r7, #6
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	1cba      	adds	r2, r7, #2
 8000c1a:	8812      	ldrh	r2, [r2, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8cf      	bhi.n	8000bc0 <return_holding_registers+0xb8>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <return_holding_registers+0x130>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 fa01 	bl	8001030 <modbus_send>
 8000c2e:	0003      	movs	r3, r0
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b003      	add	sp, #12
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	2000023c 	.word	0x2000023c
 8000c3c:	20000000 	.word	0x20000000

08000c40 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000c46:	2002      	movs	r0, #2
 8000c48:	f7ff ff2c 	bl	8000aa4 <get_rx_buffer>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21c      	sxth	r4, r3
 8000c52:	2003      	movs	r0, #3
 8000c54:	f7ff ff26 	bl	8000aa4 <get_rx_buffer>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4323      	orrs	r3, r4
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	230c      	movs	r3, #12
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000c66:	2004      	movs	r0, #4
 8000c68:	f7ff ff1c 	bl	8000aa4 <get_rx_buffer>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	b21c      	sxth	r4, r3
 8000c72:	2005      	movs	r0, #5
 8000c74:	f7ff ff16 	bl	8000aa4 <get_rx_buffer>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	210a      	movs	r1, #10
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8000c86:	000a      	movs	r2, r1
 8000c88:	18bb      	adds	r3, r7, r2
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c8e:	d803      	bhi.n	8000c98 <edit_multiple_registers+0x58>
 8000c90:	18bb      	adds	r3, r7, r2
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d104      	bne.n	8000ca2 <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000c98:	2006      	movs	r0, #6
 8000c9a:	f000 f8bf 	bl	8000e1c <modbus_exception>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	e0b4      	b.n	8000e0c <edit_multiple_registers+0x1cc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	18fa      	adds	r2, r7, r3
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	8812      	ldrh	r2, [r2, #0]
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	18d3      	adds	r3, r2, r3
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	2108      	movs	r1, #8
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	2b0a      	cmp	r3, #10
 8000cc0:	d904      	bls.n	8000ccc <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000cc2:	2005      	movs	r0, #5
 8000cc4:	f000 f8aa 	bl	8000e1c <modbus_exception>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	e09f      	b.n	8000e0c <edit_multiple_registers+0x1cc>
	}

	if((first_register_address <= GPIO_READ) && (last_register_address >= GPIO_READ))
 8000ccc:	230c      	movs	r3, #12
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	2b07      	cmp	r3, #7
 8000cd4:	d809      	bhi.n	8000cea <edit_multiple_registers+0xaa>
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b06      	cmp	r3, #6
 8000cde:	d904      	bls.n	8000cea <edit_multiple_registers+0xaa>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8000ce0:	2004      	movs	r0, #4
 8000ce2:	f000 f89b 	bl	8000e1c <modbus_exception>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	e090      	b.n	8000e0c <edit_multiple_registers+0x1cc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff feda 	bl	8000aa4 <get_rx_buffer>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	4b47      	ldr	r3, [pc, #284]	@ (8000e14 <edit_multiple_registers+0x1d4>)
 8000cf6:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff fed3 	bl	8000aa4 <get_rx_buffer>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	001a      	movs	r2, r3
 8000d02:	4b44      	ldr	r3, [pc, #272]	@ (8000e14 <edit_multiple_registers+0x1d4>)
 8000d04:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff fecc 	bl	8000aa4 <get_rx_buffer>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	001a      	movs	r2, r3
 8000d10:	4b40      	ldr	r3, [pc, #256]	@ (8000e14 <edit_multiple_registers+0x1d4>)
 8000d12:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f7ff fec5 	bl	8000aa4 <get_rx_buffer>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e14 <edit_multiple_registers+0x1d4>)
 8000d20:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8000d22:	2004      	movs	r0, #4
 8000d24:	f7ff febe 	bl	8000aa4 <get_rx_buffer>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	4b39      	ldr	r3, [pc, #228]	@ (8000e14 <edit_multiple_registers+0x1d4>)
 8000d2e:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8000d30:	2005      	movs	r0, #5
 8000d32:	f7ff feb7 	bl	8000aa4 <get_rx_buffer>
 8000d36:	0003      	movs	r3, r0
 8000d38:	001a      	movs	r2, r3
 8000d3a:	4b36      	ldr	r3, [pc, #216]	@ (8000e14 <edit_multiple_registers+0x1d4>)
 8000d3c:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	2206      	movs	r2, #6
 8000d42:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8000d44:	230f      	movs	r3, #15
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e032      	b.n	8000db4 <edit_multiple_registers+0x174>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8000d4e:	250f      	movs	r5, #15
 8000d50:	197b      	adds	r3, r7, r5
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	18db      	adds	r3, r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	3307      	adds	r3, #7
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fea1 	bl	8000aa4 <get_rx_buffer>
 8000d62:	0003      	movs	r3, r0
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	b21c      	sxth	r4, r3
 8000d68:	197b      	adds	r3, r7, r5
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	18db      	adds	r3, r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fe95 	bl	8000aa4 <get_rx_buffer>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4323      	orrs	r3, r4
 8000d80:	b219      	sxth	r1, r3
 8000d82:	200c      	movs	r0, #12
 8000d84:	183b      	adds	r3, r7, r0
 8000d86:	881a      	ldrh	r2, [r3, #0]
 8000d88:	197b      	adds	r3, r7, r5
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	18d2      	adds	r2, r2, r3
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <edit_multiple_registers+0x1d8>)
 8000d92:	0052      	lsls	r2, r2, #1
 8000d94:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8000d96:	197b      	adds	r3, r7, r5
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	183b      	adds	r3, r7, r0
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	18d3      	adds	r3, r2, r3
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 f863 	bl	8000e70 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8000daa:	197b      	adds	r3, r7, r5
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	197b      	adds	r3, r7, r5
 8000db0:	3201      	adds	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	220a      	movs	r2, #10
 8000dbe:	18ba      	adds	r2, r7, r2
 8000dc0:	8812      	ldrh	r2, [r2, #0]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d8c3      	bhi.n	8000d4e <edit_multiple_registers+0x10e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 fd14 	bl	80017f4 <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 8000dcc:	1dbc      	adds	r4, r7, #6
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <edit_multiple_registers+0x1d4>)
 8000dd4:	0011      	movs	r1, r2
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 f92a 	bl	8001030 <modbus_send>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 8000de0:	1dbb      	adds	r3, r7, #6
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10d      	bne.n	8000e06 <edit_multiple_registers+0x1c6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8000dea:	230c      	movs	r3, #12
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d808      	bhi.n	8000e06 <edit_multiple_registers+0x1c6>
 8000df4:	2308      	movs	r3, #8
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <edit_multiple_registers+0x1c6>
		{
			return modbus_change_baud_rate();
 8000dfe:	f000 fa29 	bl	8001254 <modbus_change_baud_rate>
 8000e02:	0003      	movs	r3, r0
 8000e04:	e002      	b.n	8000e0c <edit_multiple_registers+0x1cc>
		}
	}
	return status;
 8000e06:	1dbb      	adds	r3, r7, #6
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b25b      	sxtb	r3, r3
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bdb0      	pop	{r4, r5, r7, pc}
 8000e14:	2000023c 	.word	0x2000023c
 8000e18:	20000000 	.word	0x20000000

08000e1c <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	0002      	movs	r2, r0
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fe3b 	bl	8000aa4 <get_rx_buffer>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	001a      	movs	r2, r3
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <modbus_exception+0x50>)
 8000e34:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff fe34 	bl	8000aa4 <get_rx_buffer>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	001a      	movs	r2, r3
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	425b      	negs	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <modbus_exception+0x50>)
 8000e4a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <modbus_exception+0x50>)
 8000e56:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <modbus_exception+0x50>)
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 f8e7 	bl	8001030 <modbus_send>
 8000e62:	0003      	movs	r3, r0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000023c 	.word	0x2000023c

08000e70 <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	0002      	movs	r2, r0
 8000e78:	1dbb      	adds	r3, r7, #6
 8000e7a:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8000e7c:	1dbb      	adds	r3, r7, #6
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	2b09      	cmp	r3, #9
 8000e82:	d900      	bls.n	8000e86 <handle_range+0x16>
 8000e84:	e0c7      	b.n	8001016 <handle_range+0x1a6>
 8000e86:	009a      	lsls	r2, r3, #2
 8000e88:	4b65      	ldr	r3, [pc, #404]	@ (8001020 <handle_range+0x1b0>)
 8000e8a:	18d3      	adds	r3, r2, r3
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8000e90:	1dbb      	adds	r3, r7, #6
 8000e92:	881a      	ldrh	r2, [r3, #0]
 8000e94:	4b63      	ldr	r3, [pc, #396]	@ (8001024 <handle_range+0x1b4>)
 8000e96:	0052      	lsls	r2, r2, #1
 8000e98:	5ad3      	ldrh	r3, [r2, r3]
 8000e9a:	2bff      	cmp	r3, #255	@ 0xff
 8000e9c:	d800      	bhi.n	8000ea0 <handle_range+0x30>
 8000e9e:	e0a9      	b.n	8000ff4 <handle_range+0x184>
			{
				holding_register_database[holding_register] = 0xFF;
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	881a      	ldrh	r2, [r3, #0]
 8000ea4:	4b5f      	ldr	r3, [pc, #380]	@ (8001024 <handle_range+0x1b4>)
 8000ea6:	0052      	lsls	r2, r2, #1
 8000ea8:	21ff      	movs	r1, #255	@ 0xff
 8000eaa:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8000eac:	e0a2      	b.n	8000ff4 <handle_range+0x184>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < 2)
 8000eae:	1dbb      	adds	r3, r7, #6
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <handle_range+0x1b4>)
 8000eb4:	0052      	lsls	r2, r2, #1
 8000eb6:	5ad3      	ldrh	r3, [r2, r3]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d806      	bhi.n	8000eca <handle_range+0x5a>
			{
				holding_register_database[holding_register] = 2;
 8000ebc:	1dbb      	adds	r3, r7, #6
 8000ebe:	881a      	ldrh	r2, [r3, #0]
 8000ec0:	4b58      	ldr	r3, [pc, #352]	@ (8001024 <handle_range+0x1b4>)
 8000ec2:	0052      	lsls	r2, r2, #1
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 9)
			{
				holding_register_database[holding_register] = 9;
			}
			break;
 8000ec8:	e096      	b.n	8000ff8 <handle_range+0x188>
			else if(holding_register_database[holding_register] > 9)
 8000eca:	1dbb      	adds	r3, r7, #6
 8000ecc:	881a      	ldrh	r2, [r3, #0]
 8000ece:	4b55      	ldr	r3, [pc, #340]	@ (8001024 <handle_range+0x1b4>)
 8000ed0:	0052      	lsls	r2, r2, #1
 8000ed2:	5ad3      	ldrh	r3, [r2, r3]
 8000ed4:	2b09      	cmp	r3, #9
 8000ed6:	d800      	bhi.n	8000eda <handle_range+0x6a>
 8000ed8:	e08e      	b.n	8000ff8 <handle_range+0x188>
				holding_register_database[holding_register] = 9;
 8000eda:	1dbb      	adds	r3, r7, #6
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	4b51      	ldr	r3, [pc, #324]	@ (8001024 <handle_range+0x1b4>)
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	2109      	movs	r1, #9
 8000ee4:	52d1      	strh	r1, [r2, r3]
			break;
 8000ee6:	e087      	b.n	8000ff8 <handle_range+0x188>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 8000ee8:	1dbb      	adds	r3, r7, #6
 8000eea:	881a      	ldrh	r2, [r3, #0]
 8000eec:	4b4d      	ldr	r3, [pc, #308]	@ (8001024 <handle_range+0x1b4>)
 8000eee:	0052      	lsls	r2, r2, #1
 8000ef0:	5ad3      	ldrh	r3, [r2, r3]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d806      	bhi.n	8000f04 <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 8000ef6:	1dbb      	adds	r3, r7, #6
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	4b4a      	ldr	r3, [pc, #296]	@ (8001024 <handle_range+0x1b4>)
 8000efc:	0052      	lsls	r2, r2, #1
 8000efe:	2105      	movs	r1, #5
 8000f00:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 8000f02:	e07b      	b.n	8000ffc <handle_range+0x18c>
			else if(holding_register_database[holding_register] > 1000)
 8000f04:	1dbb      	adds	r3, r7, #6
 8000f06:	881a      	ldrh	r2, [r3, #0]
 8000f08:	4b46      	ldr	r3, [pc, #280]	@ (8001024 <handle_range+0x1b4>)
 8000f0a:	0052      	lsls	r2, r2, #1
 8000f0c:	5ad2      	ldrh	r2, [r2, r3]
 8000f0e:	23fa      	movs	r3, #250	@ 0xfa
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d800      	bhi.n	8000f18 <handle_range+0xa8>
 8000f16:	e071      	b.n	8000ffc <handle_range+0x18c>
				holding_register_database[holding_register] = 1000;
 8000f18:	1dbb      	adds	r3, r7, #6
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	4b41      	ldr	r3, [pc, #260]	@ (8001024 <handle_range+0x1b4>)
 8000f1e:	0052      	lsls	r2, r2, #1
 8000f20:	21fa      	movs	r1, #250	@ 0xfa
 8000f22:	0089      	lsls	r1, r1, #2
 8000f24:	52d1      	strh	r1, [r2, r3]
			break;
 8000f26:	e069      	b.n	8000ffc <handle_range+0x18c>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8000f28:	1dbb      	adds	r3, r7, #6
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <handle_range+0x1b4>)
 8000f2e:	0052      	lsls	r2, r2, #1
 8000f30:	5ad3      	ldrh	r3, [r2, r3]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	d800      	bhi.n	8000f38 <handle_range+0xc8>
 8000f36:	e063      	b.n	8001000 <handle_range+0x190>
			{
				holding_register_database[holding_register] = 5;
 8000f38:	1dbb      	adds	r3, r7, #6
 8000f3a:	881a      	ldrh	r2, [r3, #0]
 8000f3c:	4b39      	ldr	r3, [pc, #228]	@ (8001024 <handle_range+0x1b4>)
 8000f3e:	0052      	lsls	r2, r2, #1
 8000f40:	2105      	movs	r1, #5
 8000f42:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8000f44:	e05c      	b.n	8001000 <handle_range+0x190>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	4b36      	ldr	r3, [pc, #216]	@ (8001024 <handle_range+0x1b4>)
 8000f4c:	0052      	lsls	r2, r2, #1
 8000f4e:	5ad2      	ldrh	r2, [r2, r3]
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d355      	bcc.n	8001004 <handle_range+0x194>
			{
				holding_register_database[holding_register] = 0x3FF;
 8000f58:	1dbb      	adds	r3, r7, #6
 8000f5a:	881a      	ldrh	r2, [r3, #0]
 8000f5c:	4b31      	ldr	r3, [pc, #196]	@ (8001024 <handle_range+0x1b4>)
 8000f5e:	0052      	lsls	r2, r2, #1
 8000f60:	4931      	ldr	r1, [pc, #196]	@ (8001028 <handle_range+0x1b8>)
 8000f62:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8000f64:	e04e      	b.n	8001004 <handle_range+0x194>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001024 <handle_range+0x1b4>)
 8000f6c:	0052      	lsls	r2, r2, #1
 8000f6e:	5ad3      	ldrh	r3, [r2, r3]
 8000f70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f72:	d949      	bls.n	8001008 <handle_range+0x198>
			{
				holding_register_database[holding_register] = 0x7F;
 8000f74:	1dbb      	adds	r3, r7, #6
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <handle_range+0x1b4>)
 8000f7a:	0052      	lsls	r2, r2, #1
 8000f7c:	217f      	movs	r1, #127	@ 0x7f
 8000f7e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8000f80:	e042      	b.n	8001008 <handle_range+0x198>
		}
		case I2C_SHUTDOWN:
		{
			if(holding_register_database[holding_register] > 1)
 8000f82:	1dbb      	adds	r3, r7, #6
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <handle_range+0x1b4>)
 8000f88:	0052      	lsls	r2, r2, #1
 8000f8a:	5ad3      	ldrh	r3, [r2, r3]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d93d      	bls.n	800100c <handle_range+0x19c>
			{
				holding_register_database[holding_register] = 1;
 8000f90:	1dbb      	adds	r3, r7, #6
 8000f92:	881a      	ldrh	r2, [r3, #0]
 8000f94:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <handle_range+0x1b4>)
 8000f96:	0052      	lsls	r2, r2, #1
 8000f98:	2101      	movs	r1, #1
 8000f9a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8000f9c:	e036      	b.n	800100c <handle_range+0x19c>
		}
		case GPIO_WRITE:
		{
			if(holding_register_database[holding_register] > 0xF)
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	881a      	ldrh	r2, [r3, #0]
 8000fa2:	4b20      	ldr	r3, [pc, #128]	@ (8001024 <handle_range+0x1b4>)
 8000fa4:	0052      	lsls	r2, r2, #1
 8000fa6:	5ad3      	ldrh	r3, [r2, r3]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d931      	bls.n	8001010 <handle_range+0x1a0>
			{
				holding_register_database[holding_register] = 0xF;
 8000fac:	1dbb      	adds	r3, r7, #6
 8000fae:	881a      	ldrh	r2, [r3, #0]
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <handle_range+0x1b4>)
 8000fb2:	0052      	lsls	r2, r2, #1
 8000fb4:	210f      	movs	r1, #15
 8000fb6:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8000fb8:	e02a      	b.n	8001010 <handle_range+0x1a0>
		}
		case WDG_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 10)
 8000fba:	1dbb      	adds	r3, r7, #6
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <handle_range+0x1b4>)
 8000fc0:	0052      	lsls	r2, r2, #1
 8000fc2:	5ad3      	ldrh	r3, [r2, r3]
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	d806      	bhi.n	8000fd6 <handle_range+0x166>
			{
				holding_register_database[holding_register] = 10;
 8000fc8:	1dbb      	adds	r3, r7, #6
 8000fca:	881a      	ldrh	r2, [r3, #0]
 8000fcc:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <handle_range+0x1b4>)
 8000fce:	0052      	lsls	r2, r2, #1
 8000fd0:	210a      	movs	r1, #10
 8000fd2:	52d1      	strh	r1, [r2, r3]
			else if(holding_register_database[holding_register] > 10000)
			{
				holding_register_database[holding_register] = 10000;
			}

			break;
 8000fd4:	e01e      	b.n	8001014 <handle_range+0x1a4>
			else if(holding_register_database[holding_register] > 10000)
 8000fd6:	1dbb      	adds	r3, r7, #6
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <handle_range+0x1b4>)
 8000fdc:	0052      	lsls	r2, r2, #1
 8000fde:	5ad3      	ldrh	r3, [r2, r3]
 8000fe0:	4a12      	ldr	r2, [pc, #72]	@ (800102c <handle_range+0x1bc>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d916      	bls.n	8001014 <handle_range+0x1a4>
				holding_register_database[holding_register] = 10000;
 8000fe6:	1dbb      	adds	r3, r7, #6
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <handle_range+0x1b4>)
 8000fec:	0052      	lsls	r2, r2, #1
 8000fee:	490f      	ldr	r1, [pc, #60]	@ (800102c <handle_range+0x1bc>)
 8000ff0:	52d1      	strh	r1, [r2, r3]
			break;
 8000ff2:	e00f      	b.n	8001014 <handle_range+0x1a4>
			break;
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	e00e      	b.n	8001016 <handle_range+0x1a6>
			break;
 8000ff8:	46c0      	nop			@ (mov r8, r8)
 8000ffa:	e00c      	b.n	8001016 <handle_range+0x1a6>
			break;
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	e00a      	b.n	8001016 <handle_range+0x1a6>
			break;
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	e008      	b.n	8001016 <handle_range+0x1a6>
			break;
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	e006      	b.n	8001016 <handle_range+0x1a6>
			break;
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	e004      	b.n	8001016 <handle_range+0x1a6>
			break;
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	e002      	b.n	8001016 <handle_range+0x1a6>
			break;
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	e000      	b.n	8001016 <handle_range+0x1a6>
			break;
 8001014:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	08005200 	.word	0x08005200
 8001024:	20000000 	.word	0x20000000
 8001028:	000003ff 	.word	0x000003ff
 800102c:	00002710 	.word	0x00002710

08001030 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	000a      	movs	r2, r1
 800103a:	1cfb      	adds	r3, r7, #3
 800103c:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 800103e:	250e      	movs	r5, #14
 8001040:	197c      	adds	r4, r7, r5
 8001042:	1cfb      	adds	r3, r7, #3
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	4b2a      	ldr	r3, [pc, #168]	@ (80010f0 <modbus_send+0xc0>)
 8001048:	0011      	movs	r1, r2
 800104a:	0018      	movs	r0, r3
 800104c:	f000 f968 	bl	8001320 <crc_16>
 8001050:	0003      	movs	r3, r0
 8001052:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8001054:	1cfb      	adds	r3, r7, #3
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	197a      	adds	r2, r7, r5
 800105a:	8812      	ldrh	r2, [r2, #0]
 800105c:	b2d1      	uxtb	r1, r2
 800105e:	4a24      	ldr	r2, [pc, #144]	@ (80010f0 <modbus_send+0xc0>)
 8001060:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8001062:	197b      	adds	r3, r7, r5
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b29a      	uxth	r2, r3
 800106a:	1cfb      	adds	r3, r7, #3
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	b2d1      	uxtb	r1, r2
 8001072:	4a1f      	ldr	r2, [pc, #124]	@ (80010f0 <modbus_send+0xc0>)
 8001074:	54d1      	strb	r1, [r2, r3]

	int8_t status = HAL_OK;
 8001076:	240d      	movs	r4, #13
 8001078:	193b      	adds	r3, r7, r4
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, modbus_tx_buffer, size + 2);
 800107e:	1cfb      	adds	r3, r7, #3
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	3302      	adds	r3, #2
 8001086:	b29a      	uxth	r2, r3
 8001088:	4919      	ldr	r1, [pc, #100]	@ (80010f0 <modbus_send+0xc0>)
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <modbus_send+0xc4>)
 800108c:	0018      	movs	r0, r3
 800108e:	f002 f823 	bl	80030d8 <HAL_UART_Transmit_IT>
 8001092:	0003      	movs	r3, r0
 8001094:	001a      	movs	r2, r3
 8001096:	193b      	adds	r3, r7, r4
 8001098:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 800109a:	193b      	adds	r3, r7, r4
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <modbus_send+0x7c>
	{
		return status;
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	e01d      	b.n	80010e8 <modbus_send+0xb8>
	}
	time = HAL_GetTick();
 80010ac:	f000 fb98 	bl	80017e0 <HAL_GetTick>
 80010b0:	0002      	movs	r2, r0
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <modbus_send+0xc8>)
 80010b4:	601a      	str	r2, [r3, #0]
	while(!tx_int && ((HAL_GetTick()) - time < 100));
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <modbus_send+0xcc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d107      	bne.n	80010d2 <modbus_send+0xa2>
 80010c2:	f000 fb8d 	bl	80017e0 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <modbus_send+0xc8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b63      	cmp	r3, #99	@ 0x63
 80010d0:	d9f2      	bls.n	80010b8 <modbus_send+0x88>
	if(tx_int)
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <modbus_send+0xcc>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <modbus_send+0xb6>
	{
		tx_int = 0;
 80010dc:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <modbus_send+0xcc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <modbus_send+0xb8>
	}
	else
	{
		return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
	}
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b004      	add	sp, #16
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}
 80010f0:	2000023c 	.word	0x2000023c
 80010f4:	20000040 	.word	0x20000040
 80010f8:	20000438 	.word	0x20000438
 80010fc:	20000447 	.word	0x20000447

08001100 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	if(rx_int)
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <modbus_rx+0x28>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d004      	beq.n	8001118 <modbus_rx+0x18>
	{
		rx_int = 0;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <modbus_rx+0x28>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
		return 1;
 8001114:	2301      	movs	r3, #1
 8001116:	e004      	b.n	8001122 <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8001118:	f7ff fc90 	bl	8000a3c <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 800111c:	4b02      	ldr	r3, [pc, #8]	@ (8001128 <modbus_rx+0x28>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000446 	.word	0x20000446

0800112c <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 8001132:	490c      	ldr	r1, [pc, #48]	@ (8001164 <modbus_set_rx+0x38>)
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <modbus_set_rx+0x3c>)
 8001136:	2206      	movs	r2, #6
 8001138:	0018      	movs	r0, r3
 800113a:	f003 fe59 	bl	8004df0 <HAL_UARTEx_ReceiveToIdle_DMA>
 800113e:	0003      	movs	r3, r0
 8001140:	001a      	movs	r2, r3
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <modbus_set_rx+0x40>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <modbus_set_rx+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2104      	movs	r1, #4
 8001152:	438a      	bics	r2, r1
 8001154:	601a      	str	r2, [r3, #0]

	return status;
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b25b      	sxtb	r3, r3
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000033c 	.word	0x2000033c
 8001168:	20000040 	.word	0x20000040
 800116c:	200000d4 	.word	0x200000d4

08001170 <modbus_shutdown>:

/*
 	 General Modbus Shutdown
 */
int8_t modbus_shutdown()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	int8_t status = HAL_UART_AbortReceive(&huart1);
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <modbus_shutdown+0x48>)
 8001178:	0018      	movs	r0, r3
 800117a:	f002 f961 	bl	8003440 <HAL_UART_AbortReceive>
 800117e:	0003      	movs	r3, r0
 8001180:	001a      	movs	r2, r3
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b25b      	sxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <modbus_shutdown+0x28>
	{
		return status;
 8001190:	1dfb      	adds	r3, r7, #7
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b25b      	sxtb	r3, r3
 8001196:	e00a      	b.n	80011ae <modbus_shutdown+0x3e>
	}
	status = HAL_UART_DeInit(&huart1);
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <modbus_shutdown+0x48>)
 800119a:	0018      	movs	r0, r3
 800119c:	f001 ff5c 	bl	8003058 <HAL_UART_DeInit>
 80011a0:	0003      	movs	r3, r0
 80011a2:	001a      	movs	r2, r3
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	701a      	strb	r2, [r3, #0]

	return status;
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25b      	sxtb	r3, r3
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	20000040 	.word	0x20000040

080011bc <modbus_startup>:

/*
 	 General Modbus Startup
 */
int8_t modbus_startup()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
	int8_t status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 80011c2:	4823      	ldr	r0, [pc, #140]	@ (8001250 <modbus_startup+0x94>)
 80011c4:	2300      	movs	r3, #0
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	f003 fccb 	bl	8004b64 <HAL_RS485Ex_Init>
 80011ce:	0003      	movs	r3, r0
 80011d0:	001a      	movs	r2, r3
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <modbus_startup+0x2c>
	{
		return status;
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	e02e      	b.n	8001246 <modbus_startup+0x8a>
	}
	status = HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <modbus_startup+0x94>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	0018      	movs	r0, r3
 80011ee:	f003 fd7d 	bl	8004cec <HAL_UARTEx_SetTxFifoThreshold>
 80011f2:	0003      	movs	r3, r0
 80011f4:	001a      	movs	r2, r3
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <modbus_startup+0x50>
	{
		return status;
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	e01c      	b.n	8001246 <modbus_startup+0x8a>
	}
	status = HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 800120c:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <modbus_startup+0x94>)
 800120e:	2100      	movs	r1, #0
 8001210:	0018      	movs	r0, r3
 8001212:	f003 fdab 	bl	8004d6c <HAL_UARTEx_SetRxFifoThreshold>
 8001216:	0003      	movs	r3, r0
 8001218:	001a      	movs	r2, r3
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b25b      	sxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <modbus_startup+0x74>
	{
		return status;
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	e00a      	b.n	8001246 <modbus_startup+0x8a>
	}
	status = HAL_UARTEx_DisableFifoMode(&huart1);
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <modbus_startup+0x94>)
 8001232:	0018      	movs	r0, r3
 8001234:	f003 fd20 	bl	8004c78 <HAL_UARTEx_DisableFifoMode>
 8001238:	0003      	movs	r3, r0
 800123a:	001a      	movs	r2, r3
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	701a      	strb	r2, [r3, #0]
	return status;
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b25b      	sxtb	r3, r3
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	20000040 	.word	0x20000040

08001254 <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[1])
 8001260:	4b2c      	ldr	r3, [pc, #176]	@ (8001314 <modbus_change_baud_rate+0xc0>)
 8001262:	885b      	ldrh	r3, [r3, #2]
 8001264:	2b09      	cmp	r3, #9
 8001266:	d82c      	bhi.n	80012c2 <modbus_change_baud_rate+0x6e>
 8001268:	009a      	lsls	r2, r3, #2
 800126a:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <modbus_change_baud_rate+0xc4>)
 800126c:	18d3      	adds	r3, r2, r3
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8001272:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <modbus_change_baud_rate+0xc8>)
 8001274:	2296      	movs	r2, #150	@ 0x96
 8001276:	0152      	lsls	r2, r2, #5
 8001278:	605a      	str	r2, [r3, #4]
			break;
 800127a:	e033      	b.n	80012e4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 800127c:	4b27      	ldr	r3, [pc, #156]	@ (800131c <modbus_change_baud_rate+0xc8>)
 800127e:	2296      	movs	r2, #150	@ 0x96
 8001280:	0192      	lsls	r2, r2, #6
 8001282:	605a      	str	r2, [r3, #4]
			break;
 8001284:	e02e      	b.n	80012e4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8001286:	4b25      	ldr	r3, [pc, #148]	@ (800131c <modbus_change_baud_rate+0xc8>)
 8001288:	2296      	movs	r2, #150	@ 0x96
 800128a:	01d2      	lsls	r2, r2, #7
 800128c:	605a      	str	r2, [r3, #4]
			break;
 800128e:	e029      	b.n	80012e4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <modbus_change_baud_rate+0xc8>)
 8001292:	2296      	movs	r2, #150	@ 0x96
 8001294:	0212      	lsls	r2, r2, #8
 8001296:	605a      	str	r2, [r3, #4]
			break;
 8001298:	e024      	b.n	80012e4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <modbus_change_baud_rate+0xc8>)
 800129c:	22e1      	movs	r2, #225	@ 0xe1
 800129e:	0212      	lsls	r2, r2, #8
 80012a0:	605a      	str	r2, [r3, #4]
			break;
 80012a2:	e01f      	b.n	80012e4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <modbus_change_baud_rate+0xc8>)
 80012a6:	22e1      	movs	r2, #225	@ 0xe1
 80012a8:	0252      	lsls	r2, r2, #9
 80012aa:	605a      	str	r2, [r3, #4]
			break;
 80012ac:	e01a      	b.n	80012e4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <modbus_change_baud_rate+0xc8>)
 80012b0:	22fa      	movs	r2, #250	@ 0xfa
 80012b2:	0252      	lsls	r2, r2, #9
 80012b4:	605a      	str	r2, [r3, #4]
			break;
 80012b6:	e015      	b.n	80012e4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <modbus_change_baud_rate+0xc8>)
 80012ba:	22fa      	movs	r2, #250	@ 0xfa
 80012bc:	0292      	lsls	r2, r2, #10
 80012be:	605a      	str	r2, [r3, #4]
			break;
 80012c0:	e010      	b.n	80012e4 <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[1] = BAUD_RATE_9600;
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <modbus_change_baud_rate+0xc0>)
 80012c4:	2203      	movs	r2, #3
 80012c6:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <modbus_change_baud_rate+0xc8>)
 80012ca:	2296      	movs	r2, #150	@ 0x96
 80012cc:	0192      	lsls	r2, r2, #6
 80012ce:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <modbus_change_baud_rate+0xc8>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f002 fcc6 	bl	8003c64 <UART_SetConfig>
 80012d8:	0003      	movs	r3, r0
 80012da:	001a      	movs	r2, r3
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 80012e0:	2306      	movs	r3, #6
 80012e2:	e013      	b.n	800130c <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <modbus_change_baud_rate+0xc8>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f002 fcbc 	bl	8003c64 <UART_SetConfig>
 80012ec:	0003      	movs	r3, r0
 80012ee:	001a      	movs	r2, r3
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <modbus_change_baud_rate+0xb2>
	{
		return status;
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	e002      	b.n	800130c <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25b      	sxtb	r3, r3
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b002      	add	sp, #8
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	08005228 	.word	0x08005228
 800131c:	20000040 	.word	0x20000040

08001320 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	000a      	movs	r2, r1
 800132a:	1cfb      	adds	r3, r7, #3
 800132c:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 800132e:	230f      	movs	r3, #15
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	22ff      	movs	r2, #255	@ 0xff
 8001334:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8001336:	230e      	movs	r3, #14
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	22ff      	movs	r2, #255	@ 0xff
 800133c:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 800133e:	e019      	b.n	8001374 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	200e      	movs	r0, #14
 800134a:	183b      	adds	r3, r7, r0
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4053      	eors	r3, r2
 8001350:	b2db      	uxtb	r3, r3
 8001352:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8001354:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <crc_16+0x84>)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	18d3      	adds	r3, r2, r3
 800135a:	7819      	ldrb	r1, [r3, #0]
 800135c:	183b      	adds	r3, r7, r0
 800135e:	200f      	movs	r0, #15
 8001360:	183a      	adds	r2, r7, r0
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	404a      	eors	r2, r1
 8001366:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8001368:	183b      	adds	r3, r7, r0
 800136a:	490f      	ldr	r1, [pc, #60]	@ (80013a8 <crc_16+0x88>)
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	188a      	adds	r2, r1, r2
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	701a      	strb	r2, [r3, #0]
	while (size--)
 8001374:	1cfb      	adds	r3, r7, #3
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	1cfa      	adds	r2, r7, #3
 800137a:	1e59      	subs	r1, r3, #1
 800137c:	7011      	strb	r1, [r2, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1de      	bne.n	8001340 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8001382:	230f      	movs	r3, #15
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	230e      	movs	r3, #14
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	b29b      	uxth	r3, r3
}
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	08005000 	.word	0x08005000
 80013a8:	08005100 	.word	0x08005100

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <HAL_MspInit+0x44>)
 80013b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_MspInit+0x44>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	430a      	orrs	r2, r1
 80013bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <HAL_MspInit+0x44>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	2201      	movs	r2, #1
 80013c4:	4013      	ands	r3, r2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_MspInit+0x44>)
 80013cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_MspInit+0x44>)
 80013d0:	2180      	movs	r1, #128	@ 0x80
 80013d2:	0549      	lsls	r1, r1, #21
 80013d4:	430a      	orrs	r2, r1
 80013d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013d8:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <HAL_MspInit+0x44>)
 80013da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	055b      	lsls	r3, r3, #21
 80013e0:	4013      	ands	r3, r2
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b095      	sub	sp, #84	@ 0x54
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	233c      	movs	r3, #60	@ 0x3c
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	0018      	movs	r0, r3
 8001402:	2314      	movs	r3, #20
 8001404:	001a      	movs	r2, r3
 8001406:	2100      	movs	r1, #0
 8001408:	f003 fdb8 	bl	8004f7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800140c:	241c      	movs	r4, #28
 800140e:	193b      	adds	r3, r7, r4
 8001410:	0018      	movs	r0, r3
 8001412:	2320      	movs	r3, #32
 8001414:	001a      	movs	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	f003 fdb0 	bl	8004f7c <memset>
  if(huart->Instance==USART1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a5f      	ldr	r2, [pc, #380]	@ (80015a0 <HAL_UART_MspInit+0x1ac>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d000      	beq.n	8001428 <HAL_UART_MspInit+0x34>
 8001426:	e0b6      	b.n	8001596 <HAL_UART_MspInit+0x1a2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001428:	193b      	adds	r3, r7, r4
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800142e:	193b      	adds	r3, r7, r4
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	193b      	adds	r3, r7, r4
 8001436:	0018      	movs	r0, r3
 8001438:	f001 fd12 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	1e03      	subs	r3, r0, #0
 800143e:	d001      	beq.n	8001444 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001440:	f7ff fa3e 	bl	80008c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001444:	4b57      	ldr	r3, [pc, #348]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 8001446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001448:	4b56      	ldr	r3, [pc, #344]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	01c9      	lsls	r1, r1, #7
 800144e:	430a      	orrs	r2, r1
 8001450:	641a      	str	r2, [r3, #64]	@ 0x40
 8001452:	4b54      	ldr	r3, [pc, #336]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 8001454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	01db      	lsls	r3, r3, #7
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001460:	4b50      	ldr	r3, [pc, #320]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 8001462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001464:	4b4f      	ldr	r3, [pc, #316]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 8001466:	2104      	movs	r1, #4
 8001468:	430a      	orrs	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	@ 0x34
 800146c:	4b4d      	ldr	r3, [pc, #308]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001470:	2204      	movs	r2, #4
 8001472:	4013      	ands	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b4a      	ldr	r3, [pc, #296]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 800147a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800147c:	4b49      	ldr	r3, [pc, #292]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 800147e:	2102      	movs	r1, #2
 8001480:	430a      	orrs	r2, r1
 8001482:	635a      	str	r2, [r3, #52]	@ 0x34
 8001484:	4b47      	ldr	r3, [pc, #284]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 8001486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001488:	2202      	movs	r2, #2
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b44      	ldr	r3, [pc, #272]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 8001492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001494:	4b43      	ldr	r3, [pc, #268]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 8001496:	2101      	movs	r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	635a      	str	r2, [r3, #52]	@ 0x34
 800149c:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <HAL_UART_MspInit+0x1b0>)
 800149e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014a8:	213c      	movs	r1, #60	@ 0x3c
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2280      	movs	r2, #128	@ 0x80
 80014ae:	01d2      	lsls	r2, r2, #7
 80014b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	000c      	movs	r4, r1
 80014b4:	193b      	adds	r3, r7, r4
 80014b6:	2202      	movs	r2, #2
 80014b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	4a36      	ldr	r2, [pc, #216]	@ (80015a8 <HAL_UART_MspInit+0x1b4>)
 80014d0:	0019      	movs	r1, r3
 80014d2:	0010      	movs	r0, r2
 80014d4:	f000 fe74 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d8:	193b      	adds	r3, r7, r4
 80014da:	2204      	movs	r2, #4
 80014dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2202      	movs	r2, #2
 80014e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	4a2c      	ldr	r2, [pc, #176]	@ (80015ac <HAL_UART_MspInit+0x1b8>)
 80014fa:	0019      	movs	r1, r3
 80014fc:	0010      	movs	r0, r2
 80014fe:	f000 fe5f 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001502:	0021      	movs	r1, r4
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	0152      	lsls	r2, r2, #5
 800150a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2202      	movs	r2, #2
 8001510:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2201      	movs	r2, #1
 8001522:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	187a      	adds	r2, r7, r1
 8001526:	23a0      	movs	r3, #160	@ 0xa0
 8001528:	05db      	lsls	r3, r3, #23
 800152a:	0011      	movs	r1, r2
 800152c:	0018      	movs	r0, r3
 800152e:	f000 fe47 	bl	80021c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 8001534:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <HAL_UART_MspInit+0x1c0>)
 8001536:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 800153a:	2232      	movs	r2, #50	@ 0x32
 800153c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 800154c:	2280      	movs	r2, #128	@ 0x80
 800154e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 800156a:	0018      	movs	r0, r3
 800156c:	f000 fa76 	bl	8001a5c <HAL_DMA_Init>
 8001570:	1e03      	subs	r3, r0, #0
 8001572:	d001      	beq.n	8001578 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 8001574:	f7ff f9a4 	bl	80008c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	4a0c      	ldr	r2, [pc, #48]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 800157e:	505a      	str	r2, [r3, r1]
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <HAL_UART_MspInit+0x1bc>)
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	201b      	movs	r0, #27
 800158c:	f000 fa24 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001590:	201b      	movs	r0, #27
 8001592:	f000 fa36 	bl	8001a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b015      	add	sp, #84	@ 0x54
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	50000800 	.word	0x50000800
 80015ac:	50000400 	.word	0x50000400
 80015b0:	200000d4 	.word	0x200000d4
 80015b4:	40020008 	.word	0x40020008

080015b8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <HAL_UART_MspDeInit+0x60>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d122      	bne.n	8001610 <HAL_UART_MspDeInit+0x58>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_UART_MspDeInit+0x64>)
 80015cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ce:	4b13      	ldr	r3, [pc, #76]	@ (800161c <HAL_UART_MspDeInit+0x64>)
 80015d0:	4913      	ldr	r1, [pc, #76]	@ (8001620 <HAL_UART_MspDeInit+0x68>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 80015d6:	2380      	movs	r3, #128	@ 0x80
 80015d8:	01db      	lsls	r3, r3, #7
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <HAL_UART_MspDeInit+0x6c>)
 80015dc:	0019      	movs	r1, r3
 80015de:	0010      	movs	r0, r2
 80015e0:	f000 ff60 	bl	80024a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_UART_MspDeInit+0x70>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	0018      	movs	r0, r3
 80015ea:	f000 ff5b 	bl	80024a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80015ee:	2380      	movs	r3, #128	@ 0x80
 80015f0:	015a      	lsls	r2, r3, #5
 80015f2:	23a0      	movs	r3, #160	@ 0xa0
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	0011      	movs	r1, r2
 80015f8:	0018      	movs	r0, r3
 80015fa:	f000 ff53 	bl	80024a4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	589b      	ldr	r3, [r3, r2]
 8001604:	0018      	movs	r0, r3
 8001606:	f000 fab3 	bl	8001b70 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800160a:	201b      	movs	r0, #27
 800160c:	f000 fa09 	bl	8001a22 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001610:	46c0      	nop			@ (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40013800 	.word	0x40013800
 800161c:	40021000 	.word	0x40021000
 8001620:	ffffbfff 	.word	0xffffbfff
 8001624:	50000800 	.word	0x50000800
 8001628:	50000400 	.word	0x50000400

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	46c0      	nop			@ (mov r8, r8)
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 f8b2 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	46c0      	nop			@ (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <DMA1_Channel1_IRQHandler+0x14>)
 8001666:	0018      	movs	r0, r3
 8001668:	f000 fc5e 	bl	8001f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800166c:	46c0      	nop			@ (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	200000d4 	.word	0x200000d4

08001678 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <USART1_IRQHandler+0x14>)
 800167e:	0018      	movs	r0, r3
 8001680:	f001 ff92 	bl	80035a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	20000040 	.word	0x20000040

08001690 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <SystemInit+0x14>)
 8001696:	2280      	movs	r2, #128	@ 0x80
 8001698:	0512      	lsls	r2, r2, #20
 800169a:	609a      	str	r2, [r3, #8]
#endif
}
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016a8:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016ac:	f7ff fff0 	bl	8001690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016b2:	e003      	b.n	80016bc <LoopCopyDataInit>

080016b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80016b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016ba:	3104      	adds	r1, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016bc:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <LoopForever+0xa>)
  ldr r3, =_edata
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <LoopForever+0xe>)
  adds r2, r0, r1
 80016c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016c4:	d3f6      	bcc.n	80016b4 <CopyDataInit>
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopForever+0x12>)
  b LoopFillZerobss
 80016c8:	e002      	b.n	80016d0 <LoopFillZerobss>

080016ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  str  r3, [r2]
 80016cc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ce:	3204      	adds	r2, #4

080016d0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80016d0:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <LoopForever+0x16>)
  cmp r2, r3
 80016d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016d4:	d3f9      	bcc.n	80016ca <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80016d6:	f003 fc59 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016da:	f7fe fe8b 	bl	80003f4 <main>

080016de <LoopForever>:

LoopForever:
    b LoopForever
 80016de:	e7fe      	b.n	80016de <LoopForever>
  ldr   r0, =_estack
 80016e0:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 80016e4:	080052e0 	.word	0x080052e0
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016ec:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 80016f0:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 80016f4:	2000044c 	.word	0x2000044c

080016f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC1_IRQHandler>

080016fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001706:	2003      	movs	r0, #3
 8001708:	f000 f80e 	bl	8001728 <HAL_InitTick>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d003      	beq.n	8001718 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e001      	b.n	800171c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001718:	f7ff fe48 	bl	80013ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	781b      	ldrb	r3, [r3, #0]
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b002      	add	sp, #8
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001730:	230f      	movs	r3, #15
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001738:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <HAL_InitTick+0x88>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d02b      	beq.n	8001798 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <HAL_InitTick+0x8c>)
 8001742:	681c      	ldr	r4, [r3, #0]
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <HAL_InitTick+0x88>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	0019      	movs	r1, r3
 800174a:	23fa      	movs	r3, #250	@ 0xfa
 800174c:	0098      	lsls	r0, r3, #2
 800174e:	f7fe fcdb 	bl	8000108 <__udivsi3>
 8001752:	0003      	movs	r3, r0
 8001754:	0019      	movs	r1, r3
 8001756:	0020      	movs	r0, r4
 8001758:	f7fe fcd6 	bl	8000108 <__udivsi3>
 800175c:	0003      	movs	r3, r0
 800175e:	0018      	movs	r0, r3
 8001760:	f000 f96f 	bl	8001a42 <HAL_SYSTICK_Config>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d112      	bne.n	800178e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d80a      	bhi.n	8001784 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	2301      	movs	r3, #1
 8001772:	425b      	negs	r3, r3
 8001774:	2200      	movs	r2, #0
 8001776:	0018      	movs	r0, r3
 8001778:	f000 f92e 	bl	80019d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800177c:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_InitTick+0x90>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e00d      	b.n	80017a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e008      	b.n	80017a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800178e:	230f      	movs	r3, #15
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e003      	b.n	80017a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001798:	230f      	movs	r3, #15
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80017a0:	230f      	movs	r3, #15
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b005      	add	sp, #20
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	20000020 	.word	0x20000020
 80017b4:	20000018 	.word	0x20000018
 80017b8:	2000001c 	.word	0x2000001c

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_IncTick+0x1c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	001a      	movs	r2, r3
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_IncTick+0x20>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	18d2      	adds	r2, r2, r3
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <HAL_IncTick+0x20>)
 80017ce:	601a      	str	r2, [r3, #0]
}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	20000020 	.word	0x20000020
 80017dc:	20000448 	.word	0x20000448

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b02      	ldr	r3, [pc, #8]	@ (80017f0 <HAL_GetTick+0x10>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	20000448 	.word	0x20000448

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fff0 	bl	80017e0 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	001a      	movs	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	189b      	adds	r3, r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	f7ff ffe0 	bl	80017e0 <HAL_GetTick>
 8001820:	0002      	movs	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	46c0      	nop			@ (mov r8, r8)
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b004      	add	sp, #16
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	20000020 	.word	0x20000020

0800183c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	0002      	movs	r2, r0
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b7f      	cmp	r3, #127	@ 0x7f
 800184e:	d809      	bhi.n	8001864 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	001a      	movs	r2, r3
 8001856:	231f      	movs	r3, #31
 8001858:	401a      	ands	r2, r3
 800185a:	4b04      	ldr	r3, [pc, #16]	@ (800186c <__NVIC_EnableIRQ+0x30>)
 800185c:	2101      	movs	r1, #1
 800185e:	4091      	lsls	r1, r2
 8001860:	000a      	movs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001864:	46c0      	nop			@ (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	0002      	movs	r2, r0
 8001878:	1dfb      	adds	r3, r7, #7
 800187a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b7f      	cmp	r3, #127	@ 0x7f
 8001882:	d810      	bhi.n	80018a6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	001a      	movs	r2, r3
 800188a:	231f      	movs	r3, #31
 800188c:	4013      	ands	r3, r2
 800188e:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <__NVIC_DisableIRQ+0x40>)
 8001890:	2201      	movs	r2, #1
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	2280      	movs	r2, #128	@ 0x80
 8001898:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800189a:	f3bf 8f4f 	dsb	sy
}
 800189e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80018a0:	f3bf 8f6f 	isb	sy
}
 80018a4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	0002      	movs	r2, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80018c8:	d828      	bhi.n	800191c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001988 <__NVIC_SetPriority+0xd4>)
 80018cc:	1dfb      	adds	r3, r7, #7
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	33c0      	adds	r3, #192	@ 0xc0
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	589b      	ldr	r3, [r3, r2]
 80018da:	1dfa      	adds	r2, r7, #7
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	0011      	movs	r1, r2
 80018e0:	2203      	movs	r2, #3
 80018e2:	400a      	ands	r2, r1
 80018e4:	00d2      	lsls	r2, r2, #3
 80018e6:	21ff      	movs	r1, #255	@ 0xff
 80018e8:	4091      	lsls	r1, r2
 80018ea:	000a      	movs	r2, r1
 80018ec:	43d2      	mvns	r2, r2
 80018ee:	401a      	ands	r2, r3
 80018f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	22ff      	movs	r2, #255	@ 0xff
 80018f8:	401a      	ands	r2, r3
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	0018      	movs	r0, r3
 8001900:	2303      	movs	r3, #3
 8001902:	4003      	ands	r3, r0
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001908:	481f      	ldr	r0, [pc, #124]	@ (8001988 <__NVIC_SetPriority+0xd4>)
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b25b      	sxtb	r3, r3
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	430a      	orrs	r2, r1
 8001914:	33c0      	adds	r3, #192	@ 0xc0
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800191a:	e031      	b.n	8001980 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800191c:	4a1b      	ldr	r2, [pc, #108]	@ (800198c <__NVIC_SetPriority+0xd8>)
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	0019      	movs	r1, r3
 8001924:	230f      	movs	r3, #15
 8001926:	400b      	ands	r3, r1
 8001928:	3b08      	subs	r3, #8
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3306      	adds	r3, #6
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	18d3      	adds	r3, r2, r3
 8001932:	3304      	adds	r3, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1dfa      	adds	r2, r7, #7
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	0011      	movs	r1, r2
 800193c:	2203      	movs	r2, #3
 800193e:	400a      	ands	r2, r1
 8001940:	00d2      	lsls	r2, r2, #3
 8001942:	21ff      	movs	r1, #255	@ 0xff
 8001944:	4091      	lsls	r1, r2
 8001946:	000a      	movs	r2, r1
 8001948:	43d2      	mvns	r2, r2
 800194a:	401a      	ands	r2, r3
 800194c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	019b      	lsls	r3, r3, #6
 8001952:	22ff      	movs	r2, #255	@ 0xff
 8001954:	401a      	ands	r2, r3
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	0018      	movs	r0, r3
 800195c:	2303      	movs	r3, #3
 800195e:	4003      	ands	r3, r0
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001964:	4809      	ldr	r0, [pc, #36]	@ (800198c <__NVIC_SetPriority+0xd8>)
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	001c      	movs	r4, r3
 800196c:	230f      	movs	r3, #15
 800196e:	4023      	ands	r3, r4
 8001970:	3b08      	subs	r3, #8
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	430a      	orrs	r2, r1
 8001976:	3306      	adds	r3, #6
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	18c3      	adds	r3, r0, r3
 800197c:	3304      	adds	r3, #4
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b003      	add	sp, #12
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	045b      	lsls	r3, r3, #17
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d301      	bcc.n	80019a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a4:	2301      	movs	r3, #1
 80019a6:	e010      	b.n	80019ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a8:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <SysTick_Config+0x44>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	3a01      	subs	r2, #1
 80019ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b0:	2301      	movs	r3, #1
 80019b2:	425b      	negs	r3, r3
 80019b4:	2103      	movs	r1, #3
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff ff7c 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x44>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x44>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	210f      	movs	r1, #15
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	1c02      	adds	r2, r0, #0
 80019e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	0011      	movs	r1, r2
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b004      	add	sp, #16
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	0002      	movs	r2, r0
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff ff11 	bl	800183c <__NVIC_EnableIRQ>
}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	0002      	movs	r2, r0
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff ff1b 	bl	8001870 <__NVIC_DisableIRQ>
}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff ff9f 	bl	8001990 <SysTick_Config>
 8001a52:	0003      	movs	r3, r0
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e077      	b.n	8001b5e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3d      	ldr	r2, [pc, #244]	@ (8001b68 <HAL_DMA_Init+0x10c>)
 8001a74:	4694      	mov	ip, r2
 8001a76:	4463      	add	r3, ip
 8001a78:	2114      	movs	r1, #20
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7fe fb44 	bl	8000108 <__udivsi3>
 8001a80:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001a82:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2225      	movs	r2, #37	@ 0x25
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4934      	ldr	r1, [pc, #208]	@ (8001b6c <HAL_DMA_Init+0x110>)
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 fb21 	bl	8002120 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	01db      	lsls	r3, r3, #7
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d102      	bne.n	8001af0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af8:	21ff      	movs	r1, #255	@ 0xff
 8001afa:	400a      	ands	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b06:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d011      	beq.n	8001b34 <HAL_DMA_Init+0xd8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d80d      	bhi.n	8001b34 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 fb2c 	bl	8002178 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	e008      	b.n	8001b46 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2225      	movs	r2, #37	@ 0x25
 8001b50:	2101      	movs	r1, #1
 8001b52:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2224      	movs	r2, #36	@ 0x24
 8001b58:	2100      	movs	r1, #0
 8001b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	bffdfff8 	.word	0xbffdfff8
 8001b6c:	ffff800f 	.word	0xffff800f

08001b70 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e066      	b.n	8001c50 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	438a      	bics	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a30      	ldr	r2, [pc, #192]	@ (8001c58 <HAL_DMA_DeInit+0xe8>)
 8001b98:	4694      	mov	ip, r2
 8001b9a:	4463      	add	r3, ip
 8001b9c:	2114      	movs	r1, #20
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f7fe fab2 	bl	8000108 <__udivsi3>
 8001ba4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001ba6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001bb4:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_DMA_DeInit+0xec>)
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	221c      	movs	r2, #28
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <HAL_DMA_DeInit+0xec>)
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 faa7 	bl	8002120 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001be2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <HAL_DMA_DeInit+0x9e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d80c      	bhi.n	8001c0e <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fabe 	bl	8002178 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001c0c:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2225      	movs	r2, #37	@ 0x25
 8001c42:	2100      	movs	r1, #0
 8001c44:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2224      	movs	r2, #36	@ 0x24
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	bffdfff8 	.word	0xbffdfff8
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6e:	2317      	movs	r3, #23
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2224      	movs	r2, #36	@ 0x24
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_DMA_Start_IT+0x24>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e070      	b.n	8001d66 <HAL_DMA_Start_IT+0x106>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2224      	movs	r2, #36	@ 0x24
 8001c88:	2101      	movs	r1, #1
 8001c8a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2225      	movs	r2, #37	@ 0x25
 8001c90:	5c9b      	ldrb	r3, [r3, r2]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d157      	bne.n	8001d48 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2225      	movs	r2, #37	@ 0x25
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f9ef 	bl	80020a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	210e      	movs	r1, #14
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e00f      	b.n	8001cfc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	438a      	bics	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	210a      	movs	r1, #10
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	025b      	lsls	r3, r3, #9
 8001d06:	4013      	ands	r3, r2
 8001d08:	d008      	beq.n	8001d1c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d14:	2180      	movs	r1, #128	@ 0x80
 8001d16:	0049      	lsls	r1, r1, #1
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d2e:	2180      	movs	r1, #128	@ 0x80
 8001d30:	0049      	lsls	r1, r1, #1
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e007      	b.n	8001d58 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2224      	movs	r2, #36	@ 0x24
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d50:	2317      	movs	r3, #23
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2202      	movs	r2, #2
 8001d56:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2224      	movs	r2, #36	@ 0x24
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	5499      	strb	r1, [r3, r2]

  return status;
 8001d60:	2317      	movs	r3, #23
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	781b      	ldrb	r3, [r3, #0]
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b006      	add	sp, #24
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e050      	b.n	8001e24 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2225      	movs	r2, #37	@ 0x25
 8001d86:	5c9b      	ldrb	r3, [r3, r2]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d008      	beq.n	8001da0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2204      	movs	r2, #4
 8001d92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2224      	movs	r2, #36	@ 0x24
 8001d98:	2100      	movs	r1, #0
 8001d9a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e041      	b.n	8001e24 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	210e      	movs	r1, #14
 8001dac:	438a      	bics	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	491c      	ldr	r1, [pc, #112]	@ (8001e2c <HAL_DMA_Abort+0xbc>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	438a      	bics	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001dd0:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <HAL_DMA_Abort+0xc0>)
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	221c      	movs	r2, #28
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2201      	movs	r2, #1
 8001dde:	409a      	lsls	r2, r3
 8001de0:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <HAL_DMA_Abort+0xc0>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001dee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00c      	beq.n	8001e12 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e02:	490a      	ldr	r1, [pc, #40]	@ (8001e2c <HAL_DMA_Abort+0xbc>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001e10:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2225      	movs	r2, #37	@ 0x25
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2224      	movs	r2, #36	@ 0x24
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	fffffeff 	.word	0xfffffeff
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	@ 0x24
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	@ 0x24
 8001e50:	5c9b      	ldrb	r3, [r3, r2]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_DMA_Abort_IT+0x26>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e05e      	b.n	8001f18 <HAL_DMA_Abort_IT+0xe4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2224      	movs	r2, #36	@ 0x24
 8001e5e:	2101      	movs	r1, #1
 8001e60:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2225      	movs	r2, #37	@ 0x25
 8001e66:	5c9b      	ldrb	r3, [r3, r2]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d007      	beq.n	8001e7e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2204      	movs	r2, #4
 8001e72:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e74:	230f      	movs	r3, #15
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	e049      	b.n	8001f12 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	210e      	movs	r1, #14
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	438a      	bics	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	491d      	ldr	r1, [pc, #116]	@ (8001f20 <HAL_DMA_Abort_IT+0xec>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001eae:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <HAL_DMA_Abort_IT+0xf0>)
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	221c      	movs	r2, #28
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2201      	movs	r2, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <HAL_DMA_Abort_IT+0xf0>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ecc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee0:	490f      	ldr	r1, [pc, #60]	@ (8001f20 <HAL_DMA_Abort_IT+0xec>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001eee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2225      	movs	r2, #37	@ 0x25
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	@ 0x24
 8001efc:	2100      	movs	r1, #0
 8001efe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	0010      	movs	r0, r2
 8001f10:	4798      	blx	r3
    }
  }
  return status;
 8001f12:	230f      	movs	r3, #15
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	781b      	ldrb	r3, [r3, #0]
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	fffffeff 	.word	0xfffffeff
 8001f24:	40020000 	.word	0x40020000

08001f28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001f30:	4b55      	ldr	r3, [pc, #340]	@ (8002088 <HAL_DMA_IRQHandler+0x160>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	221c      	movs	r2, #28
 8001f44:	4013      	ands	r3, r2
 8001f46:	2204      	movs	r2, #4
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	0013      	movs	r3, r2
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d027      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x7a>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2204      	movs	r2, #4
 8001f56:	4013      	ands	r3, r2
 8001f58:	d023      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2220      	movs	r2, #32
 8001f62:	4013      	ands	r3, r2
 8001f64:	d107      	bne.n	8001f76 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2104      	movs	r1, #4
 8001f72:	438a      	bics	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001f76:	4b44      	ldr	r3, [pc, #272]	@ (8002088 <HAL_DMA_IRQHandler+0x160>)
 8001f78:	6859      	ldr	r1, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	221c      	movs	r2, #28
 8001f80:	4013      	ands	r3, r2
 8001f82:	2204      	movs	r2, #4
 8001f84:	409a      	lsls	r2, r3
 8001f86:	4b40      	ldr	r3, [pc, #256]	@ (8002088 <HAL_DMA_IRQHandler+0x160>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d100      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x6e>
 8001f94:	e073      	b.n	800207e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001fa0:	e06d      	b.n	800207e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	221c      	movs	r2, #28
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2202      	movs	r2, #2
 8001fac:	409a      	lsls	r2, r3
 8001fae:	0013      	movs	r3, r2
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d02e      	beq.n	8002014 <HAL_DMA_IRQHandler+0xec>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d02a      	beq.n	8002014 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	438a      	bics	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2225      	movs	r2, #37	@ 0x25
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001fe2:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <HAL_DMA_IRQHandler+0x160>)
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	221c      	movs	r2, #28
 8001fec:	4013      	ands	r3, r2
 8001fee:	2202      	movs	r2, #2
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <HAL_DMA_IRQHandler+0x160>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2224      	movs	r2, #36	@ 0x24
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d03a      	beq.n	800207e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	0010      	movs	r0, r2
 8002010:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002012:	e034      	b.n	800207e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	221c      	movs	r2, #28
 800201a:	4013      	ands	r3, r2
 800201c:	2208      	movs	r2, #8
 800201e:	409a      	lsls	r2, r3
 8002020:	0013      	movs	r3, r2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	d02b      	beq.n	8002080 <HAL_DMA_IRQHandler+0x158>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2208      	movs	r2, #8
 800202c:	4013      	ands	r3, r2
 800202e:	d027      	beq.n	8002080 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	210e      	movs	r1, #14
 800203c:	438a      	bics	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <HAL_DMA_IRQHandler+0x160>)
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	221c      	movs	r2, #28
 800204a:	4013      	ands	r3, r2
 800204c:	2201      	movs	r2, #1
 800204e:	409a      	lsls	r2, r3
 8002050:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <HAL_DMA_IRQHandler+0x160>)
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2225      	movs	r2, #37	@ 0x25
 8002060:	2101      	movs	r1, #1
 8002062:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2224      	movs	r2, #36	@ 0x24
 8002068:	2100      	movs	r1, #0
 800206a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	0010      	movs	r0, r2
 800207c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46c0      	nop			@ (mov r8, r8)
}
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40020000 	.word	0x40020000

0800208c <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}

080020a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80020c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80020ca:	4b14      	ldr	r3, [pc, #80]	@ (800211c <DMA_SetConfig+0x7c>)
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	221c      	movs	r2, #28
 80020d4:	4013      	ands	r3, r2
 80020d6:	2201      	movs	r2, #1
 80020d8:	409a      	lsls	r2, r3
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <DMA_SetConfig+0x7c>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d108      	bne.n	8002102 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002100:	e007      	b.n	8002112 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	60da      	str	r2, [r3, #12]
}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	40020000 	.word	0x40020000

08002120 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	001a      	movs	r2, r3
 800212e:	23ff      	movs	r3, #255	@ 0xff
 8002130:	4013      	ands	r3, r2
 8002132:	3b08      	subs	r3, #8
 8002134:	2114      	movs	r1, #20
 8002136:	0018      	movs	r0, r3
 8002138:	f7fd ffe6 	bl	8000108 <__udivsi3>
 800213c:	0003      	movs	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002148:	4694      	mov	ip, r2
 800214a:	4463      	add	r3, ip
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	001a      	movs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002158:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	221c      	movs	r2, #28
 800215e:	4013      	ands	r3, r2
 8002160:	2201      	movs	r2, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	b004      	add	sp, #16
 800216e:	bd80      	pop	{r7, pc}
 8002170:	10008200 	.word	0x10008200
 8002174:	40020880 	.word	0x40020880

08002178 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	22ff      	movs	r2, #255	@ 0xff
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800218e:	4694      	mov	ip, r2
 8002190:	4463      	add	r3, ip
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	001a      	movs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	4013      	ands	r3, r2
 80021a8:	2201      	movs	r2, #1
 80021aa:	409a      	lsls	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	1000823f 	.word	0x1000823f
 80021bc:	40020940 	.word	0x40020940

080021c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021ce:	e153      	b.n	8002478 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4091      	lsls	r1, r2
 80021da:	000a      	movs	r2, r1
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d100      	bne.n	80021e8 <HAL_GPIO_Init+0x28>
 80021e6:	e144      	b.n	8002472 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x38>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b12      	cmp	r3, #18
 80021f6:	d125      	bne.n	8002244 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	08da      	lsrs	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3208      	adds	r2, #8
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	58d3      	ldr	r3, [r2, r3]
 8002204:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2207      	movs	r2, #7
 800220a:	4013      	ands	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	409a      	lsls	r2, r3
 8002212:	0013      	movs	r3, r2
 8002214:	43da      	mvns	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	220f      	movs	r2, #15
 8002222:	401a      	ands	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2107      	movs	r1, #7
 8002228:	400b      	ands	r3, r1
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	409a      	lsls	r2, r3
 800222e:	0013      	movs	r3, r2
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3208      	adds	r2, #8
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	6979      	ldr	r1, [r7, #20]
 8002242:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	409a      	lsls	r2, r3
 8002252:	0013      	movs	r3, r2
 8002254:	43da      	mvns	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2203      	movs	r2, #3
 8002262:	401a      	ands	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	409a      	lsls	r2, r3
 800226a:	0013      	movs	r3, r2
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	4313      	orrs	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d00b      	beq.n	8002298 <HAL_GPIO_Init+0xd8>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d007      	beq.n	8002298 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800228c:	2b11      	cmp	r3, #17
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b12      	cmp	r3, #18
 8002296:	d130      	bne.n	80022fa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	409a      	lsls	r2, r3
 80022a6:	0013      	movs	r3, r2
 80022a8:	43da      	mvns	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	409a      	lsls	r2, r3
 80022ba:	0013      	movs	r3, r2
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ce:	2201      	movs	r2, #1
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	409a      	lsls	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	43da      	mvns	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4013      	ands	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	2201      	movs	r2, #1
 80022e6:	401a      	ands	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	409a      	lsls	r2, r3
 80022ec:	0013      	movs	r3, r2
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d017      	beq.n	8002332 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	409a      	lsls	r2, r3
 8002310:	0013      	movs	r3, r2
 8002312:	43da      	mvns	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4013      	ands	r3, r2
 8002318:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	409a      	lsls	r2, r3
 8002324:	0013      	movs	r3, r2
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	2380      	movs	r3, #128	@ 0x80
 8002338:	055b      	lsls	r3, r3, #21
 800233a:	4013      	ands	r3, r2
 800233c:	d100      	bne.n	8002340 <HAL_GPIO_Init+0x180>
 800233e:	e098      	b.n	8002472 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002340:	4a53      	ldr	r2, [pc, #332]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3318      	adds	r3, #24
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	589b      	ldr	r3, [r3, r2]
 800234c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2203      	movs	r2, #3
 8002352:	4013      	ands	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	220f      	movs	r2, #15
 8002358:	409a      	lsls	r2, r3
 800235a:	0013      	movs	r3, r2
 800235c:	43da      	mvns	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	4013      	ands	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	23a0      	movs	r3, #160	@ 0xa0
 8002368:	05db      	lsls	r3, r3, #23
 800236a:	429a      	cmp	r2, r3
 800236c:	d019      	beq.n	80023a2 <HAL_GPIO_Init+0x1e2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a48      	ldr	r2, [pc, #288]	@ (8002494 <HAL_GPIO_Init+0x2d4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0x1de>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a47      	ldr	r2, [pc, #284]	@ (8002498 <HAL_GPIO_Init+0x2d8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00d      	beq.n	800239a <HAL_GPIO_Init+0x1da>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a46      	ldr	r2, [pc, #280]	@ (800249c <HAL_GPIO_Init+0x2dc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <HAL_GPIO_Init+0x1d6>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a45      	ldr	r2, [pc, #276]	@ (80024a0 <HAL_GPIO_Init+0x2e0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_GPIO_Init+0x1d2>
 800238e:	2305      	movs	r3, #5
 8002390:	e008      	b.n	80023a4 <HAL_GPIO_Init+0x1e4>
 8002392:	2306      	movs	r3, #6
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x1e4>
 8002396:	2303      	movs	r3, #3
 8002398:	e004      	b.n	80023a4 <HAL_GPIO_Init+0x1e4>
 800239a:	2302      	movs	r3, #2
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_Init+0x1e4>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_GPIO_Init+0x1e4>
 80023a2:	2300      	movs	r3, #0
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	2103      	movs	r1, #3
 80023a8:	400a      	ands	r2, r1
 80023aa:	00d2      	lsls	r2, r2, #3
 80023ac:	4093      	lsls	r3, r2
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80023b4:	4936      	ldr	r1, [pc, #216]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3318      	adds	r3, #24
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80023c2:	4a33      	ldr	r2, [pc, #204]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	58d3      	ldr	r3, [r2, r3]
 80023c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43da      	mvns	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	025b      	lsls	r3, r3, #9
 80023dc:	4013      	ands	r3, r2
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80023e8:	4929      	ldr	r1, [pc, #164]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 80023ea:	2280      	movs	r2, #128	@ 0x80
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80023f0:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 80023f2:	2384      	movs	r3, #132	@ 0x84
 80023f4:	58d3      	ldr	r3, [r2, r3]
 80023f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43da      	mvns	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4013      	ands	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	029b      	lsls	r3, r3, #10
 800240a:	4013      	ands	r3, r2
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002416:	491e      	ldr	r1, [pc, #120]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002418:	2284      	movs	r2, #132	@ 0x84
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800241e:	4b1c      	ldr	r3, [pc, #112]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43da      	mvns	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4013      	ands	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	035b      	lsls	r3, r3, #13
 8002436:	4013      	ands	r3, r2
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	43da      	mvns	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	4013      	ands	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	039b      	lsls	r3, r3, #14
 8002460:	4013      	ands	r3, r2
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	3301      	adds	r3, #1
 8002476:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	40da      	lsrs	r2, r3
 8002480:	1e13      	subs	r3, r2, #0
 8002482:	d000      	beq.n	8002486 <HAL_GPIO_Init+0x2c6>
 8002484:	e6a4      	b.n	80021d0 <HAL_GPIO_Init+0x10>
  }
}
 8002486:	46c0      	nop			@ (mov r8, r8)
 8002488:	46c0      	nop			@ (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b006      	add	sp, #24
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021800 	.word	0x40021800
 8002494:	50000400 	.word	0x50000400
 8002498:	50000800 	.word	0x50000800
 800249c:	50000c00 	.word	0x50000c00
 80024a0:	50001400 	.word	0x50001400

080024a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80024b2:	e0ba      	b.n	800262a <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80024b4:	2201      	movs	r2, #1
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	409a      	lsls	r2, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d100      	bne.n	80024c8 <HAL_GPIO_DeInit+0x24>
 80024c6:	e0ad      	b.n	8002624 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 80024c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3318      	adds	r3, #24
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	589b      	ldr	r3, [r3, r2]
 80024d4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2203      	movs	r2, #3
 80024da:	4013      	ands	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	220f      	movs	r2, #15
 80024e0:	409a      	lsls	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	23a0      	movs	r3, #160	@ 0xa0
 80024ec:	05db      	lsls	r3, r3, #23
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_DeInit+0x82>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a53      	ldr	r2, [pc, #332]	@ (8002644 <HAL_GPIO_DeInit+0x1a0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_DeInit+0x7e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a52      	ldr	r2, [pc, #328]	@ (8002648 <HAL_GPIO_DeInit+0x1a4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_DeInit+0x7a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a51      	ldr	r2, [pc, #324]	@ (800264c <HAL_GPIO_DeInit+0x1a8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_DeInit+0x76>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a50      	ldr	r2, [pc, #320]	@ (8002650 <HAL_GPIO_DeInit+0x1ac>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_DeInit+0x72>
 8002512:	2305      	movs	r3, #5
 8002514:	e008      	b.n	8002528 <HAL_GPIO_DeInit+0x84>
 8002516:	2306      	movs	r3, #6
 8002518:	e006      	b.n	8002528 <HAL_GPIO_DeInit+0x84>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_DeInit+0x84>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_DeInit+0x84>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_DeInit+0x84>
 8002526:	2300      	movs	r3, #0
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	2103      	movs	r1, #3
 800252c:	400a      	ands	r2, r1
 800252e:	00d2      	lsls	r2, r2, #3
 8002530:	4093      	lsls	r3, r2
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	429a      	cmp	r2, r3
 8002536:	d136      	bne.n	80025a6 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002538:	4a41      	ldr	r2, [pc, #260]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	58d3      	ldr	r3, [r2, r3]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	43d2      	mvns	r2, r2
 8002542:	493f      	ldr	r1, [pc, #252]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 8002544:	4013      	ands	r3, r2
 8002546:	2280      	movs	r2, #128	@ 0x80
 8002548:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800254a:	4a3d      	ldr	r2, [pc, #244]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 800254c:	2384      	movs	r3, #132	@ 0x84
 800254e:	58d3      	ldr	r3, [r2, r3]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	43d2      	mvns	r2, r2
 8002554:	493a      	ldr	r1, [pc, #232]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 8002556:	4013      	ands	r3, r2
 8002558:	2284      	movs	r2, #132	@ 0x84
 800255a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800255c:	4b38      	ldr	r3, [pc, #224]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43d9      	mvns	r1, r3
 8002564:	4b36      	ldr	r3, [pc, #216]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 8002566:	400a      	ands	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800256a:	4b35      	ldr	r3, [pc, #212]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43d9      	mvns	r1, r3
 8002572:	4b33      	ldr	r3, [pc, #204]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 8002574:	400a      	ands	r2, r1
 8002576:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2203      	movs	r2, #3
 800257c:	4013      	ands	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	220f      	movs	r2, #15
 8002582:	409a      	lsls	r2, r3
 8002584:	0013      	movs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002588:	4a2d      	ldr	r2, [pc, #180]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3318      	adds	r3, #24
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	589a      	ldr	r2, [r3, r2]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43d9      	mvns	r1, r3
 8002598:	4829      	ldr	r0, [pc, #164]	@ (8002640 <HAL_GPIO_DeInit+0x19c>)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	400a      	ands	r2, r1
 80025a0:	3318      	adds	r3, #24
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2103      	movs	r1, #3
 80025b0:	4099      	lsls	r1, r3
 80025b2:	000b      	movs	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	58d3      	ldr	r3, [r2, r3]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	2107      	movs	r1, #7
 80025ca:	400a      	ands	r2, r1
 80025cc:	0092      	lsls	r2, r2, #2
 80025ce:	210f      	movs	r1, #15
 80025d0:	4091      	lsls	r1, r2
 80025d2:	000a      	movs	r2, r1
 80025d4:	43d1      	mvns	r1, r2
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	08d2      	lsrs	r2, r2, #3
 80025da:	4019      	ands	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	0052      	lsls	r2, r2, #1
 80025ec:	2103      	movs	r1, #3
 80025ee:	4091      	lsls	r1, r2
 80025f0:	000a      	movs	r2, r1
 80025f2:	43d2      	mvns	r2, r2
 80025f4:	401a      	ands	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2101      	movs	r1, #1
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4091      	lsls	r1, r2
 8002604:	000a      	movs	r2, r1
 8002606:	43d2      	mvns	r2, r2
 8002608:	401a      	ands	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	0052      	lsls	r2, r2, #1
 8002616:	2103      	movs	r1, #3
 8002618:	4091      	lsls	r1, r2
 800261a:	000a      	movs	r2, r1
 800261c:	43d2      	mvns	r2, r2
 800261e:	401a      	ands	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	40da      	lsrs	r2, r3
 8002630:	1e13      	subs	r3, r2, #0
 8002632:	d000      	beq.n	8002636 <HAL_GPIO_DeInit+0x192>
 8002634:	e73e      	b.n	80024b4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	46c0      	nop			@ (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b006      	add	sp, #24
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021800 	.word	0x40021800
 8002644:	50000400 	.word	0x50000400
 8002648:	50000800 	.word	0x50000800
 800264c:	50000c00 	.word	0x50000c00
 8002650:	50001400 	.word	0x50001400

08002654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	000a      	movs	r2, r1
 800265e:	1cbb      	adds	r3, r7, #2
 8002660:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	1cba      	adds	r2, r7, #2
 8002668:	8812      	ldrh	r2, [r2, #0]
 800266a:	4013      	ands	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800266e:	230f      	movs	r3, #15
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e003      	b.n	8002680 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002678:	230f      	movs	r3, #15
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002680:	230f      	movs	r3, #15
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	781b      	ldrb	r3, [r3, #0]
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b004      	add	sp, #16
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	0008      	movs	r0, r1
 8002698:	0011      	movs	r1, r2
 800269a:	1cbb      	adds	r3, r7, #2
 800269c:	1c02      	adds	r2, r0, #0
 800269e:	801a      	strh	r2, [r3, #0]
 80026a0:	1c7b      	adds	r3, r7, #1
 80026a2:	1c0a      	adds	r2, r1, #0
 80026a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026a6:	1c7b      	adds	r3, r7, #1
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ae:	1cbb      	adds	r3, r7, #2
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026b6:	e003      	b.n	80026c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026b8:	1cbb      	adds	r3, r7, #2
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026c0:	46c0      	nop			@ (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e20f      	b.n	8002afa <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_OscConfig+0x1e>
 80026e4:	e069      	b.n	80027ba <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e6:	4bc8      	ldr	r3, [pc, #800]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2238      	movs	r2, #56	@ 0x38
 80026ec:	4013      	ands	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d105      	bne.n	8002702 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d15d      	bne.n	80027ba <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1fb      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	025b      	lsls	r3, r3, #9
 800270a:	429a      	cmp	r2, r3
 800270c:	d107      	bne.n	800271e <HAL_RCC_OscConfig+0x56>
 800270e:	4bbe      	ldr	r3, [pc, #760]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4bbd      	ldr	r3, [pc, #756]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002714:	2180      	movs	r1, #128	@ 0x80
 8002716:	0249      	lsls	r1, r1, #9
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e020      	b.n	8002760 <HAL_RCC_OscConfig+0x98>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	23a0      	movs	r3, #160	@ 0xa0
 8002724:	02db      	lsls	r3, r3, #11
 8002726:	429a      	cmp	r2, r3
 8002728:	d10e      	bne.n	8002748 <HAL_RCC_OscConfig+0x80>
 800272a:	4bb7      	ldr	r3, [pc, #732]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4bb6      	ldr	r3, [pc, #728]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002730:	2180      	movs	r1, #128	@ 0x80
 8002732:	02c9      	lsls	r1, r1, #11
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	4bb3      	ldr	r3, [pc, #716]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4bb2      	ldr	r3, [pc, #712]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800273e:	2180      	movs	r1, #128	@ 0x80
 8002740:	0249      	lsls	r1, r1, #9
 8002742:	430a      	orrs	r2, r1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002748:	4baf      	ldr	r3, [pc, #700]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4bae      	ldr	r3, [pc, #696]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800274e:	49af      	ldr	r1, [pc, #700]	@ (8002a0c <HAL_RCC_OscConfig+0x344>)
 8002750:	400a      	ands	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	4bac      	ldr	r3, [pc, #688]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4bab      	ldr	r3, [pc, #684]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800275a:	49ad      	ldr	r1, [pc, #692]	@ (8002a10 <HAL_RCC_OscConfig+0x348>)
 800275c:	400a      	ands	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d014      	beq.n	8002792 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff f83a 	bl	80017e0 <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002772:	f7ff f835 	bl	80017e0 <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b64      	cmp	r3, #100	@ 0x64
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e1ba      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002784:	4ba0      	ldr	r3, [pc, #640]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	@ 0x80
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	4013      	ands	r3, r2
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0xaa>
 8002790:	e013      	b.n	80027ba <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7ff f825 	bl	80017e0 <HAL_GetTick>
 8002796:	0003      	movs	r3, r0
 8002798:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800279c:	f7ff f820 	bl	80017e0 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1a5      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ae:	4b96      	ldr	r3, [pc, #600]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	029b      	lsls	r3, r3, #10
 80027b6:	4013      	ands	r3, r2
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2202      	movs	r2, #2
 80027c0:	4013      	ands	r3, r2
 80027c2:	d100      	bne.n	80027c6 <HAL_RCC_OscConfig+0xfe>
 80027c4:	e086      	b.n	80028d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c6:	4b90      	ldr	r3, [pc, #576]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2238      	movs	r2, #56	@ 0x38
 80027cc:	4013      	ands	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d12f      	bne.n	8002836 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e18b      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4b89      	ldr	r3, [pc, #548]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a8b      	ldr	r2, [pc, #556]	@ (8002a14 <HAL_RCC_OscConfig+0x34c>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	021a      	lsls	r2, r3, #8
 80027f2:	4b85      	ldr	r3, [pc, #532]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d112      	bne.n	8002824 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027fe:	4b82      	ldr	r3, [pc, #520]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a85      	ldr	r2, [pc, #532]	@ (8002a18 <HAL_RCC_OscConfig+0x350>)
 8002804:	4013      	ands	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002812:	4b7d      	ldr	r3, [pc, #500]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0adb      	lsrs	r3, r3, #11
 8002818:	2207      	movs	r2, #7
 800281a:	4013      	ands	r3, r2
 800281c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a1c <HAL_RCC_OscConfig+0x354>)
 800281e:	40da      	lsrs	r2, r3
 8002820:	4b7f      	ldr	r3, [pc, #508]	@ (8002a20 <HAL_RCC_OscConfig+0x358>)
 8002822:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002824:	4b7f      	ldr	r3, [pc, #508]	@ (8002a24 <HAL_RCC_OscConfig+0x35c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0018      	movs	r0, r3
 800282a:	f7fe ff7d 	bl	8001728 <HAL_InitTick>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d050      	beq.n	80028d4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e161      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d030      	beq.n	80028a0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800283e:	4b72      	ldr	r3, [pc, #456]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a75      	ldr	r2, [pc, #468]	@ (8002a18 <HAL_RCC_OscConfig+0x350>)
 8002844:	4013      	ands	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	4b6e      	ldr	r3, [pc, #440]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002852:	4b6d      	ldr	r3, [pc, #436]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b6c      	ldr	r3, [pc, #432]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002858:	2180      	movs	r1, #128	@ 0x80
 800285a:	0049      	lsls	r1, r1, #1
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe ffbe 	bl	80017e0 <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800286a:	f7fe ffb9 	bl	80017e0 <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e13e      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	4b62      	ldr	r3, [pc, #392]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4013      	ands	r3, r2
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	4b5f      	ldr	r3, [pc, #380]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a61      	ldr	r2, [pc, #388]	@ (8002a14 <HAL_RCC_OscConfig+0x34c>)
 800288e:	4013      	ands	r3, r2
 8002890:	0019      	movs	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	021a      	lsls	r2, r3, #8
 8002898:	4b5b      	ldr	r3, [pc, #364]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e019      	b.n	80028d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80028a0:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b58      	ldr	r3, [pc, #352]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80028a6:	4960      	ldr	r1, [pc, #384]	@ (8002a28 <HAL_RCC_OscConfig+0x360>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe ff98 	bl	80017e0 <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80028b6:	f7fe ff93 	bl	80017e0 <HAL_GetTick>
 80028ba:	0002      	movs	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e118      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4013      	ands	r3, r2
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	4013      	ands	r3, r2
 80028dc:	d042      	beq.n	8002964 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80028de:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2238      	movs	r2, #56	@ 0x38
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b18      	cmp	r3, #24
 80028e8:	d105      	bne.n	80028f6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d138      	bne.n	8002964 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e101      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d019      	beq.n	8002932 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028fe:	4b42      	ldr	r3, [pc, #264]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002900:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002902:	4b41      	ldr	r3, [pc, #260]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002904:	2101      	movs	r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7fe ff69 	bl	80017e0 <HAL_GetTick>
 800290e:	0003      	movs	r3, r0
 8002910:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002914:	f7fe ff64 	bl	80017e0 <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0e9      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002926:	4b38      	ldr	r3, [pc, #224]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d0f1      	beq.n	8002914 <HAL_RCC_OscConfig+0x24c>
 8002930:	e018      	b.n	8002964 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002932:	4b35      	ldr	r3, [pc, #212]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002934:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002936:	4b34      	ldr	r3, [pc, #208]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 8002938:	2101      	movs	r1, #1
 800293a:	438a      	bics	r2, r1
 800293c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe ff4f 	bl	80017e0 <HAL_GetTick>
 8002942:	0003      	movs	r3, r0
 8002944:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002948:	f7fe ff4a 	bl	80017e0 <HAL_GetTick>
 800294c:	0002      	movs	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0cf      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800295a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800295c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295e:	2202      	movs	r2, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d1f1      	bne.n	8002948 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2204      	movs	r2, #4
 800296a:	4013      	ands	r3, r2
 800296c:	d100      	bne.n	8002970 <HAL_RCC_OscConfig+0x2a8>
 800296e:	e084      	b.n	8002a7a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002970:	230f      	movs	r3, #15
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002978:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2238      	movs	r2, #56	@ 0x38
 800297e:	4013      	ands	r3, r2
 8002980:	2b20      	cmp	r3, #32
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d000      	beq.n	800298e <HAL_RCC_OscConfig+0x2c6>
 800298c:	e075      	b.n	8002a7a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e0b3      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2e0>
 800299a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 800299c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800299e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029a6:	e01c      	b.n	80029e2 <HAL_RCC_OscConfig+0x31a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d10c      	bne.n	80029ca <HAL_RCC_OscConfig+0x302>
 80029b0:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80029b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029b4:	4b14      	ldr	r3, [pc, #80]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80029b6:	2104      	movs	r1, #4
 80029b8:	430a      	orrs	r2, r1
 80029ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80029be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029c8:	e00b      	b.n	80029e2 <HAL_RCC_OscConfig+0x31a>
 80029ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80029cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80029d0:	2101      	movs	r1, #1
 80029d2:	438a      	bics	r2, r1
 80029d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80029d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029da:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_OscConfig+0x340>)
 80029dc:	2104      	movs	r1, #4
 80029de:	438a      	bics	r2, r1
 80029e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d028      	beq.n	8002a3c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe fef9 	bl	80017e0 <HAL_GetTick>
 80029ee:	0003      	movs	r3, r0
 80029f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80029f2:	e01d      	b.n	8002a30 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7fe fef4 	bl	80017e0 <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <HAL_RCC_OscConfig+0x364>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d915      	bls.n	8002a30 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e078      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	fffeffff 	.word	0xfffeffff
 8002a10:	fffbffff 	.word	0xfffbffff
 8002a14:	ffff80ff 	.word	0xffff80ff
 8002a18:	ffffc7ff 	.word	0xffffc7ff
 8002a1c:	02dc6c00 	.word	0x02dc6c00
 8002a20:	20000018 	.word	0x20000018
 8002a24:	2000001c 	.word	0x2000001c
 8002a28:	fffffeff 	.word	0xfffffeff
 8002a2c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002a30:	4b34      	ldr	r3, [pc, #208]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	2202      	movs	r2, #2
 8002a36:	4013      	ands	r3, r2
 8002a38:	d0dc      	beq.n	80029f4 <HAL_RCC_OscConfig+0x32c>
 8002a3a:	e013      	b.n	8002a64 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fed0 	bl	80017e0 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002a44:	e009      	b.n	8002a5a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fecb 	bl	80017e0 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	4a2d      	ldr	r2, [pc, #180]	@ (8002b08 <HAL_RCC_OscConfig+0x440>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e04f      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a64:	230f      	movs	r3, #15
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d105      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a6e:	4b25      	ldr	r3, [pc, #148]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002a74:	4925      	ldr	r1, [pc, #148]	@ (8002b0c <HAL_RCC_OscConfig+0x444>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2210      	movs	r2, #16
 8002a80:	4013      	ands	r3, r2
 8002a82:	d039      	beq.n	8002af8 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002a92:	2180      	movs	r1, #128	@ 0x80
 8002a94:	03c9      	lsls	r1, r1, #15
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fea1 	bl	80017e0 <HAL_GetTick>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa4:	f7fe fe9c 	bl	80017e0 <HAL_GetTick>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e021      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8002ab6:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x3dc>
 8002ac2:	e019      	b.n	8002af8 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002aca:	4911      	ldr	r1, [pc, #68]	@ (8002b10 <HAL_RCC_OscConfig+0x448>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe fe86 	bl	80017e0 <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ada:	f7fe fe81 	bl	80017e0 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e006      	b.n	8002afa <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <HAL_RCC_OscConfig+0x43c>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	4013      	ands	r3, r2
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	0018      	movs	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b006      	add	sp, #24
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	40021000 	.word	0x40021000
 8002b08:	00001388 	.word	0x00001388
 8002b0c:	efffffff 	.word	0xefffffff
 8002b10:	ffbfffff 	.word	0xffbfffff

08002b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0f6      	b.n	8002d16 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b7d      	ldr	r3, [pc, #500]	@ (8002d20 <HAL_RCC_ClockConfig+0x20c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2207      	movs	r2, #7
 8002b2e:	4013      	ands	r3, r2
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d91e      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b7a      	ldr	r3, [pc, #488]	@ (8002d20 <HAL_RCC_ClockConfig+0x20c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2207      	movs	r2, #7
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	4b77      	ldr	r3, [pc, #476]	@ (8002d20 <HAL_RCC_ClockConfig+0x20c>)
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b48:	f7fe fe4a 	bl	80017e0 <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b50:	e009      	b.n	8002b66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b52:	f7fe fe45 	bl	80017e0 <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	4a71      	ldr	r2, [pc, #452]	@ (8002d24 <HAL_RCC_ClockConfig+0x210>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0d7      	b.n	8002d16 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b66:	4b6e      	ldr	r3, [pc, #440]	@ (8002d20 <HAL_RCC_ClockConfig+0x20c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1ee      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d017      	beq.n	8002bae <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2204      	movs	r2, #4
 8002b84:	4013      	ands	r3, r2
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b88:	4b67      	ldr	r3, [pc, #412]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a67      	ldr	r2, [pc, #412]	@ (8002d2c <HAL_RCC_ClockConfig+0x218>)
 8002b8e:	401a      	ands	r2, r3
 8002b90:	4b65      	ldr	r3, [pc, #404]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002b92:	21b0      	movs	r1, #176	@ 0xb0
 8002b94:	0109      	lsls	r1, r1, #4
 8002b96:	430a      	orrs	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9a:	4b63      	ldr	r3, [pc, #396]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	4a64      	ldr	r2, [pc, #400]	@ (8002d30 <HAL_RCC_ClockConfig+0x21c>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d100      	bne.n	8002bba <HAL_RCC_ClockConfig+0xa6>
 8002bb8:	e061      	b.n	8002c7e <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002bba:	4b5b      	ldr	r3, [pc, #364]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	221c      	movs	r2, #28
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	4b57      	ldr	r3, [pc, #348]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd6:	4b54      	ldr	r3, [pc, #336]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	4013      	ands	r3, r2
 8002be0:	d12b      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e097      	b.n	8002d16 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bee:	4b4e      	ldr	r3, [pc, #312]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d11f      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e08b      	b.n	8002d16 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8002c06:	4b48      	ldr	r3, [pc, #288]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	2380      	movs	r3, #128	@ 0x80
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d113      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002c1e:	4b42      	ldr	r3, [pc, #264]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d108      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e074      	b.n	8002d16 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c30:	2202      	movs	r2, #2
 8002c32:	4013      	ands	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06d      	b.n	8002d16 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2207      	movs	r2, #7
 8002c40:	4393      	bics	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4b37      	ldr	r3, [pc, #220]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c4e:	f7fe fdc7 	bl	80017e0 <HAL_GetTick>
 8002c52:	0003      	movs	r3, r0
 8002c54:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e009      	b.n	8002c6c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe fdc2 	bl	80017e0 <HAL_GetTick>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	4a30      	ldr	r2, [pc, #192]	@ (8002d24 <HAL_RCC_ClockConfig+0x210>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e054      	b.n	8002d16 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2238      	movs	r2, #56	@ 0x38
 8002c72:	401a      	ands	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d1ec      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7e:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <HAL_RCC_ClockConfig+0x20c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2207      	movs	r2, #7
 8002c84:	4013      	ands	r3, r2
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d21e      	bcs.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8c:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_RCC_ClockConfig+0x20c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2207      	movs	r2, #7
 8002c92:	4393      	bics	r3, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	4b22      	ldr	r3, [pc, #136]	@ (8002d20 <HAL_RCC_ClockConfig+0x20c>)
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c9e:	f7fe fd9f 	bl	80017e0 <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ca6:	e009      	b.n	8002cbc <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca8:	f7fe fd9a 	bl	80017e0 <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d24 <HAL_RCC_ClockConfig+0x210>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e02c      	b.n	8002d16 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cbc:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <HAL_RCC_ClockConfig+0x20c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d1ee      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2204      	movs	r2, #4
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd4:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4a16      	ldr	r2, [pc, #88]	@ (8002d34 <HAL_RCC_ClockConfig+0x220>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002ce8:	f000 f82c 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002cec:	0001      	movs	r1, r0
 8002cee:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <HAL_RCC_ClockConfig+0x214>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <HAL_RCC_ClockConfig+0x224>)
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002cfe:	221f      	movs	r2, #31
 8002d00:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002d02:	000a      	movs	r2, r1
 8002d04:	40da      	lsrs	r2, r3
 8002d06:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <HAL_RCC_ClockConfig+0x228>)
 8002d08:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <HAL_RCC_ClockConfig+0x22c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7fe fd0a 	bl	8001728 <HAL_InitTick>
 8002d14:	0003      	movs	r3, r0
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	40022000 	.word	0x40022000
 8002d24:	00001388 	.word	0x00001388
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	ffff84ff 	.word	0xffff84ff
 8002d30:	fffff0ff 	.word	0xfffff0ff
 8002d34:	ffff8fff 	.word	0xffff8fff
 8002d38:	08005250 	.word	0x08005250
 8002d3c:	20000018 	.word	0x20000018
 8002d40:	2000001c 	.word	0x2000001c

08002d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002d4a:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	2207      	movs	r2, #7
 8002d52:	4013      	ands	r3, r2
 8002d54:	3301      	adds	r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d58:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2238      	movs	r2, #56	@ 0x38
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d10f      	bne.n	8002d82 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d62:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	0adb      	lsrs	r3, r3, #11
 8002d68:	2207      	movs	r2, #7
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	0013      	movs	r3, r2
 8002d72:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	481d      	ldr	r0, [pc, #116]	@ (8002dec <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d78:	f7fd f9c6 	bl	8000108 <__udivsi3>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e027      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d82:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2238      	movs	r2, #56	@ 0x38
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d102      	bne.n	8002d94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d8e:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e01e      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2238      	movs	r2, #56	@ 0x38
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d103      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002da8:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2238      	movs	r2, #56	@ 0x38
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b18      	cmp	r3, #24
 8002db2:	d103      	bne.n	8002dbc <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002db4:	23fa      	movs	r3, #250	@ 0xfa
 8002db6:	01db      	lsls	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2238      	movs	r2, #56	@ 0x38
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d102      	bne.n	8002dce <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <HAL_RCC_GetSysClockFreq+0xa8>)
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e001      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7fd f997 	bl	8000108 <__udivsi3>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	02dc6c00 	.word	0x02dc6c00
 8002df0:	007a1200 	.word	0x007a1200

08002df4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002df8:	f7ff ffa4 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002dfc:	0001      	movs	r1, r0
 8002dfe:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <HAL_RCC_GetHCLKFreq+0x30>)
 8002e00:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	220f      	movs	r2, #15
 8002e06:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e08:	4b07      	ldr	r3, [pc, #28]	@ (8002e28 <HAL_RCC_GetHCLKFreq+0x34>)
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e0e:	221f      	movs	r2, #31
 8002e10:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e12:	000a      	movs	r2, r1
 8002e14:	40da      	lsrs	r2, r3
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_RCC_GetHCLKFreq+0x38>)
 8002e18:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002e1a:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <HAL_RCC_GetHCLKFreq+0x38>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08005250 	.word	0x08005250
 8002e2c:	20000018 	.word	0x20000018

08002e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002e34:	f7ff ffde 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e38:	0001      	movs	r1, r0
 8002e3a:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	0b1b      	lsrs	r3, r3, #12
 8002e40:	2207      	movs	r2, #7
 8002e42:	401a      	ands	r2, r3
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	58d3      	ldr	r3, [r2, r3]
 8002e4a:	221f      	movs	r2, #31
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	40d9      	lsrs	r1, r3
 8002e50:	000b      	movs	r3, r1
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08005290 	.word	0x08005290

08002e60 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e68:	2313      	movs	r3, #19
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e70:	2312      	movs	r3, #18
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2240      	movs	r2, #64	@ 0x40
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d100      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002e82:	e079      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e84:	2011      	movs	r0, #17
 8002e86:	183b      	adds	r3, r7, r0
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	055b      	lsls	r3, r3, #21
 8002e94:	4013      	ands	r3, r2
 8002e96:	d110      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e98:	4b67      	ldr	r3, [pc, #412]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e9c:	4b66      	ldr	r3, [pc, #408]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	0549      	lsls	r1, r1, #21
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ea6:	4b64      	ldr	r3, [pc, #400]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	055b      	lsls	r3, r3, #21
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb4:	183b      	adds	r3, r7, r0
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002eba:	4b5f      	ldr	r3, [pc, #380]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ebc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ebe:	23c0      	movs	r3, #192	@ 0xc0
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d019      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d014      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002ed6:	4b58      	ldr	r3, [pc, #352]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	4a58      	ldr	r2, [pc, #352]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee0:	4b55      	ldr	r3, [pc, #340]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ee2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ee4:	4b54      	ldr	r3, [pc, #336]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ee6:	2180      	movs	r1, #128	@ 0x80
 8002ee8:	0249      	lsls	r1, r1, #9
 8002eea:	430a      	orrs	r2, r1
 8002eec:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eee:	4b52      	ldr	r3, [pc, #328]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ef0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ef2:	4b51      	ldr	r3, [pc, #324]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ef4:	4952      	ldr	r1, [pc, #328]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002efa:	4b4f      	ldr	r3, [pc, #316]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	d016      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe fc6a 	bl	80017e0 <HAL_GetTick>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f10:	e00c      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe fc65 	bl	80017e0 <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	4a49      	ldr	r2, [pc, #292]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d904      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002f22:	2313      	movs	r3, #19
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	2203      	movs	r2, #3
 8002f28:	701a      	strb	r2, [r3, #0]
          break;
 8002f2a:	e004      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f2c:	4b42      	ldr	r3, [pc, #264]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	2202      	movs	r2, #2
 8002f32:	4013      	ands	r3, r2
 8002f34:	d0ed      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002f36:	2313      	movs	r3, #19
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f40:	4b3d      	ldr	r3, [pc, #244]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f44:	4a3d      	ldr	r2, [pc, #244]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f50:	430a      	orrs	r2, r1
 8002f52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f54:	e005      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f56:	2312      	movs	r3, #18
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	2213      	movs	r2, #19
 8002f5c:	18ba      	adds	r2, r7, r2
 8002f5e:	7812      	ldrb	r2, [r2, #0]
 8002f60:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f62:	2311      	movs	r3, #17
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b32      	ldr	r3, [pc, #200]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f70:	4b31      	ldr	r3, [pc, #196]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f72:	4935      	ldr	r1, [pc, #212]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002f74:	400a      	ands	r2, r1
 8002f76:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f82:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	2203      	movs	r2, #3
 8002f88:	4393      	bics	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	4b29      	ldr	r3, [pc, #164]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f92:	430a      	orrs	r2, r1
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d009      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa0:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa4:	4a29      	ldr	r2, [pc, #164]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d008      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	0899      	lsrs	r1, r3, #2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fda:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fde:	4a1c      	ldr	r2, [pc, #112]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fea:	430a      	orrs	r2, r1
 8002fec:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffc:	4a15      	ldr	r2, [pc, #84]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	0019      	movs	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003008:	430a      	orrs	r2, r1
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2280      	movs	r2, #128	@ 0x80
 8003012:	4013      	ands	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003016:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	22e0      	movs	r2, #224	@ 0xe0
 800301c:	4393      	bics	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
  }
  return status;
 800302a:	2312      	movs	r3, #18
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	781b      	ldrb	r3, [r3, #0]
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b006      	add	sp, #24
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	fffffcff 	.word	0xfffffcff
 8003040:	fffeffff 	.word	0xfffeffff
 8003044:	00001388 	.word	0x00001388
 8003048:	efffffff 	.word	0xefffffff
 800304c:	ffffcfff 	.word	0xffffcfff
 8003050:	ffffefff 	.word	0xffffefff
 8003054:	ffff3fff 	.word	0xffff3fff

08003058 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e032      	b.n	80030d0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2288      	movs	r2, #136	@ 0x88
 800306e:	2124      	movs	r1, #36	@ 0x24
 8003070:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	438a      	bics	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	0018      	movs	r0, r3
 800309e:	f7fe fa8b 	bl	80015b8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2290      	movs	r2, #144	@ 0x90
 80030a6:	2100      	movs	r1, #0
 80030a8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2288      	movs	r2, #136	@ 0x88
 80030ae:	2100      	movs	r1, #0
 80030b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	228c      	movs	r2, #140	@ 0x8c
 80030b6:	2100      	movs	r1, #0
 80030b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2284      	movs	r2, #132	@ 0x84
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	@ 0x30
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	1dbb      	adds	r3, r7, #6
 80030e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2288      	movs	r2, #136	@ 0x88
 80030ea:	589b      	ldr	r3, [r3, r2]
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d000      	beq.n	80030f2 <HAL_UART_Transmit_IT+0x1a>
 80030f0:	e08d      	b.n	800320e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_UART_Transmit_IT+0x28>
 80030f8:	1dbb      	adds	r3, r7, #6
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e085      	b.n	8003210 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	2380      	movs	r3, #128	@ 0x80
 800310a:	015b      	lsls	r3, r3, #5
 800310c:	429a      	cmp	r2, r3
 800310e:	d109      	bne.n	8003124 <HAL_UART_Transmit_IT+0x4c>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2201      	movs	r2, #1
 800311c:	4013      	ands	r3, r2
 800311e:	d001      	beq.n	8003124 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e075      	b.n	8003210 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1dba      	adds	r2, r7, #6
 800312e:	2154      	movs	r1, #84	@ 0x54
 8003130:	8812      	ldrh	r2, [r2, #0]
 8003132:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1dba      	adds	r2, r7, #6
 8003138:	2156      	movs	r1, #86	@ 0x56
 800313a:	8812      	ldrh	r2, [r2, #0]
 800313c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2290      	movs	r2, #144	@ 0x90
 8003148:	2100      	movs	r1, #0
 800314a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2288      	movs	r2, #136	@ 0x88
 8003150:	2121      	movs	r1, #33	@ 0x21
 8003152:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003158:	2380      	movs	r3, #128	@ 0x80
 800315a:	059b      	lsls	r3, r3, #22
 800315c:	429a      	cmp	r2, r3
 800315e:	d12a      	bne.n	80031b6 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	015b      	lsls	r3, r3, #5
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_UART_Transmit_IT+0xa4>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a28      	ldr	r2, [pc, #160]	@ (8003218 <HAL_UART_Transmit_IT+0x140>)
 8003178:	679a      	str	r2, [r3, #120]	@ 0x78
 800317a:	e002      	b.n	8003182 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4a27      	ldr	r2, [pc, #156]	@ (800321c <HAL_UART_Transmit_IT+0x144>)
 8003180:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003182:	f3ef 8310 	mrs	r3, PRIMASK
 8003186:	61fb      	str	r3, [r7, #28]
  return(result);
 8003188:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800318a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800318c:	2301      	movs	r3, #1
 800318e:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f383 8810 	msr	PRIMASK, r3
}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2180      	movs	r1, #128	@ 0x80
 80031a4:	0409      	lsls	r1, r1, #16
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	f383 8810 	msr	PRIMASK, r3
}
 80031b4:	e029      	b.n	800320a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	015b      	lsls	r3, r3, #5
 80031be:	429a      	cmp	r2, r3
 80031c0:	d107      	bne.n	80031d2 <HAL_UART_Transmit_IT+0xfa>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a14      	ldr	r2, [pc, #80]	@ (8003220 <HAL_UART_Transmit_IT+0x148>)
 80031ce:	679a      	str	r2, [r3, #120]	@ 0x78
 80031d0:	e002      	b.n	80031d8 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a13      	ldr	r2, [pc, #76]	@ (8003224 <HAL_UART_Transmit_IT+0x14c>)
 80031d6:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031d8:	f3ef 8310 	mrs	r3, PRIMASK
 80031dc:	613b      	str	r3, [r7, #16]
  return(result);
 80031de:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031e2:	2301      	movs	r3, #1
 80031e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f383 8810 	msr	PRIMASK, r3
}
 80031ec:	46c0      	nop			@ (mov r8, r8)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2180      	movs	r1, #128	@ 0x80
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003200:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f383 8810 	msr	PRIMASK, r3
}
 8003208:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b00c      	add	sp, #48	@ 0x30
 8003216:	bd80      	pop	{r7, pc}
 8003218:	08004a19 	.word	0x08004a19
 800321c:	0800492d 	.word	0x0800492d
 8003220:	0800486f 	.word	0x0800486f
 8003224:	080047bb 	.word	0x080047bb

08003228 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b096      	sub	sp, #88	@ 0x58
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003230:	f3ef 8310 	mrs	r3, PRIMASK
 8003234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003238:	657b      	str	r3, [r7, #84]	@ 0x54
 800323a:	2301      	movs	r3, #1
 800323c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	f383 8810 	msr	PRIMASK, r3
}
 8003244:	46c0      	nop			@ (mov r8, r8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4979      	ldr	r1, [pc, #484]	@ (8003438 <HAL_UART_Abort+0x210>)
 8003252:	400a      	ands	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003258:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003262:	f3ef 8310 	mrs	r3, PRIMASK
 8003266:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8003268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800326a:	653b      	str	r3, [r7, #80]	@ 0x50
 800326c:	2301      	movs	r3, #1
 800326e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003272:	f383 8810 	msr	PRIMASK, r3
}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	496e      	ldr	r1, [pc, #440]	@ (800343c <HAL_UART_Abort+0x214>)
 8003284:	400a      	ands	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800328a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d118      	bne.n	80032ce <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800329c:	f3ef 8310 	mrs	r3, PRIMASK
 80032a0:	623b      	str	r3, [r7, #32]
  return(result);
 80032a2:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80032a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032a6:	2301      	movs	r3, #1
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			@ (mov r8, r8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2110      	movs	r1, #16
 80032be:	438a      	bics	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2280      	movs	r2, #128	@ 0x80
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b80      	cmp	r3, #128	@ 0x80
 80032da:	d135      	bne.n	8003348 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032dc:	f3ef 8310 	mrs	r3, PRIMASK
 80032e0:	617b      	str	r3, [r7, #20]
  return(result);
 80032e2:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032e6:	2301      	movs	r3, #1
 80032e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f383 8810 	msr	PRIMASK, r3
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	438a      	bics	r2, r1
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003304:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f383 8810 	msr	PRIMASK, r3
}
 800330c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d018      	beq.n	8003348 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800331a:	2200      	movs	r2, #0
 800331c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003322:	0018      	movs	r0, r3
 8003324:	f7fe fd24 	bl	8001d70 <HAL_DMA_Abort>
 8003328:	1e03      	subs	r3, r0, #0
 800332a:	d00d      	beq.n	8003348 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003330:	0018      	movs	r0, r3
 8003332:	f7fe feab 	bl	800208c <HAL_DMA_GetError>
 8003336:	0003      	movs	r3, r0
 8003338:	2b20      	cmp	r3, #32
 800333a:	d105      	bne.n	8003348 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2290      	movs	r2, #144	@ 0x90
 8003340:	2110      	movs	r1, #16
 8003342:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e072      	b.n	800342e <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2240      	movs	r2, #64	@ 0x40
 8003350:	4013      	ands	r3, r2
 8003352:	2b40      	cmp	r3, #64	@ 0x40
 8003354:	d139      	bne.n	80033ca <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
 800335a:	60bb      	str	r3, [r7, #8]
  return(result);
 800335c:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003360:	2301      	movs	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			@ (mov r8, r8)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2140      	movs	r1, #64	@ 0x40
 8003378:	438a      	bics	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800337e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2280      	movs	r2, #128	@ 0x80
 800338c:	589b      	ldr	r3, [r3, r2]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01b      	beq.n	80033ca <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2280      	movs	r2, #128	@ 0x80
 8003396:	589b      	ldr	r3, [r3, r2]
 8003398:	2200      	movs	r2, #0
 800339a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2280      	movs	r2, #128	@ 0x80
 80033a0:	589b      	ldr	r3, [r3, r2]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7fe fce4 	bl	8001d70 <HAL_DMA_Abort>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d00e      	beq.n	80033ca <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2280      	movs	r2, #128	@ 0x80
 80033b0:	589b      	ldr	r3, [r3, r2]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fe fe6a 	bl	800208c <HAL_DMA_GetError>
 80033b8:	0003      	movs	r3, r0
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d105      	bne.n	80033ca <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2290      	movs	r2, #144	@ 0x90
 80033c2:	2110      	movs	r1, #16
 80033c4:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e031      	b.n	800342e <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2256      	movs	r2, #86	@ 0x56
 80033ce:	2100      	movs	r1, #0
 80033d0:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	225e      	movs	r2, #94	@ 0x5e
 80033d6:	2100      	movs	r1, #0
 80033d8:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	220f      	movs	r2, #15
 80033e0:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	059b      	lsls	r3, r3, #22
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d107      	bne.n	80033fe <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2110      	movs	r1, #16
 80033fa:	430a      	orrs	r2, r1
 80033fc:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2108      	movs	r1, #8
 800340a:	430a      	orrs	r2, r1
 800340c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2288      	movs	r2, #136	@ 0x88
 8003412:	2120      	movs	r1, #32
 8003414:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	228c      	movs	r2, #140	@ 0x8c
 800341a:	2120      	movs	r1, #32
 800341c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2290      	movs	r2, #144	@ 0x90
 8003428:	2100      	movs	r1, #0
 800342a:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b016      	add	sp, #88	@ 0x58
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	fffffe1f 	.word	0xfffffe1f
 800343c:	ef7ffffe 	.word	0xef7ffffe

08003440 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b092      	sub	sp, #72	@ 0x48
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003448:	f3ef 8310 	mrs	r3, PRIMASK
 800344c:	623b      	str	r3, [r7, #32]
  return(result);
 800344e:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8003450:	647b      	str	r3, [r7, #68]	@ 0x44
 8003452:	2301      	movs	r3, #1
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	f383 8810 	msr	PRIMASK, r3
}
 800345c:	46c0      	nop			@ (mov r8, r8)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	494d      	ldr	r1, [pc, #308]	@ (80035a0 <HAL_UART_AbortReceive+0x160>)
 800346a:	400a      	ands	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	f383 8810 	msr	PRIMASK, r3
}
 8003478:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800347a:	f3ef 8310 	mrs	r3, PRIMASK
 800347e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8003482:	643b      	str	r3, [r7, #64]	@ 0x40
 8003484:	2301      	movs	r3, #1
 8003486:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4942      	ldr	r1, [pc, #264]	@ (80035a4 <HAL_UART_AbortReceive+0x164>)
 800349c:	400a      	ands	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d118      	bne.n	80034e6 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034b4:	f3ef 8310 	mrs	r3, PRIMASK
 80034b8:	617b      	str	r3, [r7, #20]
  return(result);
 80034ba:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80034bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034be:	2301      	movs	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	f383 8810 	msr	PRIMASK, r3
}
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2110      	movs	r1, #16
 80034d6:	438a      	bics	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f383 8810 	msr	PRIMASK, r3
}
 80034e4:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2240      	movs	r2, #64	@ 0x40
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b40      	cmp	r3, #64	@ 0x40
 80034f2:	d139      	bne.n	8003568 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034f4:	f3ef 8310 	mrs	r3, PRIMASK
 80034f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034fa:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034fe:	2301      	movs	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2140      	movs	r1, #64	@ 0x40
 8003516:	438a      	bics	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f383 8810 	msr	PRIMASK, r3
}
 8003524:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2280      	movs	r2, #128	@ 0x80
 800352a:	589b      	ldr	r3, [r3, r2]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01b      	beq.n	8003568 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2280      	movs	r2, #128	@ 0x80
 8003534:	589b      	ldr	r3, [r3, r2]
 8003536:	2200      	movs	r2, #0
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2280      	movs	r2, #128	@ 0x80
 800353e:	589b      	ldr	r3, [r3, r2]
 8003540:	0018      	movs	r0, r3
 8003542:	f7fe fc15 	bl	8001d70 <HAL_DMA_Abort>
 8003546:	1e03      	subs	r3, r0, #0
 8003548:	d00e      	beq.n	8003568 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2280      	movs	r2, #128	@ 0x80
 800354e:	589b      	ldr	r3, [r3, r2]
 8003550:	0018      	movs	r0, r3
 8003552:	f7fe fd9b 	bl	800208c <HAL_DMA_GetError>
 8003556:	0003      	movs	r3, r0
 8003558:	2b20      	cmp	r3, #32
 800355a:	d105      	bne.n	8003568 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2290      	movs	r2, #144	@ 0x90
 8003560:	2110      	movs	r1, #16
 8003562:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e017      	b.n	8003598 <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	225e      	movs	r2, #94	@ 0x5e
 800356c:	2100      	movs	r1, #0
 800356e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	220f      	movs	r2, #15
 8003576:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2108      	movs	r1, #8
 8003584:	430a      	orrs	r2, r1
 8003586:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	228c      	movs	r2, #140	@ 0x8c
 800358c:	2120      	movs	r1, #32
 800358e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b012      	add	sp, #72	@ 0x48
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	fffffedf 	.word	0xfffffedf
 80035a4:	effffffe 	.word	0xeffffffe

080035a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035a8:	b5b0      	push	{r4, r5, r7, lr}
 80035aa:	b0aa      	sub	sp, #168	@ 0xa8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	22a4      	movs	r2, #164	@ 0xa4
 80035b8:	18b9      	adds	r1, r7, r2
 80035ba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	20a0      	movs	r0, #160	@ 0xa0
 80035c4:	1839      	adds	r1, r7, r0
 80035c6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	249c      	movs	r4, #156	@ 0x9c
 80035d0:	1939      	adds	r1, r7, r4
 80035d2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035d4:	0011      	movs	r1, r2
 80035d6:	18bb      	adds	r3, r7, r2
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4aa2      	ldr	r2, [pc, #648]	@ (8003864 <HAL_UART_IRQHandler+0x2bc>)
 80035dc:	4013      	ands	r3, r2
 80035de:	2298      	movs	r2, #152	@ 0x98
 80035e0:	18bd      	adds	r5, r7, r2
 80035e2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80035e4:	18bb      	adds	r3, r7, r2
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11a      	bne.n	8003622 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2220      	movs	r2, #32
 80035f2:	4013      	ands	r3, r2
 80035f4:	d015      	beq.n	8003622 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035f6:	183b      	adds	r3, r7, r0
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2220      	movs	r2, #32
 80035fc:	4013      	ands	r3, r2
 80035fe:	d105      	bne.n	800360c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003600:	193b      	adds	r3, r7, r4
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	055b      	lsls	r3, r3, #21
 8003608:	4013      	ands	r3, r2
 800360a:	d00a      	beq.n	8003622 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003610:	2b00      	cmp	r3, #0
 8003612:	d100      	bne.n	8003616 <HAL_UART_IRQHandler+0x6e>
 8003614:	e2fb      	b.n	8003c0e <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	0010      	movs	r0, r2
 800361e:	4798      	blx	r3
      }
      return;
 8003620:	e2f5      	b.n	8003c0e <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003622:	2398      	movs	r3, #152	@ 0x98
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d100      	bne.n	800362e <HAL_UART_IRQHandler+0x86>
 800362c:	e122      	b.n	8003874 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800362e:	239c      	movs	r3, #156	@ 0x9c
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a8c      	ldr	r2, [pc, #560]	@ (8003868 <HAL_UART_IRQHandler+0x2c0>)
 8003636:	4013      	ands	r3, r2
 8003638:	d106      	bne.n	8003648 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800363a:	23a0      	movs	r3, #160	@ 0xa0
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a8a      	ldr	r2, [pc, #552]	@ (800386c <HAL_UART_IRQHandler+0x2c4>)
 8003642:	4013      	ands	r3, r2
 8003644:	d100      	bne.n	8003648 <HAL_UART_IRQHandler+0xa0>
 8003646:	e115      	b.n	8003874 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003648:	23a4      	movs	r3, #164	@ 0xa4
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2201      	movs	r2, #1
 8003650:	4013      	ands	r3, r2
 8003652:	d012      	beq.n	800367a <HAL_UART_IRQHandler+0xd2>
 8003654:	23a0      	movs	r3, #160	@ 0xa0
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4013      	ands	r3, r2
 8003660:	d00b      	beq.n	800367a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2290      	movs	r2, #144	@ 0x90
 800366e:	589b      	ldr	r3, [r3, r2]
 8003670:	2201      	movs	r2, #1
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2190      	movs	r1, #144	@ 0x90
 8003678:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800367a:	23a4      	movs	r3, #164	@ 0xa4
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2202      	movs	r2, #2
 8003682:	4013      	ands	r3, r2
 8003684:	d011      	beq.n	80036aa <HAL_UART_IRQHandler+0x102>
 8003686:	239c      	movs	r3, #156	@ 0x9c
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d00b      	beq.n	80036aa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2202      	movs	r2, #2
 8003698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2290      	movs	r2, #144	@ 0x90
 800369e:	589b      	ldr	r3, [r3, r2]
 80036a0:	2204      	movs	r2, #4
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2190      	movs	r1, #144	@ 0x90
 80036a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036aa:	23a4      	movs	r3, #164	@ 0xa4
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2204      	movs	r2, #4
 80036b2:	4013      	ands	r3, r2
 80036b4:	d011      	beq.n	80036da <HAL_UART_IRQHandler+0x132>
 80036b6:	239c      	movs	r3, #156	@ 0x9c
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	d00b      	beq.n	80036da <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2204      	movs	r2, #4
 80036c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2290      	movs	r2, #144	@ 0x90
 80036ce:	589b      	ldr	r3, [r3, r2]
 80036d0:	2202      	movs	r2, #2
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2190      	movs	r1, #144	@ 0x90
 80036d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036da:	23a4      	movs	r3, #164	@ 0xa4
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2208      	movs	r2, #8
 80036e2:	4013      	ands	r3, r2
 80036e4:	d017      	beq.n	8003716 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036e6:	23a0      	movs	r3, #160	@ 0xa0
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2220      	movs	r2, #32
 80036ee:	4013      	ands	r3, r2
 80036f0:	d105      	bne.n	80036fe <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036f2:	239c      	movs	r3, #156	@ 0x9c
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5b      	ldr	r2, [pc, #364]	@ (8003868 <HAL_UART_IRQHandler+0x2c0>)
 80036fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036fc:	d00b      	beq.n	8003716 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2208      	movs	r2, #8
 8003704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2290      	movs	r2, #144	@ 0x90
 800370a:	589b      	ldr	r3, [r3, r2]
 800370c:	2208      	movs	r2, #8
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2190      	movs	r1, #144	@ 0x90
 8003714:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003716:	23a4      	movs	r3, #164	@ 0xa4
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	4013      	ands	r3, r2
 8003722:	d013      	beq.n	800374c <HAL_UART_IRQHandler+0x1a4>
 8003724:	23a0      	movs	r3, #160	@ 0xa0
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	04db      	lsls	r3, r3, #19
 800372e:	4013      	ands	r3, r2
 8003730:	d00c      	beq.n	800374c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2290      	movs	r2, #144	@ 0x90
 8003740:	589b      	ldr	r3, [r3, r2]
 8003742:	2220      	movs	r2, #32
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2190      	movs	r1, #144	@ 0x90
 800374a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2290      	movs	r2, #144	@ 0x90
 8003750:	589b      	ldr	r3, [r3, r2]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d100      	bne.n	8003758 <HAL_UART_IRQHandler+0x1b0>
 8003756:	e25c      	b.n	8003c12 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003758:	23a4      	movs	r3, #164	@ 0xa4
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2220      	movs	r2, #32
 8003760:	4013      	ands	r3, r2
 8003762:	d015      	beq.n	8003790 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003764:	23a0      	movs	r3, #160	@ 0xa0
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2220      	movs	r2, #32
 800376c:	4013      	ands	r3, r2
 800376e:	d106      	bne.n	800377e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003770:	239c      	movs	r3, #156	@ 0x9c
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	2380      	movs	r3, #128	@ 0x80
 8003778:	055b      	lsls	r3, r3, #21
 800377a:	4013      	ands	r3, r2
 800377c:	d008      	beq.n	8003790 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	0010      	movs	r0, r2
 800378e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2290      	movs	r2, #144	@ 0x90
 8003794:	589b      	ldr	r3, [r3, r2]
 8003796:	2194      	movs	r1, #148	@ 0x94
 8003798:	187a      	adds	r2, r7, r1
 800379a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2240      	movs	r2, #64	@ 0x40
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b40      	cmp	r3, #64	@ 0x40
 80037a8:	d004      	beq.n	80037b4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2228      	movs	r2, #40	@ 0x28
 80037b0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037b2:	d04c      	beq.n	800384e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fe86 	bl	80044c8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2240      	movs	r2, #64	@ 0x40
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d13c      	bne.n	8003844 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037ca:	f3ef 8310 	mrs	r3, PRIMASK
 80037ce:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80037d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d2:	2090      	movs	r0, #144	@ 0x90
 80037d4:	183a      	adds	r2, r7, r0
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	2301      	movs	r3, #1
 80037da:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037de:	f383 8810 	msr	PRIMASK, r3
}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2140      	movs	r1, #64	@ 0x40
 80037f0:	438a      	bics	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	183b      	adds	r3, r7, r0
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037fc:	f383 8810 	msr	PRIMASK, r3
}
 8003800:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2280      	movs	r2, #128	@ 0x80
 8003806:	589b      	ldr	r3, [r3, r2]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2280      	movs	r2, #128	@ 0x80
 8003810:	589b      	ldr	r3, [r3, r2]
 8003812:	4a17      	ldr	r2, [pc, #92]	@ (8003870 <HAL_UART_IRQHandler+0x2c8>)
 8003814:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2280      	movs	r2, #128	@ 0x80
 800381a:	589b      	ldr	r3, [r3, r2]
 800381c:	0018      	movs	r0, r3
 800381e:	f7fe fb09 	bl	8001e34 <HAL_DMA_Abort_IT>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d01c      	beq.n	8003860 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2280      	movs	r2, #128	@ 0x80
 800382a:	589b      	ldr	r3, [r3, r2]
 800382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	2180      	movs	r1, #128	@ 0x80
 8003832:	5852      	ldr	r2, [r2, r1]
 8003834:	0010      	movs	r0, r2
 8003836:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	e012      	b.n	8003860 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 fa09 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003842:	e00d      	b.n	8003860 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fa04 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	e008      	b.n	8003860 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f000 f9ff 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2290      	movs	r2, #144	@ 0x90
 800385a:	2100      	movs	r1, #0
 800385c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800385e:	e1d8      	b.n	8003c12 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	46c0      	nop			@ (mov r8, r8)
    return;
 8003862:	e1d6      	b.n	8003c12 <HAL_UART_IRQHandler+0x66a>
 8003864:	0000080f 	.word	0x0000080f
 8003868:	10000001 	.word	0x10000001
 800386c:	04000120 	.word	0x04000120
 8003870:	0800478d 	.word	0x0800478d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d000      	beq.n	800387e <HAL_UART_IRQHandler+0x2d6>
 800387c:	e15d      	b.n	8003b3a <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800387e:	23a4      	movs	r3, #164	@ 0xa4
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2210      	movs	r2, #16
 8003886:	4013      	ands	r3, r2
 8003888:	d100      	bne.n	800388c <HAL_UART_IRQHandler+0x2e4>
 800388a:	e156      	b.n	8003b3a <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800388c:	23a0      	movs	r3, #160	@ 0xa0
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2210      	movs	r2, #16
 8003894:	4013      	ands	r3, r2
 8003896:	d100      	bne.n	800389a <HAL_UART_IRQHandler+0x2f2>
 8003898:	e14f      	b.n	8003b3a <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2210      	movs	r2, #16
 80038a0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2240      	movs	r2, #64	@ 0x40
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b40      	cmp	r3, #64	@ 0x40
 80038ae:	d000      	beq.n	80038b2 <HAL_UART_IRQHandler+0x30a>
 80038b0:	e0c3      	b.n	8003a3a <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2280      	movs	r2, #128	@ 0x80
 80038b6:	589b      	ldr	r3, [r3, r2]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	217e      	movs	r1, #126	@ 0x7e
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d100      	bne.n	80038cc <HAL_UART_IRQHandler+0x324>
 80038ca:	e097      	b.n	80039fc <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	225c      	movs	r2, #92	@ 0x5c
 80038d0:	5a9b      	ldrh	r3, [r3, r2]
 80038d2:	187a      	adds	r2, r7, r1
 80038d4:	8812      	ldrh	r2, [r2, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d300      	bcc.n	80038dc <HAL_UART_IRQHandler+0x334>
 80038da:	e08f      	b.n	80039fc <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	187a      	adds	r2, r7, r1
 80038e0:	215e      	movs	r1, #94	@ 0x5e
 80038e2:	8812      	ldrh	r2, [r2, #0]
 80038e4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2280      	movs	r2, #128	@ 0x80
 80038ea:	589b      	ldr	r3, [r3, r2]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2220      	movs	r2, #32
 80038f2:	4013      	ands	r3, r2
 80038f4:	d170      	bne.n	80039d8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038f6:	f3ef 8310 	mrs	r3, PRIMASK
 80038fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80038fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003900:	2301      	movs	r3, #1
 8003902:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003906:	f383 8810 	msr	PRIMASK, r3
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	49c4      	ldr	r1, [pc, #784]	@ (8003c28 <HAL_UART_IRQHandler+0x680>)
 8003918:	400a      	ands	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800391e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003922:	f383 8810 	msr	PRIMASK, r3
}
 8003926:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003928:	f3ef 8310 	mrs	r3, PRIMASK
 800392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800392e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003930:	677b      	str	r3, [r7, #116]	@ 0x74
 8003932:	2301      	movs	r3, #1
 8003934:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			@ (mov r8, r8)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	438a      	bics	r2, r1
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003950:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003962:	673b      	str	r3, [r7, #112]	@ 0x70
 8003964:	2301      	movs	r3, #1
 8003966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2140      	movs	r1, #64	@ 0x40
 800397c:	438a      	bics	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003982:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003986:	f383 8810 	msr	PRIMASK, r3
}
 800398a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	228c      	movs	r2, #140	@ 0x8c
 8003990:	2120      	movs	r1, #32
 8003992:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800399a:	f3ef 8310 	mrs	r3, PRIMASK
 800399e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80039a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039a4:	2301      	movs	r3, #1
 80039a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2110      	movs	r1, #16
 80039bc:	438a      	bics	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c6:	f383 8810 	msr	PRIMASK, r3
}
 80039ca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2280      	movs	r2, #128	@ 0x80
 80039d0:	589b      	ldr	r3, [r3, r2]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fe f9cc 	bl	8001d70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	225c      	movs	r2, #92	@ 0x5c
 80039e2:	5a9a      	ldrh	r2, [r3, r2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	215e      	movs	r1, #94	@ 0x5e
 80039e8:	5a5b      	ldrh	r3, [r3, r1]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0011      	movs	r1, r2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7fc ff69 	bl	80008cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039fa:	e10c      	b.n	8003c16 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	225c      	movs	r2, #92	@ 0x5c
 8003a00:	5a9b      	ldrh	r3, [r3, r2]
 8003a02:	227e      	movs	r2, #126	@ 0x7e
 8003a04:	18ba      	adds	r2, r7, r2
 8003a06:	8812      	ldrh	r2, [r2, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d000      	beq.n	8003a0e <HAL_UART_IRQHandler+0x466>
 8003a0c:	e103      	b.n	8003c16 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2280      	movs	r2, #128	@ 0x80
 8003a12:	589b      	ldr	r3, [r3, r2]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d000      	beq.n	8003a22 <HAL_UART_IRQHandler+0x47a>
 8003a20:	e0f9      	b.n	8003c16 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	225c      	movs	r2, #92	@ 0x5c
 8003a2c:	5a9a      	ldrh	r2, [r3, r2]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0011      	movs	r1, r2
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7fc ff4a 	bl	80008cc <HAL_UARTEx_RxEventCallback>
      return;
 8003a38:	e0ed      	b.n	8003c16 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	225c      	movs	r2, #92	@ 0x5c
 8003a3e:	5a99      	ldrh	r1, [r3, r2]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	225e      	movs	r2, #94	@ 0x5e
 8003a44:	5a9b      	ldrh	r3, [r3, r2]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	208e      	movs	r0, #142	@ 0x8e
 8003a4a:	183b      	adds	r3, r7, r0
 8003a4c:	1a8a      	subs	r2, r1, r2
 8003a4e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	225e      	movs	r2, #94	@ 0x5e
 8003a54:	5a9b      	ldrh	r3, [r3, r2]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d100      	bne.n	8003a5e <HAL_UART_IRQHandler+0x4b6>
 8003a5c:	e0dd      	b.n	8003c1a <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8003a5e:	183b      	adds	r3, r7, r0
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d100      	bne.n	8003a68 <HAL_UART_IRQHandler+0x4c0>
 8003a66:	e0d8      	b.n	8003c1a <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a68:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a70:	2488      	movs	r4, #136	@ 0x88
 8003a72:	193a      	adds	r2, r7, r4
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	2301      	movs	r3, #1
 8003a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f383 8810 	msr	PRIMASK, r3
}
 8003a80:	46c0      	nop			@ (mov r8, r8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4967      	ldr	r1, [pc, #412]	@ (8003c2c <HAL_UART_IRQHandler+0x684>)
 8003a8e:	400a      	ands	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f383 8810 	msr	PRIMASK, r3
}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003aa6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003aa8:	2484      	movs	r4, #132	@ 0x84
 8003aaa:	193a      	adds	r2, r7, r4
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f383 8810 	msr	PRIMASK, r3
}
 8003ab8:	46c0      	nop			@ (mov r8, r8)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	495a      	ldr	r1, [pc, #360]	@ (8003c30 <HAL_UART_IRQHandler+0x688>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	228c      	movs	r2, #140	@ 0x8c
 8003adc:	2120      	movs	r1, #32
 8003ade:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003aec:	f3ef 8310 	mrs	r3, PRIMASK
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af4:	2480      	movs	r4, #128	@ 0x80
 8003af6:	193a      	adds	r2, r7, r4
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	2301      	movs	r3, #1
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2110      	movs	r1, #16
 8003b12:	438a      	bics	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b2a:	183b      	adds	r3, r7, r0
 8003b2c:	881a      	ldrh	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7fc feca 	bl	80008cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b38:	e06f      	b.n	8003c1a <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b3a:	23a4      	movs	r3, #164	@ 0xa4
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2380      	movs	r3, #128	@ 0x80
 8003b42:	035b      	lsls	r3, r3, #13
 8003b44:	4013      	ands	r3, r2
 8003b46:	d010      	beq.n	8003b6a <HAL_UART_IRQHandler+0x5c2>
 8003b48:	239c      	movs	r3, #156	@ 0x9c
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	2380      	movs	r3, #128	@ 0x80
 8003b50:	03db      	lsls	r3, r3, #15
 8003b52:	4013      	ands	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2280      	movs	r2, #128	@ 0x80
 8003b5c:	0352      	lsls	r2, r2, #13
 8003b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0018      	movs	r0, r3
 8003b64:	f001 f870 	bl	8004c48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b68:	e05a      	b.n	8003c20 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b6a:	23a4      	movs	r3, #164	@ 0xa4
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	4013      	ands	r3, r2
 8003b74:	d016      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b76:	23a0      	movs	r3, #160	@ 0xa0
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2280      	movs	r2, #128	@ 0x80
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b82:	239c      	movs	r3, #156	@ 0x9c
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d042      	beq.n	8003c1e <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	0010      	movs	r0, r2
 8003ba0:	4798      	blx	r3
    }
    return;
 8003ba2:	e03c      	b.n	8003c1e <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ba4:	23a4      	movs	r3, #164	@ 0xa4
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2240      	movs	r2, #64	@ 0x40
 8003bac:	4013      	ands	r3, r2
 8003bae:	d00a      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x61e>
 8003bb0:	23a0      	movs	r3, #160	@ 0xa0
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2240      	movs	r2, #64	@ 0x40
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 ffa4 	bl	8004b0c <UART_EndTransmit_IT>
    return;
 8003bc4:	e02c      	b.n	8003c20 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003bc6:	23a4      	movs	r3, #164	@ 0xa4
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	2380      	movs	r3, #128	@ 0x80
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <HAL_UART_IRQHandler+0x644>
 8003bd4:	23a0      	movs	r3, #160	@ 0xa0
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	2380      	movs	r3, #128	@ 0x80
 8003bdc:	05db      	lsls	r3, r3, #23
 8003bde:	4013      	ands	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f001 f83f 	bl	8004c68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bea:	e019      	b.n	8003c20 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003bec:	23a4      	movs	r3, #164	@ 0xa4
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	2380      	movs	r3, #128	@ 0x80
 8003bf4:	045b      	lsls	r3, r3, #17
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d012      	beq.n	8003c20 <HAL_UART_IRQHandler+0x678>
 8003bfa:	23a0      	movs	r3, #160	@ 0xa0
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	da0d      	bge.n	8003c20 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f001 f826 	bl	8004c58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c0c:	e008      	b.n	8003c20 <HAL_UART_IRQHandler+0x678>
      return;
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	e006      	b.n	8003c20 <HAL_UART_IRQHandler+0x678>
    return;
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	e004      	b.n	8003c20 <HAL_UART_IRQHandler+0x678>
      return;
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	e002      	b.n	8003c20 <HAL_UART_IRQHandler+0x678>
      return;
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	e000      	b.n	8003c20 <HAL_UART_IRQHandler+0x678>
    return;
 8003c1e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b02a      	add	sp, #168	@ 0xa8
 8003c24:	bdb0      	pop	{r4, r5, r7, pc}
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	fffffeff 	.word	0xfffffeff
 8003c2c:	fffffedf 	.word	0xfffffedf
 8003c30:	effffffe 	.word	0xeffffffe

08003c34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003c3c:	46c0      	nop			@ (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b002      	add	sp, #8
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003c4c:	46c0      	nop			@ (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b002      	add	sp, #8
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c5c:	46c0      	nop			@ (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b002      	add	sp, #8
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c6c:	231e      	movs	r3, #30
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4aab      	ldr	r2, [pc, #684]	@ (8003f40 <UART_SetConfig+0x2dc>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4aa6      	ldr	r2, [pc, #664]	@ (8003f44 <UART_SetConfig+0x2e0>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	0019      	movs	r1, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a9d      	ldr	r2, [pc, #628]	@ (8003f48 <UART_SetConfig+0x2e4>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	4393      	bics	r3, r2
 8003cea:	0019      	movs	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a93      	ldr	r2, [pc, #588]	@ (8003f4c <UART_SetConfig+0x2e8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d127      	bne.n	8003d52 <UART_SetConfig+0xee>
 8003d02:	4b93      	ldr	r3, [pc, #588]	@ (8003f50 <UART_SetConfig+0x2ec>)
 8003d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d06:	2203      	movs	r2, #3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d017      	beq.n	8003d3e <UART_SetConfig+0xda>
 8003d0e:	d81b      	bhi.n	8003d48 <UART_SetConfig+0xe4>
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d00a      	beq.n	8003d2a <UART_SetConfig+0xc6>
 8003d14:	d818      	bhi.n	8003d48 <UART_SetConfig+0xe4>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <UART_SetConfig+0xbc>
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d00a      	beq.n	8003d34 <UART_SetConfig+0xd0>
 8003d1e:	e013      	b.n	8003d48 <UART_SetConfig+0xe4>
 8003d20:	231f      	movs	r3, #31
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	e021      	b.n	8003d6e <UART_SetConfig+0x10a>
 8003d2a:	231f      	movs	r3, #31
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e01c      	b.n	8003d6e <UART_SetConfig+0x10a>
 8003d34:	231f      	movs	r3, #31
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	2204      	movs	r2, #4
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e017      	b.n	8003d6e <UART_SetConfig+0x10a>
 8003d3e:	231f      	movs	r3, #31
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	2208      	movs	r2, #8
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e012      	b.n	8003d6e <UART_SetConfig+0x10a>
 8003d48:	231f      	movs	r3, #31
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e00d      	b.n	8003d6e <UART_SetConfig+0x10a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a7f      	ldr	r2, [pc, #508]	@ (8003f54 <UART_SetConfig+0x2f0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d104      	bne.n	8003d66 <UART_SetConfig+0x102>
 8003d5c:	231f      	movs	r3, #31
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e003      	b.n	8003d6e <UART_SetConfig+0x10a>
 8003d66:	231f      	movs	r3, #31
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	2380      	movs	r3, #128	@ 0x80
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d000      	beq.n	8003d7c <UART_SetConfig+0x118>
 8003d7a:	e06f      	b.n	8003e5c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003d7c:	231f      	movs	r3, #31
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d01f      	beq.n	8003dc6 <UART_SetConfig+0x162>
 8003d86:	dc22      	bgt.n	8003dce <UART_SetConfig+0x16a>
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d017      	beq.n	8003dbc <UART_SetConfig+0x158>
 8003d8c:	dc1f      	bgt.n	8003dce <UART_SetConfig+0x16a>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <UART_SetConfig+0x134>
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d005      	beq.n	8003da2 <UART_SetConfig+0x13e>
 8003d96:	e01a      	b.n	8003dce <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d98:	f7ff f84a 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	61bb      	str	r3, [r7, #24]
        break;
 8003da0:	e01c      	b.n	8003ddc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003da2:	4b6b      	ldr	r3, [pc, #428]	@ (8003f50 <UART_SetConfig+0x2ec>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	2207      	movs	r2, #7
 8003daa:	4013      	ands	r3, r2
 8003dac:	3301      	adds	r3, #1
 8003dae:	0019      	movs	r1, r3
 8003db0:	4869      	ldr	r0, [pc, #420]	@ (8003f58 <UART_SetConfig+0x2f4>)
 8003db2:	f7fc f9a9 	bl	8000108 <__udivsi3>
 8003db6:	0003      	movs	r3, r0
 8003db8:	61bb      	str	r3, [r7, #24]
        break;
 8003dba:	e00f      	b.n	8003ddc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dbc:	f7fe ffc2 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	61bb      	str	r3, [r7, #24]
        break;
 8003dc4:	e00a      	b.n	8003ddc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc6:	2380      	movs	r3, #128	@ 0x80
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	61bb      	str	r3, [r7, #24]
        break;
 8003dcc:	e006      	b.n	8003ddc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dd2:	231e      	movs	r3, #30
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
        break;
 8003dda:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d100      	bne.n	8003de4 <UART_SetConfig+0x180>
 8003de2:	e097      	b.n	8003f14 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003de8:	4b5c      	ldr	r3, [pc, #368]	@ (8003f5c <UART_SetConfig+0x2f8>)
 8003dea:	0052      	lsls	r2, r2, #1
 8003dec:	5ad3      	ldrh	r3, [r2, r3]
 8003dee:	0019      	movs	r1, r3
 8003df0:	69b8      	ldr	r0, [r7, #24]
 8003df2:	f7fc f989 	bl	8000108 <__udivsi3>
 8003df6:	0003      	movs	r3, r0
 8003df8:	005a      	lsls	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	18d2      	adds	r2, r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	0019      	movs	r1, r3
 8003e08:	0010      	movs	r0, r2
 8003e0a:	f7fc f97d 	bl	8000108 <__udivsi3>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b0f      	cmp	r3, #15
 8003e16:	d91c      	bls.n	8003e52 <UART_SetConfig+0x1ee>
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	2380      	movs	r3, #128	@ 0x80
 8003e1c:	025b      	lsls	r3, r3, #9
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d217      	bcs.n	8003e52 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	200e      	movs	r0, #14
 8003e28:	183b      	adds	r3, r7, r0
 8003e2a:	210f      	movs	r1, #15
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2207      	movs	r2, #7
 8003e38:	4013      	ands	r3, r2
 8003e3a:	b299      	uxth	r1, r3
 8003e3c:	183b      	adds	r3, r7, r0
 8003e3e:	183a      	adds	r2, r7, r0
 8003e40:	8812      	ldrh	r2, [r2, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	183a      	adds	r2, r7, r0
 8003e4c:	8812      	ldrh	r2, [r2, #0]
 8003e4e:	60da      	str	r2, [r3, #12]
 8003e50:	e060      	b.n	8003f14 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e52:	231e      	movs	r3, #30
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e05b      	b.n	8003f14 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e5c:	231f      	movs	r3, #31
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d01f      	beq.n	8003ea6 <UART_SetConfig+0x242>
 8003e66:	dc22      	bgt.n	8003eae <UART_SetConfig+0x24a>
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d017      	beq.n	8003e9c <UART_SetConfig+0x238>
 8003e6c:	dc1f      	bgt.n	8003eae <UART_SetConfig+0x24a>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <UART_SetConfig+0x214>
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d005      	beq.n	8003e82 <UART_SetConfig+0x21e>
 8003e76:	e01a      	b.n	8003eae <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e78:	f7fe ffda 	bl	8002e30 <HAL_RCC_GetPCLK1Freq>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	61bb      	str	r3, [r7, #24]
        break;
 8003e80:	e01c      	b.n	8003ebc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003e82:	4b33      	ldr	r3, [pc, #204]	@ (8003f50 <UART_SetConfig+0x2ec>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2207      	movs	r2, #7
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	0019      	movs	r1, r3
 8003e90:	4831      	ldr	r0, [pc, #196]	@ (8003f58 <UART_SetConfig+0x2f4>)
 8003e92:	f7fc f939 	bl	8000108 <__udivsi3>
 8003e96:	0003      	movs	r3, r0
 8003e98:	61bb      	str	r3, [r7, #24]
        break;
 8003e9a:	e00f      	b.n	8003ebc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9c:	f7fe ff52 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	61bb      	str	r3, [r7, #24]
        break;
 8003ea4:	e00a      	b.n	8003ebc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	61bb      	str	r3, [r7, #24]
        break;
 8003eac:	e006      	b.n	8003ebc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eb2:	231e      	movs	r3, #30
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
        break;
 8003eba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d028      	beq.n	8003f14 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ec6:	4b25      	ldr	r3, [pc, #148]	@ (8003f5c <UART_SetConfig+0x2f8>)
 8003ec8:	0052      	lsls	r2, r2, #1
 8003eca:	5ad3      	ldrh	r3, [r2, r3]
 8003ecc:	0019      	movs	r1, r3
 8003ece:	69b8      	ldr	r0, [r7, #24]
 8003ed0:	f7fc f91a 	bl	8000108 <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	001a      	movs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	18d2      	adds	r2, r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	f7fc f90e 	bl	8000108 <__udivsi3>
 8003eec:	0003      	movs	r3, r0
 8003eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b0f      	cmp	r3, #15
 8003ef4:	d90a      	bls.n	8003f0c <UART_SetConfig+0x2a8>
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	2380      	movs	r3, #128	@ 0x80
 8003efa:	025b      	lsls	r3, r3, #9
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d205      	bcs.n	8003f0c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	e003      	b.n	8003f14 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0c:	231e      	movs	r3, #30
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2201      	movs	r2, #1
 8003f12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	226a      	movs	r2, #106	@ 0x6a
 8003f18:	2101      	movs	r1, #1
 8003f1a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2268      	movs	r2, #104	@ 0x68
 8003f20:	2101      	movs	r1, #1
 8003f22:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f30:	231e      	movs	r3, #30
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	781b      	ldrb	r3, [r3, #0]
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b008      	add	sp, #32
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	cfff69f3 	.word	0xcfff69f3
 8003f44:	ffffcfff 	.word	0xffffcfff
 8003f48:	11fff4ff 	.word	0x11fff4ff
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40004400 	.word	0x40004400
 8003f58:	02dc6c00 	.word	0x02dc6c00
 8003f5c:	080052b0 	.word	0x080052b0

08003f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a4a      	ldr	r2, [pc, #296]	@ (80040a4 <UART_AdvFeatureConfig+0x144>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4013      	ands	r3, r2
 8003f92:	d00b      	beq.n	8003fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a43      	ldr	r2, [pc, #268]	@ (80040a8 <UART_AdvFeatureConfig+0x148>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d00b      	beq.n	8003fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80040ac <UART_AdvFeatureConfig+0x14c>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a34      	ldr	r2, [pc, #208]	@ (80040b0 <UART_AdvFeatureConfig+0x150>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	2210      	movs	r2, #16
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d00b      	beq.n	8004012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4a2c      	ldr	r2, [pc, #176]	@ (80040b4 <UART_AdvFeatureConfig+0x154>)
 8004002:	4013      	ands	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	2220      	movs	r2, #32
 8004018:	4013      	ands	r3, r2
 800401a:	d00b      	beq.n	8004034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	4a25      	ldr	r2, [pc, #148]	@ (80040b8 <UART_AdvFeatureConfig+0x158>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	2240      	movs	r2, #64	@ 0x40
 800403a:	4013      	ands	r3, r2
 800403c:	d01d      	beq.n	800407a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a1d      	ldr	r2, [pc, #116]	@ (80040bc <UART_AdvFeatureConfig+0x15c>)
 8004046:	4013      	ands	r3, r2
 8004048:	0019      	movs	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405a:	2380      	movs	r3, #128	@ 0x80
 800405c:	035b      	lsls	r3, r3, #13
 800405e:	429a      	cmp	r2, r3
 8004060:	d10b      	bne.n	800407a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <UART_AdvFeatureConfig+0x160>)
 800406a:	4013      	ands	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407e:	2280      	movs	r2, #128	@ 0x80
 8004080:	4013      	ands	r3, r2
 8004082:	d00b      	beq.n	800409c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4a0e      	ldr	r2, [pc, #56]	@ (80040c4 <UART_AdvFeatureConfig+0x164>)
 800408c:	4013      	ands	r3, r2
 800408e:	0019      	movs	r1, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }
}
 800409c:	46c0      	nop			@ (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	b002      	add	sp, #8
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	ffff7fff 	.word	0xffff7fff
 80040a8:	fffdffff 	.word	0xfffdffff
 80040ac:	fffeffff 	.word	0xfffeffff
 80040b0:	fffbffff 	.word	0xfffbffff
 80040b4:	ffffefff 	.word	0xffffefff
 80040b8:	ffffdfff 	.word	0xffffdfff
 80040bc:	ffefffff 	.word	0xffefffff
 80040c0:	ff9fffff 	.word	0xff9fffff
 80040c4:	fff7ffff 	.word	0xfff7ffff

080040c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b092      	sub	sp, #72	@ 0x48
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2290      	movs	r2, #144	@ 0x90
 80040d4:	2100      	movs	r1, #0
 80040d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d8:	f7fd fb82 	bl	80017e0 <HAL_GetTick>
 80040dc:	0003      	movs	r3, r0
 80040de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2208      	movs	r2, #8
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d12d      	bne.n	800414a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f0:	2280      	movs	r2, #128	@ 0x80
 80040f2:	0391      	lsls	r1, r2, #14
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4a47      	ldr	r2, [pc, #284]	@ (8004214 <UART_CheckIdleState+0x14c>)
 80040f8:	9200      	str	r2, [sp, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f000 f88e 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8004100:	1e03      	subs	r3, r0, #0
 8004102:	d022      	beq.n	800414a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004104:	f3ef 8310 	mrs	r3, PRIMASK
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800410c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800410e:	2301      	movs	r3, #1
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			@ (mov r8, r8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2180      	movs	r1, #128	@ 0x80
 8004126:	438a      	bics	r2, r1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004130:	f383 8810 	msr	PRIMASK, r3
}
 8004134:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2288      	movs	r2, #136	@ 0x88
 800413a:	2120      	movs	r1, #32
 800413c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2284      	movs	r2, #132	@ 0x84
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e060      	b.n	800420c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2204      	movs	r2, #4
 8004152:	4013      	ands	r3, r2
 8004154:	2b04      	cmp	r3, #4
 8004156:	d146      	bne.n	80041e6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415a:	2280      	movs	r2, #128	@ 0x80
 800415c:	03d1      	lsls	r1, r2, #15
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <UART_CheckIdleState+0x14c>)
 8004162:	9200      	str	r2, [sp, #0]
 8004164:	2200      	movs	r2, #0
 8004166:	f000 f859 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d03b      	beq.n	80041e6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800416e:	f3ef 8310 	mrs	r3, PRIMASK
 8004172:	60fb      	str	r3, [r7, #12]
  return(result);
 8004174:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34
 8004178:	2301      	movs	r3, #1
 800417a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f383 8810 	msr	PRIMASK, r3
}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4922      	ldr	r1, [pc, #136]	@ (8004218 <UART_CheckIdleState+0x150>)
 8004190:	400a      	ands	r2, r1
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004196:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f383 8810 	msr	PRIMASK, r3
}
 800419e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041a0:	f3ef 8310 	mrs	r3, PRIMASK
 80041a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80041a6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041aa:	2301      	movs	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f383 8810 	msr	PRIMASK, r3
}
 80041b4:	46c0      	nop			@ (mov r8, r8)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2101      	movs	r1, #1
 80041c2:	438a      	bics	r2, r1
 80041c4:	609a      	str	r2, [r3, #8]
 80041c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f383 8810 	msr	PRIMASK, r3
}
 80041d0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	228c      	movs	r2, #140	@ 0x8c
 80041d6:	2120      	movs	r1, #32
 80041d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2284      	movs	r2, #132	@ 0x84
 80041de:	2100      	movs	r1, #0
 80041e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e012      	b.n	800420c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2288      	movs	r2, #136	@ 0x88
 80041ea:	2120      	movs	r1, #32
 80041ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	228c      	movs	r2, #140	@ 0x8c
 80041f2:	2120      	movs	r1, #32
 80041f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2284      	movs	r2, #132	@ 0x84
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b010      	add	sp, #64	@ 0x40
 8004212:	bd80      	pop	{r7, pc}
 8004214:	01ffffff 	.word	0x01ffffff
 8004218:	fffffedf 	.word	0xfffffedf

0800421c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	1dfb      	adds	r3, r7, #7
 800422a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422c:	e051      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3301      	adds	r3, #1
 8004232:	d04e      	beq.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004234:	f7fd fad4 	bl	80017e0 <HAL_GetTick>
 8004238:	0002      	movs	r2, r0
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e051      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2204      	movs	r2, #4
 8004256:	4013      	ands	r3, r2
 8004258:	d03b      	beq.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b80      	cmp	r3, #128	@ 0x80
 800425e:	d038      	beq.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b40      	cmp	r3, #64	@ 0x40
 8004264:	d035      	beq.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	2208      	movs	r2, #8
 800426e:	4013      	ands	r3, r2
 8004270:	2b08      	cmp	r3, #8
 8004272:	d111      	bne.n	8004298 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2208      	movs	r2, #8
 800427a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	0018      	movs	r0, r3
 8004280:	f000 f922 	bl	80044c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2290      	movs	r2, #144	@ 0x90
 8004288:	2108      	movs	r1, #8
 800428a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2284      	movs	r2, #132	@ 0x84
 8004290:	2100      	movs	r1, #0
 8004292:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e02c      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	401a      	ands	r2, r3
 80042a4:	2380      	movs	r3, #128	@ 0x80
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d112      	bne.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2280      	movs	r2, #128	@ 0x80
 80042b2:	0112      	lsls	r2, r2, #4
 80042b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 f905 	bl	80044c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2290      	movs	r2, #144	@ 0x90
 80042c2:	2120      	movs	r1, #32
 80042c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2284      	movs	r2, #132	@ 0x84
 80042ca:	2100      	movs	r1, #0
 80042cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e00f      	b.n	80042f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	4013      	ands	r3, r2
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	425a      	negs	r2, r3
 80042e2:	4153      	adcs	r3, r2
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	001a      	movs	r2, r3
 80042e8:	1dfb      	adds	r3, r7, #7
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d09e      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	0018      	movs	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b004      	add	sp, #16
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b090      	sub	sp, #64	@ 0x40
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	1dbb      	adds	r3, r7, #6
 8004308:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1dba      	adds	r2, r7, #6
 8004314:	215c      	movs	r1, #92	@ 0x5c
 8004316:	8812      	ldrh	r2, [r2, #0]
 8004318:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2290      	movs	r2, #144	@ 0x90
 800431e:	2100      	movs	r1, #0
 8004320:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	228c      	movs	r2, #140	@ 0x8c
 8004326:	2122      	movs	r1, #34	@ 0x22
 8004328:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2280      	movs	r2, #128	@ 0x80
 800432e:	589b      	ldr	r3, [r3, r2]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02d      	beq.n	8004390 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2280      	movs	r2, #128	@ 0x80
 8004338:	589b      	ldr	r3, [r3, r2]
 800433a:	4a40      	ldr	r2, [pc, #256]	@ (800443c <UART_Start_Receive_DMA+0x140>)
 800433c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2280      	movs	r2, #128	@ 0x80
 8004342:	589b      	ldr	r3, [r3, r2]
 8004344:	4a3e      	ldr	r2, [pc, #248]	@ (8004440 <UART_Start_Receive_DMA+0x144>)
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2280      	movs	r2, #128	@ 0x80
 800434c:	589b      	ldr	r3, [r3, r2]
 800434e:	4a3d      	ldr	r2, [pc, #244]	@ (8004444 <UART_Start_Receive_DMA+0x148>)
 8004350:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	589b      	ldr	r3, [r3, r2]
 8004358:	2200      	movs	r2, #0
 800435a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2280      	movs	r2, #128	@ 0x80
 8004360:	5898      	ldr	r0, [r3, r2]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3324      	adds	r3, #36	@ 0x24
 8004368:	0019      	movs	r1, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	001a      	movs	r2, r3
 8004370:	1dbb      	adds	r3, r7, #6
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	f7fd fc74 	bl	8001c60 <HAL_DMA_Start_IT>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d009      	beq.n	8004390 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2290      	movs	r2, #144	@ 0x90
 8004380:	2110      	movs	r1, #16
 8004382:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	228c      	movs	r2, #140	@ 0x8c
 8004388:	2120      	movs	r1, #32
 800438a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e050      	b.n	8004432 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d019      	beq.n	80043cc <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004398:	f3ef 8310 	mrs	r3, PRIMASK
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a2:	2301      	movs	r3, #1
 80043a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a8:	f383 8810 	msr	PRIMASK, r3
}
 80043ac:	46c0      	nop			@ (mov r8, r8)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2180      	movs	r1, #128	@ 0x80
 80043ba:	0049      	lsls	r1, r1, #1
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043cc:	f3ef 8310 	mrs	r3, PRIMASK
 80043d0:	613b      	str	r3, [r7, #16]
  return(result);
 80043d2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043d6:	2301      	movs	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f383 8810 	msr	PRIMASK, r3
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2101      	movs	r1, #1
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004402:	61fb      	str	r3, [r7, #28]
  return(result);
 8004404:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
 8004408:	2301      	movs	r3, #1
 800440a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2140      	movs	r1, #64	@ 0x40
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	0018      	movs	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	b010      	add	sp, #64	@ 0x40
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	08004595 	.word	0x08004595
 8004440:	080046c5 	.word	0x080046c5
 8004444:	08004707 	.word	0x08004707

08004448 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	@ 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004450:	f3ef 8310 	mrs	r3, PRIMASK
 8004454:	60bb      	str	r3, [r7, #8]
  return(result);
 8004456:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
 800445a:	2301      	movs	r3, #1
 800445c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f383 8810 	msr	PRIMASK, r3
}
 8004464:	46c0      	nop			@ (mov r8, r8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	21c0      	movs	r1, #192	@ 0xc0
 8004472:	438a      	bics	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f383 8810 	msr	PRIMASK, r3
}
 8004480:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004482:	f3ef 8310 	mrs	r3, PRIMASK
 8004486:	617b      	str	r3, [r7, #20]
  return(result);
 8004488:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800448a:	623b      	str	r3, [r7, #32]
 800448c:	2301      	movs	r3, #1
 800448e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f383 8810 	msr	PRIMASK, r3
}
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4908      	ldr	r1, [pc, #32]	@ (80044c4 <UART_EndTxTransfer+0x7c>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f383 8810 	msr	PRIMASK, r3
}
 80044b2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2288      	movs	r2, #136	@ 0x88
 80044b8:	2120      	movs	r1, #32
 80044ba:	5099      	str	r1, [r3, r2]
}
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b00a      	add	sp, #40	@ 0x28
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	ff7fffff 	.word	0xff7fffff

080044c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08e      	sub	sp, #56	@ 0x38
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044d0:	f3ef 8310 	mrs	r3, PRIMASK
 80044d4:	617b      	str	r3, [r7, #20]
  return(result);
 80044d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044da:	2301      	movs	r3, #1
 80044dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4926      	ldr	r1, [pc, #152]	@ (800458c <UART_EndRxTransfer+0xc4>)
 80044f2:	400a      	ands	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f383 8810 	msr	PRIMASK, r3
}
 8004500:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004502:	f3ef 8310 	mrs	r3, PRIMASK
 8004506:	623b      	str	r3, [r7, #32]
  return(result);
 8004508:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800450a:	633b      	str	r3, [r7, #48]	@ 0x30
 800450c:	2301      	movs	r3, #1
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	f383 8810 	msr	PRIMASK, r3
}
 8004516:	46c0      	nop			@ (mov r8, r8)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	491b      	ldr	r1, [pc, #108]	@ (8004590 <UART_EndRxTransfer+0xc8>)
 8004524:	400a      	ands	r2, r1
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	f383 8810 	msr	PRIMASK, r3
}
 8004532:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d118      	bne.n	800456e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800453c:	f3ef 8310 	mrs	r3, PRIMASK
 8004540:	60bb      	str	r3, [r7, #8]
  return(result);
 8004542:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004546:	2301      	movs	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2110      	movs	r1, #16
 800455e:	438a      	bics	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f383 8810 	msr	PRIMASK, r3
}
 800456c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	228c      	movs	r2, #140	@ 0x8c
 8004572:	2120      	movs	r1, #32
 8004574:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	46bd      	mov	sp, r7
 8004586:	b00e      	add	sp, #56	@ 0x38
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	fffffedf 	.word	0xfffffedf
 8004590:	effffffe 	.word	0xeffffffe

08004594 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b094      	sub	sp, #80	@ 0x50
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2220      	movs	r2, #32
 80045aa:	4013      	ands	r3, r2
 80045ac:	d16f      	bne.n	800468e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80045ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b0:	225e      	movs	r2, #94	@ 0x5e
 80045b2:	2100      	movs	r1, #0
 80045b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045b6:	f3ef 8310 	mrs	r3, PRIMASK
 80045ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80045bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045c0:	2301      	movs	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f383 8810 	msr	PRIMASK, r3
}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	493a      	ldr	r1, [pc, #232]	@ (80046c0 <UART_DMAReceiveCplt+0x12c>)
 80045d8:	400a      	ands	r2, r1
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f383 8810 	msr	PRIMASK, r3
}
 80045e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045e8:	f3ef 8310 	mrs	r3, PRIMASK
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f2:	2301      	movs	r3, #1
 80045f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f8:	f383 8810 	msr	PRIMASK, r3
}
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2101      	movs	r1, #1
 800460a:	438a      	bics	r2, r1
 800460c:	609a      	str	r2, [r3, #8]
 800460e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004614:	f383 8810 	msr	PRIMASK, r3
}
 8004618:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800461a:	f3ef 8310 	mrs	r3, PRIMASK
 800461e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004622:	643b      	str	r3, [r7, #64]	@ 0x40
 8004624:	2301      	movs	r3, #1
 8004626:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462a:	f383 8810 	msr	PRIMASK, r3
}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2140      	movs	r1, #64	@ 0x40
 800463c:	438a      	bics	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004642:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004646:	f383 8810 	msr	PRIMASK, r3
}
 800464a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800464c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800464e:	228c      	movs	r2, #140	@ 0x8c
 8004650:	2120      	movs	r1, #32
 8004652:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d118      	bne.n	800468e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800465c:	f3ef 8310 	mrs	r3, PRIMASK
 8004660:	60fb      	str	r3, [r7, #12]
  return(result);
 8004662:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004666:	2301      	movs	r3, #1
 8004668:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f383 8810 	msr	PRIMASK, r3
}
 8004670:	46c0      	nop			@ (mov r8, r8)
 8004672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2110      	movs	r1, #16
 800467e:	438a      	bics	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f383 8810 	msr	PRIMASK, r3
}
 800468c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004690:	2200      	movs	r2, #0
 8004692:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d108      	bne.n	80046ae <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800469c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800469e:	225c      	movs	r2, #92	@ 0x5c
 80046a0:	5a9a      	ldrh	r2, [r3, r2]
 80046a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a4:	0011      	movs	r1, r2
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7fc f910 	bl	80008cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046ac:	e003      	b.n	80046b6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80046ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7ff fabf 	bl	8003c34 <HAL_UART_RxCpltCallback>
}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b014      	add	sp, #80	@ 0x50
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	fffffeff 	.word	0xfffffeff

080046c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d10a      	bne.n	80046f6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	225c      	movs	r2, #92	@ 0x5c
 80046e4:	5a9b      	ldrh	r3, [r3, r2]
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	0011      	movs	r1, r2
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7fc f8ec 	bl	80008cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046f4:	e003      	b.n	80046fe <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff faa3 	bl	8003c44 <HAL_UART_RxHalfCpltCallback>
}
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	46bd      	mov	sp, r7
 8004702:	b004      	add	sp, #16
 8004704:	bd80      	pop	{r7, pc}

08004706 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b086      	sub	sp, #24
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2288      	movs	r2, #136	@ 0x88
 8004718:	589b      	ldr	r3, [r3, r2]
 800471a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	228c      	movs	r2, #140	@ 0x8c
 8004720:	589b      	ldr	r3, [r3, r2]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2280      	movs	r2, #128	@ 0x80
 800472c:	4013      	ands	r3, r2
 800472e:	2b80      	cmp	r3, #128	@ 0x80
 8004730:	d10a      	bne.n	8004748 <UART_DMAError+0x42>
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b21      	cmp	r3, #33	@ 0x21
 8004736:	d107      	bne.n	8004748 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2256      	movs	r2, #86	@ 0x56
 800473c:	2100      	movs	r1, #0
 800473e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	0018      	movs	r0, r3
 8004744:	f7ff fe80 	bl	8004448 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2240      	movs	r2, #64	@ 0x40
 8004750:	4013      	ands	r3, r2
 8004752:	2b40      	cmp	r3, #64	@ 0x40
 8004754:	d10a      	bne.n	800476c <UART_DMAError+0x66>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b22      	cmp	r3, #34	@ 0x22
 800475a:	d107      	bne.n	800476c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	225e      	movs	r2, #94	@ 0x5e
 8004760:	2100      	movs	r1, #0
 8004762:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff feae 	bl	80044c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	2290      	movs	r2, #144	@ 0x90
 8004770:	589b      	ldr	r3, [r3, r2]
 8004772:	2210      	movs	r2, #16
 8004774:	431a      	orrs	r2, r3
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2190      	movs	r1, #144	@ 0x90
 800477a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff fa68 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004784:	46c0      	nop			@ (mov r8, r8)
 8004786:	46bd      	mov	sp, r7
 8004788:	b006      	add	sp, #24
 800478a:	bd80      	pop	{r7, pc}

0800478c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	225e      	movs	r2, #94	@ 0x5e
 800479e:	2100      	movs	r1, #0
 80047a0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2256      	movs	r2, #86	@ 0x56
 80047a6:	2100      	movs	r1, #0
 80047a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7ff fa51 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b004      	add	sp, #16
 80047b8:	bd80      	pop	{r7, pc}

080047ba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b08a      	sub	sp, #40	@ 0x28
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2288      	movs	r2, #136	@ 0x88
 80047c6:	589b      	ldr	r3, [r3, r2]
 80047c8:	2b21      	cmp	r3, #33	@ 0x21
 80047ca:	d14c      	bne.n	8004866 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2256      	movs	r2, #86	@ 0x56
 80047d0:	5a9b      	ldrh	r3, [r3, r2]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d132      	bne.n	800483e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047d8:	f3ef 8310 	mrs	r3, PRIMASK
 80047dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80047de:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e2:	2301      	movs	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f383 8810 	msr	PRIMASK, r3
}
 80047ec:	46c0      	nop			@ (mov r8, r8)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2180      	movs	r1, #128	@ 0x80
 80047fa:	438a      	bics	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f383 8810 	msr	PRIMASK, r3
}
 8004808:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800480a:	f3ef 8310 	mrs	r3, PRIMASK
 800480e:	617b      	str	r3, [r7, #20]
  return(result);
 8004810:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004812:	623b      	str	r3, [r7, #32]
 8004814:	2301      	movs	r3, #1
 8004816:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2140      	movs	r1, #64	@ 0x40
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f383 8810 	msr	PRIMASK, r3
}
 800483a:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800483c:	e013      	b.n	8004866 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2256      	movs	r2, #86	@ 0x56
 8004858:	5a9b      	ldrh	r3, [r3, r2]
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b299      	uxth	r1, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2256      	movs	r2, #86	@ 0x56
 8004864:	5299      	strh	r1, [r3, r2]
}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	46bd      	mov	sp, r7
 800486a:	b00a      	add	sp, #40	@ 0x28
 800486c:	bd80      	pop	{r7, pc}

0800486e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b08c      	sub	sp, #48	@ 0x30
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2288      	movs	r2, #136	@ 0x88
 800487a:	589b      	ldr	r3, [r3, r2]
 800487c:	2b21      	cmp	r3, #33	@ 0x21
 800487e:	d151      	bne.n	8004924 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2256      	movs	r2, #86	@ 0x56
 8004884:	5a9b      	ldrh	r3, [r3, r2]
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d132      	bne.n	80048f2 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800488c:	f3ef 8310 	mrs	r3, PRIMASK
 8004890:	60fb      	str	r3, [r7, #12]
  return(result);
 8004892:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004896:	2301      	movs	r3, #1
 8004898:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f383 8810 	msr	PRIMASK, r3
}
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2180      	movs	r1, #128	@ 0x80
 80048ae:	438a      	bics	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048be:	f3ef 8310 	mrs	r3, PRIMASK
 80048c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80048c4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c8:	2301      	movs	r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2140      	movs	r1, #64	@ 0x40
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f383 8810 	msr	PRIMASK, r3
}
 80048ee:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80048f0:	e018      	b.n	8004924 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80048f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	001a      	movs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	05d2      	lsls	r2, r2, #23
 8004904:	0dd2      	lsrs	r2, r2, #23
 8004906:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800490c:	1c9a      	adds	r2, r3, #2
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2256      	movs	r2, #86	@ 0x56
 8004916:	5a9b      	ldrh	r3, [r3, r2]
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b299      	uxth	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2256      	movs	r2, #86	@ 0x56
 8004922:	5299      	strh	r1, [r3, r2]
}
 8004924:	46c0      	nop			@ (mov r8, r8)
 8004926:	46bd      	mov	sp, r7
 8004928:	b00c      	add	sp, #48	@ 0x30
 800492a:	bd80      	pop	{r7, pc}

0800492c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08c      	sub	sp, #48	@ 0x30
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2288      	movs	r2, #136	@ 0x88
 8004938:	589b      	ldr	r3, [r3, r2]
 800493a:	2b21      	cmp	r3, #33	@ 0x21
 800493c:	d165      	bne.n	8004a0a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800493e:	232e      	movs	r3, #46	@ 0x2e
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	216a      	movs	r1, #106	@ 0x6a
 8004946:	5a52      	ldrh	r2, [r2, r1]
 8004948:	801a      	strh	r2, [r3, #0]
 800494a:	e059      	b.n	8004a00 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2256      	movs	r2, #86	@ 0x56
 8004950:	5a9b      	ldrh	r3, [r3, r2]
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d133      	bne.n	80049c0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004958:	f3ef 8310 	mrs	r3, PRIMASK
 800495c:	60fb      	str	r3, [r7, #12]
  return(result);
 800495e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004962:	2301      	movs	r3, #1
 8004964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f383 8810 	msr	PRIMASK, r3
}
 800496c:	46c0      	nop			@ (mov r8, r8)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4926      	ldr	r1, [pc, #152]	@ (8004a14 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800497a:	400a      	ands	r2, r1
 800497c:	609a      	str	r2, [r3, #8]
 800497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004980:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f383 8810 	msr	PRIMASK, r3
}
 8004988:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800498a:	f3ef 8310 	mrs	r3, PRIMASK
 800498e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004990:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
 8004994:	2301      	movs	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f383 8810 	msr	PRIMASK, r3
}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2140      	movs	r1, #64	@ 0x40
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	f383 8810 	msr	PRIMASK, r3
}
 80049ba:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80049bc:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80049be:	e024      	b.n	8004a0a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	2280      	movs	r2, #128	@ 0x80
 80049c8:	4013      	ands	r3, r2
 80049ca:	d013      	beq.n	80049f4 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d0:	781a      	ldrb	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2256      	movs	r2, #86	@ 0x56
 80049e6:	5a9b      	ldrh	r3, [r3, r2]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b299      	uxth	r1, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2256      	movs	r2, #86	@ 0x56
 80049f2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80049f4:	212e      	movs	r1, #46	@ 0x2e
 80049f6:	187b      	adds	r3, r7, r1
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	3a01      	subs	r2, #1
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	232e      	movs	r3, #46	@ 0x2e
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1a0      	bne.n	800494c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b00c      	add	sp, #48	@ 0x30
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	ff7fffff 	.word	0xff7fffff

08004a18 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08c      	sub	sp, #48	@ 0x30
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2288      	movs	r2, #136	@ 0x88
 8004a24:	589b      	ldr	r3, [r3, r2]
 8004a26:	2b21      	cmp	r3, #33	@ 0x21
 8004a28:	d16a      	bne.n	8004b00 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004a2a:	232e      	movs	r3, #46	@ 0x2e
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	216a      	movs	r1, #106	@ 0x6a
 8004a32:	5a52      	ldrh	r2, [r2, r1]
 8004a34:	801a      	strh	r2, [r3, #0]
 8004a36:	e05e      	b.n	8004af6 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2256      	movs	r2, #86	@ 0x56
 8004a3c:	5a9b      	ldrh	r3, [r3, r2]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d133      	bne.n	8004aac <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a44:	f3ef 8310 	mrs	r3, PRIMASK
 8004a48:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a4e:	2301      	movs	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f383 8810 	msr	PRIMASK, r3
}
 8004a58:	46c0      	nop			@ (mov r8, r8)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4928      	ldr	r1, [pc, #160]	@ (8004b08 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8004a66:	400a      	ands	r2, r1
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f383 8810 	msr	PRIMASK, r3
}
 8004a74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a76:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7a:	617b      	str	r3, [r7, #20]
  return(result);
 8004a7c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a7e:	623b      	str	r3, [r7, #32]
 8004a80:	2301      	movs	r3, #1
 8004a82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f383 8810 	msr	PRIMASK, r3
}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2140      	movs	r1, #64	@ 0x40
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004aa8:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004aaa:	e029      	b.n	8004b00 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	2280      	movs	r2, #128	@ 0x80
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d018      	beq.n	8004aea <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	05d2      	lsls	r2, r2, #23
 8004aca:	0dd2      	lsrs	r2, r2, #23
 8004acc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad2:	1c9a      	adds	r2, r3, #2
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2256      	movs	r2, #86	@ 0x56
 8004adc:	5a9b      	ldrh	r3, [r3, r2]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b299      	uxth	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2256      	movs	r2, #86	@ 0x56
 8004ae8:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004aea:	212e      	movs	r1, #46	@ 0x2e
 8004aec:	187b      	adds	r3, r7, r1
 8004aee:	881a      	ldrh	r2, [r3, #0]
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	3a01      	subs	r2, #1
 8004af4:	801a      	strh	r2, [r3, #0]
 8004af6:	232e      	movs	r3, #46	@ 0x2e
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d19b      	bne.n	8004a38 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004b00:	46c0      	nop			@ (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b00c      	add	sp, #48	@ 0x30
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	ff7fffff 	.word	0xff7fffff

08004b0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b14:	f3ef 8310 	mrs	r3, PRIMASK
 8004b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	2301      	movs	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f383 8810 	msr	PRIMASK, r3
}
 8004b28:	46c0      	nop			@ (mov r8, r8)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2140      	movs	r1, #64	@ 0x40
 8004b36:	438a      	bics	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2288      	movs	r2, #136	@ 0x88
 8004b4a:	2120      	movs	r1, #32
 8004b4c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f7fb ff62 	bl	8000a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b006      	add	sp, #24
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e05d      	b.n	8004c38 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2288      	movs	r2, #136	@ 0x88
 8004b80:	589b      	ldr	r3, [r3, r2]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d107      	bne.n	8004b96 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2284      	movs	r2, #132	@ 0x84
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fc fc2f 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2288      	movs	r2, #136	@ 0x88
 8004b9a:	2124      	movs	r1, #36	@ 0x24
 8004b9c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2101      	movs	r1, #1
 8004baa:	438a      	bics	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7ff f9d1 	bl	8003f60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7ff f84f 	bl	8003c64 <UART_SetConfig>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e033      	b.n	8004c38 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2180      	movs	r1, #128	@ 0x80
 8004bdc:	01c9      	lsls	r1, r1, #7
 8004bde:	430a      	orrs	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a15      	ldr	r2, [pc, #84]	@ (8004c40 <HAL_RS485Ex_Init+0xdc>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	055b      	lsls	r3, r3, #21
 8004bfc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c44 <HAL_RS485Ex_Init+0xe0>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2101      	movs	r1, #1
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7ff fa49 	bl	80040c8 <UART_CheckIdleState>
 8004c36:	0003      	movs	r3, r0
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b006      	add	sp, #24
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	ffff7fff 	.word	0xffff7fff
 8004c44:	fc00ffff 	.word	0xfc00ffff

08004c48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c50:	46c0      	nop			@ (mov r8, r8)
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b002      	add	sp, #8
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c60:	46c0      	nop			@ (mov r8, r8)
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b002      	add	sp, #8
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c70:	46c0      	nop			@ (mov r8, r8)
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b002      	add	sp, #8
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2284      	movs	r2, #132	@ 0x84
 8004c84:	5c9b      	ldrb	r3, [r3, r2]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_UARTEx_DisableFifoMode+0x16>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e027      	b.n	8004cde <HAL_UARTEx_DisableFifoMode+0x66>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2284      	movs	r2, #132	@ 0x84
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2288      	movs	r2, #136	@ 0x88
 8004c9a:	2124      	movs	r1, #36	@ 0x24
 8004c9c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	438a      	bics	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ce8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2288      	movs	r2, #136	@ 0x88
 8004cd0:	2120      	movs	r1, #32
 8004cd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2284      	movs	r2, #132	@ 0x84
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b004      	add	sp, #16
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			@ (mov r8, r8)
 8004ce8:	dfffffff 	.word	0xdfffffff

08004cec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2284      	movs	r2, #132	@ 0x84
 8004cfa:	5c9b      	ldrb	r3, [r3, r2]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e02e      	b.n	8004d62 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2284      	movs	r2, #132	@ 0x84
 8004d08:	2101      	movs	r1, #1
 8004d0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2288      	movs	r2, #136	@ 0x88
 8004d10:	2124      	movs	r1, #36	@ 0x24
 8004d12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2101      	movs	r1, #1
 8004d28:	438a      	bics	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	08d9      	lsrs	r1, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	0018      	movs	r0, r3
 8004d44:	f000 f8bc 	bl	8004ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2288      	movs	r2, #136	@ 0x88
 8004d54:	2120      	movs	r1, #32
 8004d56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2284      	movs	r2, #132	@ 0x84
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2284      	movs	r2, #132	@ 0x84
 8004d7a:	5c9b      	ldrb	r3, [r3, r2]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e02f      	b.n	8004de4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2284      	movs	r2, #132	@ 0x84
 8004d88:	2101      	movs	r1, #1
 8004d8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2288      	movs	r2, #136	@ 0x88
 8004d90:	2124      	movs	r1, #36	@ 0x24
 8004d92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2101      	movs	r1, #1
 8004da8:	438a      	bics	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	4a0e      	ldr	r2, [pc, #56]	@ (8004dec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	0019      	movs	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f000 f87b 	bl	8004ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2288      	movs	r2, #136	@ 0x88
 8004dd6:	2120      	movs	r1, #32
 8004dd8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2284      	movs	r2, #132	@ 0x84
 8004dde:	2100      	movs	r1, #0
 8004de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b004      	add	sp, #16
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	f1ffffff 	.word	0xf1ffffff

08004df0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004df0:	b5b0      	push	{r4, r5, r7, lr}
 8004df2:	b08a      	sub	sp, #40	@ 0x28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	1dbb      	adds	r3, r7, #6
 8004dfc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	228c      	movs	r2, #140	@ 0x8c
 8004e02:	589b      	ldr	r3, [r3, r2]
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d156      	bne.n	8004eb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004e0e:	1dbb      	adds	r3, r7, #6
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e04e      	b.n	8004eb8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	2380      	movs	r3, #128	@ 0x80
 8004e20:	015b      	lsls	r3, r3, #5
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d109      	bne.n	8004e3a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d105      	bne.n	8004e3a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2201      	movs	r2, #1
 8004e32:	4013      	ands	r3, r2
 8004e34:	d001      	beq.n	8004e3a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e03e      	b.n	8004eb8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004e46:	2527      	movs	r5, #39	@ 0x27
 8004e48:	197c      	adds	r4, r7, r5
 8004e4a:	1dbb      	adds	r3, r7, #6
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	0018      	movs	r0, r3
 8004e54:	f7ff fa52 	bl	80042fc <UART_Start_Receive_DMA>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004e5c:	197b      	adds	r3, r7, r5
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d124      	bne.n	8004eae <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d11c      	bne.n	8004ea6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2210      	movs	r2, #16
 8004e72:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e74:	f3ef 8310 	mrs	r3, PRIMASK
 8004e78:	617b      	str	r3, [r7, #20]
  return(result);
 8004e7a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	2301      	movs	r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f383 8810 	msr	PRIMASK, r3
}
 8004e88:	46c0      	nop			@ (mov r8, r8)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2110      	movs	r1, #16
 8004e96:	430a      	orrs	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f383 8810 	msr	PRIMASK, r3
}
 8004ea4:	e003      	b.n	8004eae <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004ea6:	2327      	movs	r3, #39	@ 0x27
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004eae:	2327      	movs	r3, #39	@ 0x27
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	e000      	b.n	8004eb8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b00a      	add	sp, #40	@ 0x28
 8004ebe:	bdb0      	pop	{r4, r5, r7, pc}

08004ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d108      	bne.n	8004ee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	226a      	movs	r2, #106	@ 0x6a
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2268      	movs	r2, #104	@ 0x68
 8004edc:	2101      	movs	r1, #1
 8004ede:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ee0:	e043      	b.n	8004f6a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ee2:	260f      	movs	r6, #15
 8004ee4:	19bb      	adds	r3, r7, r6
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eea:	200e      	movs	r0, #14
 8004eec:	183b      	adds	r3, r7, r0
 8004eee:	2208      	movs	r2, #8
 8004ef0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	0e5b      	lsrs	r3, r3, #25
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	240d      	movs	r4, #13
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	2107      	movs	r1, #7
 8004f02:	400a      	ands	r2, r1
 8004f04:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	0f5b      	lsrs	r3, r3, #29
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	250c      	movs	r5, #12
 8004f12:	197b      	adds	r3, r7, r5
 8004f14:	2107      	movs	r1, #7
 8004f16:	400a      	ands	r2, r1
 8004f18:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f1a:	183b      	adds	r3, r7, r0
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	197a      	adds	r2, r7, r5
 8004f20:	7812      	ldrb	r2, [r2, #0]
 8004f22:	4914      	ldr	r1, [pc, #80]	@ (8004f74 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f24:	5c8a      	ldrb	r2, [r1, r2]
 8004f26:	435a      	muls	r2, r3
 8004f28:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f2a:	197b      	adds	r3, r7, r5
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	4a12      	ldr	r2, [pc, #72]	@ (8004f78 <UARTEx_SetNbDataToProcess+0xb8>)
 8004f30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f32:	0019      	movs	r1, r3
 8004f34:	f7fb f972 	bl	800021c <__divsi3>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	b299      	uxth	r1, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	226a      	movs	r2, #106	@ 0x6a
 8004f40:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f42:	19bb      	adds	r3, r7, r6
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	193a      	adds	r2, r7, r4
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	490a      	ldr	r1, [pc, #40]	@ (8004f74 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f4c:	5c8a      	ldrb	r2, [r1, r2]
 8004f4e:	435a      	muls	r2, r3
 8004f50:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f52:	193b      	adds	r3, r7, r4
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	4a08      	ldr	r2, [pc, #32]	@ (8004f78 <UARTEx_SetNbDataToProcess+0xb8>)
 8004f58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	f7fb f95e 	bl	800021c <__divsi3>
 8004f60:	0003      	movs	r3, r0
 8004f62:	b299      	uxth	r1, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2268      	movs	r2, #104	@ 0x68
 8004f68:	5299      	strh	r1, [r3, r2]
}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b005      	add	sp, #20
 8004f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	080052c8 	.word	0x080052c8
 8004f78:	080052d0 	.word	0x080052d0

08004f7c <memset>:
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	1882      	adds	r2, r0, r2
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d100      	bne.n	8004f86 <memset+0xa>
 8004f84:	4770      	bx	lr
 8004f86:	7019      	strb	r1, [r3, #0]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	e7f9      	b.n	8004f80 <memset+0x4>

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	2600      	movs	r6, #0
 8004f90:	4c0c      	ldr	r4, [pc, #48]	@ (8004fc4 <__libc_init_array+0x38>)
 8004f92:	4d0d      	ldr	r5, [pc, #52]	@ (8004fc8 <__libc_init_array+0x3c>)
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	2600      	movs	r6, #0
 8004f9e:	f000 f823 	bl	8004fe8 <_init>
 8004fa2:	4c0a      	ldr	r4, [pc, #40]	@ (8004fcc <__libc_init_array+0x40>)
 8004fa4:	4d0a      	ldr	r5, [pc, #40]	@ (8004fd0 <__libc_init_array+0x44>)
 8004fa6:	1b64      	subs	r4, r4, r5
 8004fa8:	10a4      	asrs	r4, r4, #2
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	00b3      	lsls	r3, r6, #2
 8004fb2:	58eb      	ldr	r3, [r5, r3]
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	00b3      	lsls	r3, r6, #2
 8004fbc:	58eb      	ldr	r3, [r5, r3]
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	080052d8 	.word	0x080052d8
 8004fc8:	080052d8 	.word	0x080052d8
 8004fcc:	080052dc 	.word	0x080052dc
 8004fd0:	080052d8 	.word	0x080052d8

08004fd4 <memcpy>:
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	b510      	push	{r4, lr}
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d100      	bne.n	8004fde <memcpy+0xa>
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	5ccc      	ldrb	r4, [r1, r3]
 8004fe0:	54c4      	strb	r4, [r0, r3]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	e7f8      	b.n	8004fd8 <memcpy+0x4>
	...

08004fe8 <_init>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	46c0      	nop			@ (mov r8, r8)
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr

08004ff4 <_fini>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr
