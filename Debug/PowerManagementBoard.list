
PowerManagementBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005578  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08005638  08005638  00006638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058fc  080058fc  000070a8  2**0
                  CONTENTS
  4 .ARM          00000000  080058fc  080058fc  000070a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058fc  080058fc  000070a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058fc  080058fc  000068fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005900  08005900  00006900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08005904  00007000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000003a0  200000a8  080059ac  000070a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  080059ac  00007448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d414  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002660  00000000  00000000  000144e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00016b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081b  00000000  00000000  000175c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151ce  00000000  00000000  00017ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de9b  00000000  00000000  0002cfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081188  00000000  00000000  0003ae44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbfcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000243c  00000000  00000000  000bc010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000be44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a8 	.word	0x200000a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800560c 	.word	0x0800560c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ac 	.word	0x200000ac
 8000104:	0800560c 	.word	0x0800560c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 80003fa:	1dfb      	adds	r3, r7, #7
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 8000400:	1cbb      	adds	r3, r7, #2
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000406:	f001 fb00 	bl	8001a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040a:	f000 fa23 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040e:	f000 fad5 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000412:	f000 faad 	bl	8000970 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000416:	f000 fa5b 	bl	80008d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  EE_Init(&prev_gpio_state, sizeof(uint8_t));
 800041a:	4bc2      	ldr	r3, [pc, #776]	@ (8000724 <main+0x330>)
 800041c:	2101      	movs	r1, #1
 800041e:	0018      	movs	r0, r3
 8000420:	f004 ff70 	bl	8005304 <EE_Init>
  EE_Read();
 8000424:	f004 ffda 	bl	80053dc <EE_Read>

  if(modbus_set_rx() != HAL_OK)
 8000428:	f000 ff1a 	bl	8001260 <modbus_set_rx>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <main+0x40>
  {
	  Error_Handler();
 8000430:	f000 fb42 	bl	8000ab8 <Error_Handler>
  }
  wdg_time = 0;
 8000434:	4bbc      	ldr	r3, [pc, #752]	@ (8000728 <main+0x334>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
  shutdown = 0;
 800043a:	4bbc      	ldr	r3, [pc, #752]	@ (800072c <main+0x338>)
 800043c:	2200      	movs	r2, #0
 800043e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(MANUAL_GPIO_Port, MANUAL_Pin) == GPIO_PIN_SET)
 8000440:	4bbb      	ldr	r3, [pc, #748]	@ (8000730 <main+0x33c>)
 8000442:	2140      	movs	r1, #64	@ 0x40
 8000444:	0018      	movs	r0, r3
 8000446:	f002 fc2b 	bl	8002ca0 <HAL_GPIO_ReadPin>
 800044a:	0003      	movs	r3, r0
 800044c:	2b01      	cmp	r3, #1
 800044e:	d000      	beq.n	8000452 <main+0x5e>
 8000450:	e1d2      	b.n	80007f8 <main+0x404>
	  {
		  if(shutdown)
 8000452:	4bb6      	ldr	r3, [pc, #728]	@ (800072c <main+0x338>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d042      	beq.n	80004e0 <main+0xec>
		  {
			  // Set all GPIO pins to previous_state
			  if((prev_gpio_state & RELAY_120_MASK) != 0)
 800045a:	4bb2      	ldr	r3, [pc, #712]	@ (8000724 <main+0x330>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	001a      	movs	r2, r3
 8000460:	2301      	movs	r3, #1
 8000462:	4013      	ands	r3, r2
 8000464:	d006      	beq.n	8000474 <main+0x80>
			  {
				  HAL_GPIO_WritePin(RELAY_120_GPIO_Port, RELAY_120_Pin, GPIO_PIN_SET);
 8000466:	2380      	movs	r3, #128	@ 0x80
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	48b1      	ldr	r0, [pc, #708]	@ (8000730 <main+0x33c>)
 800046c:	2201      	movs	r2, #1
 800046e:	0019      	movs	r1, r3
 8000470:	f002 fc33 	bl	8002cda <HAL_GPIO_WritePin>
			  }
			  HAL_Delay(1000);
 8000474:	23fa      	movs	r3, #250	@ 0xfa
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	0018      	movs	r0, r3
 800047a:	f001 fb43 	bl	8001b04 <HAL_Delay>
			  if((prev_gpio_state & RELAY_480_MASK) != 0)
 800047e:	4ba9      	ldr	r3, [pc, #676]	@ (8000724 <main+0x330>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	001a      	movs	r2, r3
 8000484:	2302      	movs	r3, #2
 8000486:	4013      	ands	r3, r2
 8000488:	d005      	beq.n	8000496 <main+0xa2>
			  {
				  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, GPIO_PIN_SET);
 800048a:	4ba9      	ldr	r3, [pc, #676]	@ (8000730 <main+0x33c>)
 800048c:	2201      	movs	r2, #1
 800048e:	2180      	movs	r1, #128	@ 0x80
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fc22 	bl	8002cda <HAL_GPIO_WritePin>
			  }
			  wdg_time = HAL_GetTick();
 8000496:	f001 fb2b 	bl	8001af0 <HAL_GetTick>
 800049a:	0002      	movs	r2, r0
 800049c:	4ba2      	ldr	r3, [pc, #648]	@ (8000728 <main+0x334>)
 800049e:	601a      	str	r2, [r3, #0]

			  // Carry the pin changes to the register database
			  holding_register_database[GPIO_WRITE] = prev_gpio_state;
 80004a0:	4ba0      	ldr	r3, [pc, #640]	@ (8000724 <main+0x330>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	001a      	movs	r2, r3
 80004a6:	4ba3      	ldr	r3, [pc, #652]	@ (8000734 <main+0x340>)
 80004a8:	819a      	strh	r2, [r3, #12]

			  // Restart the Modbus
			  modbus_status = modbus_startup();
 80004aa:	1dfc      	adds	r4, r7, #7
 80004ac:	f000 ff64 	bl	8001378 <modbus_startup>
 80004b0:	0003      	movs	r3, r0
 80004b2:	7023      	strb	r3, [r4, #0]
			  if(modbus_status != 0)
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b25b      	sxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00d      	beq.n	80004da <main+0xe6>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 80004be:	4b9d      	ldr	r3, [pc, #628]	@ (8000734 <main+0x340>)
 80004c0:	891a      	ldrh	r2, [r3, #8]
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	3307      	adds	r3, #7
 80004ca:	2101      	movs	r1, #1
 80004cc:	4099      	lsls	r1, r3
 80004ce:	000b      	movs	r3, r1
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	4313      	orrs	r3, r2
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	4b97      	ldr	r3, [pc, #604]	@ (8000734 <main+0x340>)
 80004d8:	811a      	strh	r2, [r3, #8]
			  }

			  // Ensure this code only executes once
			  shutdown = 0;
 80004da:	4b94      	ldr	r3, [pc, #592]	@ (800072c <main+0x338>)
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
		  }
		  // Update the GPIO_READ register
		  GPIO_PinState estop_sense = HAL_GPIO_ReadPin(ESTOP_SENSE_GPIO_Port, ESTOP_SENSE_Pin);
 80004e0:	1d3c      	adds	r4, r7, #4
 80004e2:	2380      	movs	r3, #128	@ 0x80
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4a92      	ldr	r2, [pc, #584]	@ (8000730 <main+0x33c>)
 80004e8:	0019      	movs	r1, r3
 80004ea:	0010      	movs	r0, r2
 80004ec:	f002 fbd8 	bl	8002ca0 <HAL_GPIO_ReadPin>
 80004f0:	0003      	movs	r3, r0
 80004f2:	7023      	strb	r3, [r4, #0]
		  GPIO_PinState sense_120 = HAL_GPIO_ReadPin(SENSE_120_GPIO_Port, SENSE_120_Pin);
 80004f4:	1cfc      	adds	r4, r7, #3
 80004f6:	2380      	movs	r3, #128	@ 0x80
 80004f8:	021b      	lsls	r3, r3, #8
 80004fa:	4a8d      	ldr	r2, [pc, #564]	@ (8000730 <main+0x33c>)
 80004fc:	0019      	movs	r1, r3
 80004fe:	0010      	movs	r0, r2
 8000500:	f002 fbce 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8000504:	0003      	movs	r3, r0
 8000506:	7023      	strb	r3, [r4, #0]

		  holding_register_database[GPIO_READ] = ((estop_sense << ESTOP_SENSE_POS) | (sense_120 << SENSE_120_POS));
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	b21a      	sxth	r2, r3
 800050e:	1cfb      	adds	r3, r7, #3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	b21b      	sxth	r3, r3
 8000516:	4313      	orrs	r3, r2
 8000518:	b21b      	sxth	r3, r3
 800051a:	b29a      	uxth	r2, r3
 800051c:	4b85      	ldr	r3, [pc, #532]	@ (8000734 <main+0x340>)
 800051e:	815a      	strh	r2, [r3, #10]

		  // Handle adjustment of the GPIO_WRITE pins
		  if(prev_gpio_state != holding_register_database[GPIO_WRITE])
 8000520:	4b80      	ldr	r3, [pc, #512]	@ (8000724 <main+0x330>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	001a      	movs	r2, r3
 8000526:	4b83      	ldr	r3, [pc, #524]	@ (8000734 <main+0x340>)
 8000528:	899b      	ldrh	r3, [r3, #12]
 800052a:	429a      	cmp	r2, r3
 800052c:	d034      	beq.n	8000598 <main+0x1a4>
		  {
			  if((prev_gpio_state & RELAY_120_MASK) != (holding_register_database[GPIO_WRITE] & RELAY_120_MASK))
 800052e:	4b7d      	ldr	r3, [pc, #500]	@ (8000724 <main+0x330>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	001a      	movs	r2, r3
 8000534:	4b7f      	ldr	r3, [pc, #508]	@ (8000734 <main+0x340>)
 8000536:	899b      	ldrh	r3, [r3, #12]
 8000538:	4053      	eors	r3, r2
 800053a:	2201      	movs	r2, #1
 800053c:	4013      	ands	r3, r2
 800053e:	d00b      	beq.n	8000558 <main+0x164>
			  {
				  HAL_GPIO_WritePin(RELAY_120_GPIO_Port, RELAY_120_Pin, (holding_register_database[GPIO_WRITE] & RELAY_120_MASK));
 8000540:	4b7c      	ldr	r3, [pc, #496]	@ (8000734 <main+0x340>)
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2201      	movs	r2, #1
 8000548:	4013      	ands	r3, r2
 800054a:	b2da      	uxtb	r2, r3
 800054c:	2380      	movs	r3, #128	@ 0x80
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4877      	ldr	r0, [pc, #476]	@ (8000730 <main+0x33c>)
 8000552:	0019      	movs	r1, r3
 8000554:	f002 fbc1 	bl	8002cda <HAL_GPIO_WritePin>
			  }
			  if((prev_gpio_state & RELAY_480_MASK) != (holding_register_database[GPIO_WRITE] & RELAY_480_MASK))
 8000558:	4b72      	ldr	r3, [pc, #456]	@ (8000724 <main+0x330>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	001a      	movs	r2, r3
 800055e:	4b75      	ldr	r3, [pc, #468]	@ (8000734 <main+0x340>)
 8000560:	899b      	ldrh	r3, [r3, #12]
 8000562:	4053      	eors	r3, r2
 8000564:	2202      	movs	r2, #2
 8000566:	4013      	ands	r3, r2
 8000568:	d00a      	beq.n	8000580 <main+0x18c>
			  {
				  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, (holding_register_database[GPIO_WRITE] & RELAY_480_MASK));
 800056a:	4b72      	ldr	r3, [pc, #456]	@ (8000734 <main+0x340>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2202      	movs	r2, #2
 8000572:	4013      	ands	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	486e      	ldr	r0, [pc, #440]	@ (8000730 <main+0x33c>)
 8000578:	001a      	movs	r2, r3
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	f002 fbad 	bl	8002cda <HAL_GPIO_WritePin>
			  }
			  prev_gpio_state = holding_register_database[GPIO_WRITE];
 8000580:	4b6c      	ldr	r3, [pc, #432]	@ (8000734 <main+0x340>)
 8000582:	899b      	ldrh	r3, [r3, #12]
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b67      	ldr	r3, [pc, #412]	@ (8000724 <main+0x330>)
 8000588:	701a      	strb	r2, [r3, #0]
			  EE_Write();
 800058a:	f004 ff69 	bl	8005460 <EE_Write>
			  wdg_time = HAL_GetTick();
 800058e:	f001 faaf 	bl	8001af0 <HAL_GetTick>
 8000592:	0002      	movs	r2, r0
 8000594:	4b64      	ldr	r3, [pc, #400]	@ (8000728 <main+0x334>)
 8000596:	601a      	str	r2, [r3, #0]
		  }

		  // Handle Watchdog Timeout
		  if(HAL_GetTick() - wdg_time > (uint32_t)(holding_register_database[WDG_TIMEOUT]))
 8000598:	f001 faaa 	bl	8001af0 <HAL_GetTick>
 800059c:	0002      	movs	r2, r0
 800059e:	4b62      	ldr	r3, [pc, #392]	@ (8000728 <main+0x334>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	4a63      	ldr	r2, [pc, #396]	@ (8000734 <main+0x340>)
 80005a6:	89d2      	ldrh	r2, [r2, #14]
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d914      	bls.n	80005d6 <main+0x1e2>
		  {
			  // Turn off the TBM
			  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, GPIO_PIN_RESET);
 80005ac:	4b60      	ldr	r3, [pc, #384]	@ (8000730 <main+0x33c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	2180      	movs	r1, #128	@ 0x80
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 fb91 	bl	8002cda <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(RELAY_120_GPIO_Port, RELAY_120_Pin, GPIO_PIN_RESET);
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	485c      	ldr	r0, [pc, #368]	@ (8000730 <main+0x33c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	0019      	movs	r1, r3
 80005c2:	f002 fb8a 	bl	8002cda <HAL_GPIO_WritePin>

			  // Update the holding register database
			  holding_register_database[GPIO_WRITE] = 0;
 80005c6:	4b5b      	ldr	r3, [pc, #364]	@ (8000734 <main+0x340>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	819a      	strh	r2, [r3, #12]
			  prev_gpio_state = 0;
 80005cc:	4b55      	ldr	r3, [pc, #340]	@ (8000724 <main+0x330>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
			  EE_Write();
 80005d2:	f004 ff45 	bl	8005460 <EE_Write>
		  }

		  // Handle Modbus Communication
		  if(modbus_rx())
 80005d6:	f000 faf7 	bl	8000bc8 <modbus_rx>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d100      	bne.n	80005e0 <main+0x1ec>
 80005de:	e07e      	b.n	80006de <main+0x2ea>
		  {
			  if(get_rx_buffer(0) == holding_register_database[MODBUS_ID]) // Check Slave ID
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 ff71 	bl	80014c8 <get_rx_buffer>
 80005e6:	0003      	movs	r3, r0
 80005e8:	001a      	movs	r2, r3
 80005ea:	4b52      	ldr	r3, [pc, #328]	@ (8000734 <main+0x340>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d138      	bne.n	8000664 <main+0x270>
			  {
				  wdg_time = HAL_GetTick();
 80005f2:	f001 fa7d 	bl	8001af0 <HAL_GetTick>
 80005f6:	0002      	movs	r2, r0
 80005f8:	4b4b      	ldr	r3, [pc, #300]	@ (8000728 <main+0x334>)
 80005fa:	601a      	str	r2, [r3, #0]
				  switch(get_rx_buffer(1))
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 ff63 	bl	80014c8 <get_rx_buffer>
 8000602:	0003      	movs	r3, r0
 8000604:	2b03      	cmp	r3, #3
 8000606:	d002      	beq.n	800060e <main+0x21a>
 8000608:	2b10      	cmp	r3, #16
 800060a:	d008      	beq.n	800061e <main+0x22a>
 800060c:	e00f      	b.n	800062e <main+0x23a>
				  {
					  case 0x03:
					  {
						  // Return holding registers
						  modbus_status = return_holding_registers(&modbus_tx_len);
 800060e:	1dfc      	adds	r4, r7, #7
 8000610:	1cbb      	adds	r3, r7, #2
 8000612:	0018      	movs	r0, r3
 8000614:	f000 faea 	bl	8000bec <return_holding_registers>
 8000618:	0003      	movs	r3, r0
 800061a:	7023      	strb	r3, [r4, #0]
						  break;
 800061c:	e00e      	b.n	800063c <main+0x248>
					  }
					  case 0x10:
					  {
						  // Write holding registers
						  modbus_status = edit_multiple_registers(&modbus_tx_len);
 800061e:	1dfc      	adds	r4, r7, #7
 8000620:	1cbb      	adds	r3, r7, #2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fb8e 	bl	8000d44 <edit_multiple_registers>
 8000628:	0003      	movs	r3, r0
 800062a:	7023      	strb	r3, [r4, #0]
						  break;
 800062c:	e006      	b.n	800063c <main+0x248>
					  }
					  default:
					  {
						  modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 800062e:	1dfc      	adds	r4, r7, #7
 8000630:	2004      	movs	r0, #4
 8000632:	f000 fc8b 	bl	8000f4c <modbus_exception>
 8000636:	0003      	movs	r3, r0
 8000638:	7023      	strb	r3, [r4, #0]
						  break;
 800063a:	46c0      	nop			@ (mov r8, r8)
					  }
				  }
				  if(modbus_status != 0)
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b25b      	sxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d04b      	beq.n	80006de <main+0x2ea>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 8000646:	4b3b      	ldr	r3, [pc, #236]	@ (8000734 <main+0x340>)
 8000648:	891a      	ldrh	r2, [r3, #8]
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	3307      	adds	r3, #7
 8000652:	2101      	movs	r1, #1
 8000654:	4099      	lsls	r1, r3
 8000656:	000b      	movs	r3, r1
 8000658:	b29b      	uxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <main+0x340>)
 8000660:	811a      	strh	r2, [r3, #8]
 8000662:	e03c      	b.n	80006de <main+0x2ea>
				  }
			  }
			  // Special case where you retrieve the modbus ID
			  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000664:	2000      	movs	r0, #0
 8000666:	f000 ff2f 	bl	80014c8 <get_rx_buffer>
 800066a:	0003      	movs	r3, r0
 800066c:	2bff      	cmp	r3, #255	@ 0xff
 800066e:	d136      	bne.n	80006de <main+0x2ea>
				(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000670:	2001      	movs	r0, #1
 8000672:	f000 ff29 	bl	80014c8 <get_rx_buffer>
 8000676:	0003      	movs	r3, r0
			  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000678:	2b03      	cmp	r3, #3
 800067a:	d130      	bne.n	80006de <main+0x2ea>
				(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800067c:	2002      	movs	r0, #2
 800067e:	f000 ff23 	bl	80014c8 <get_rx_buffer>
 8000682:	0003      	movs	r3, r0
 8000684:	021c      	lsls	r4, r3, #8
 8000686:	2003      	movs	r0, #3
 8000688:	f000 ff1e 	bl	80014c8 <get_rx_buffer>
 800068c:	0003      	movs	r3, r0
 800068e:	4323      	orrs	r3, r4
				(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000690:	d125      	bne.n	80006de <main+0x2ea>
				(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8000692:	2004      	movs	r0, #4
 8000694:	f000 ff18 	bl	80014c8 <get_rx_buffer>
 8000698:	0003      	movs	r3, r0
 800069a:	021c      	lsls	r4, r3, #8
 800069c:	2005      	movs	r0, #5
 800069e:	f000 ff13 	bl	80014c8 <get_rx_buffer>
 80006a2:	0003      	movs	r3, r0
 80006a4:	4323      	orrs	r3, r4
				(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d119      	bne.n	80006de <main+0x2ea>
			  {
				  modbus_status = return_holding_registers(&modbus_tx_len);
 80006aa:	1dfc      	adds	r4, r7, #7
 80006ac:	1cbb      	adds	r3, r7, #2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fa9c 	bl	8000bec <return_holding_registers>
 80006b4:	0003      	movs	r3, r0
 80006b6:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d00d      	beq.n	80006de <main+0x2ea>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <main+0x340>)
 80006c4:	891a      	ldrh	r2, [r3, #8]
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	3307      	adds	r3, #7
 80006ce:	2101      	movs	r1, #1
 80006d0:	4099      	lsls	r1, r3
 80006d2:	000b      	movs	r3, r1
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <main+0x340>)
 80006dc:	811a      	strh	r2, [r3, #8]
				  }
			  }
		  }
		  modbus_status = monitor_modbus();
 80006de:	1dfc      	adds	r4, r7, #7
 80006e0:	f000 fde2 	bl	80012a8 <monitor_modbus>
 80006e4:	0003      	movs	r3, r0
 80006e6:	7023      	strb	r3, [r4, #0]
		  if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d100      	bne.n	80006f4 <main+0x300>
 80006f2:	e0a1      	b.n	8000838 <main+0x444>
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d100      	bne.n	8000700 <main+0x30c>
 80006fe:	e09b      	b.n	8000838 <main+0x444>
		  {
			  switch(modbus_status)
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	2b15      	cmp	r3, #21
 8000708:	d05d      	beq.n	80007c6 <main+0x3d2>
 800070a:	dd00      	ble.n	800070e <main+0x31a>
 800070c:	e698      	b.n	8000440 <main+0x4c>
 800070e:	2b14      	cmp	r3, #20
 8000710:	d040      	beq.n	8000794 <main+0x3a0>
 8000712:	dd00      	ble.n	8000716 <main+0x322>
 8000714:	e694      	b.n	8000440 <main+0x4c>
 8000716:	2b12      	cmp	r3, #18
 8000718:	d000      	beq.n	800071c <main+0x328>
 800071a:	e08f      	b.n	800083c <main+0x448>
			  {
				  case MB_TX_TIMEOUT:
				  {
					  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 800071c:	1dbb      	adds	r3, r7, #6
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e02f      	b.n	8000784 <main+0x390>
 8000724:	20000215 	.word	0x20000215
 8000728:	20000210 	.word	0x20000210
 800072c:	20000214 	.word	0x20000214
 8000730:	50000400 	.word	0x50000400
 8000734:	20000000 	.word	0x20000000
					  {
						  modbus_status = modbus_send(modbus_tx_len);
 8000738:	1cbb      	adds	r3, r7, #2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	1dfc      	adds	r4, r7, #7
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fcb8 	bl	80010b4 <modbus_send>
 8000744:	0003      	movs	r3, r0
 8000746:	7023      	strb	r3, [r4, #0]
						  while(monitor_modbus() == HAL_BUSY);
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	f000 fdad 	bl	80012a8 <monitor_modbus>
 800074e:	0003      	movs	r3, r0
 8000750:	2b02      	cmp	r3, #2
 8000752:	d0fa      	beq.n	800074a <main+0x356>
						  if(modbus_status != HAL_OK)
 8000754:	1dfb      	adds	r3, r7, #7
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b25b      	sxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00d      	beq.n	800077a <main+0x386>
						  {
							  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800075e:	4b3a      	ldr	r3, [pc, #232]	@ (8000848 <main+0x454>)
 8000760:	891a      	ldrh	r2, [r3, #8]
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b25b      	sxtb	r3, r3
 8000768:	3307      	adds	r3, #7
 800076a:	2101      	movs	r1, #1
 800076c:	4099      	lsls	r1, r3
 800076e:	000b      	movs	r3, r1
 8000770:	b29b      	uxth	r3, r3
 8000772:	4313      	orrs	r3, r2
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b34      	ldr	r3, [pc, #208]	@ (8000848 <main+0x454>)
 8000778:	811a      	strh	r2, [r3, #8]
					  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	1dbb      	adds	r3, r7, #6
 8000780:	3201      	adds	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b29a      	uxth	r2, r3
 800078a:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <main+0x454>)
 800078c:	88db      	ldrh	r3, [r3, #6]
 800078e:	429a      	cmp	r2, r3
 8000790:	d3d2      	bcc.n	8000738 <main+0x344>
						  }
					  }
					  break;
 8000792:	e058      	b.n	8000846 <main+0x452>
					  // Error only relates to Modbus Master Nodes
					  break;
				  }
				  case MB_UART_ERROR:
				  {
					  if(modbus_status != 0)
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b25b      	sxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d050      	beq.n	8000840 <main+0x44c>
					  {
						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800079e:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <main+0x454>)
 80007a0:	891a      	ldrh	r2, [r3, #8]
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	3307      	adds	r3, #7
 80007aa:	2101      	movs	r1, #1
 80007ac:	4099      	lsls	r1, r3
 80007ae:	000b      	movs	r3, r1
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <main+0x454>)
 80007b8:	811a      	strh	r2, [r3, #8]
					  }
					  break;
 80007ba:	e041      	b.n	8000840 <main+0x44c>
				  }
				  case MB_FATAL_ERROR:
				  {
					  while(modbus_status != HAL_OK)
					  {
						  modbus_status = modbus_reset();
 80007bc:	1dfc      	adds	r4, r7, #7
 80007be:	f000 fccf 	bl	8001160 <modbus_reset>
 80007c2:	0003      	movs	r3, r0
 80007c4:	7023      	strb	r3, [r4, #0]
					  while(modbus_status != HAL_OK)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f5      	bne.n	80007bc <main+0x3c8>
					  }
					  if(modbus_status != 0)
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d034      	beq.n	8000844 <main+0x450>
					  {
						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <main+0x454>)
 80007dc:	891a      	ldrh	r2, [r3, #8]
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	3307      	adds	r3, #7
 80007e6:	2101      	movs	r1, #1
 80007e8:	4099      	lsls	r1, r3
 80007ea:	000b      	movs	r3, r1
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <main+0x454>)
 80007f4:	811a      	strh	r2, [r3, #8]
					  }
					  break;
 80007f6:	e025      	b.n	8000844 <main+0x450>
			  }
		  }
	  }
	  else
	  {
		  if(!shutdown)
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <main+0x458>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d000      	beq.n	8000802 <main+0x40e>
 8000800:	e61e      	b.n	8000440 <main+0x4c>
		  {
			  // Shutdown the Modbus
			  int8_t status = modbus_shutdown();
 8000802:	1d7c      	adds	r4, r7, #5
 8000804:	f000 fdc6 	bl	8001394 <modbus_shutdown>
 8000808:	0003      	movs	r3, r0
 800080a:	7023      	strb	r3, [r4, #0]
			  {
				  // log error in a queue
			  }

			  // Set all GPIO pins high
			  HAL_GPIO_WritePin(RELAY_120_GPIO_Port, RELAY_120_Pin, GPIO_PIN_SET);
 800080c:	2380      	movs	r3, #128	@ 0x80
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	480f      	ldr	r0, [pc, #60]	@ (8000850 <main+0x45c>)
 8000812:	2201      	movs	r2, #1
 8000814:	0019      	movs	r1, r3
 8000816:	f002 fa60 	bl	8002cda <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 800081a:	23fa      	movs	r3, #250	@ 0xfa
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	0018      	movs	r0, r3
 8000820:	f001 f970 	bl	8001b04 <HAL_Delay>
			  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, GPIO_PIN_SET);
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <main+0x45c>)
 8000826:	2201      	movs	r2, #1
 8000828:	2180      	movs	r1, #128	@ 0x80
 800082a:	0018      	movs	r0, r3
 800082c:	f002 fa55 	bl	8002cda <HAL_GPIO_WritePin>

			  // Ensure this code only executes once
			  shutdown = 1;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <main+0x458>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e603      	b.n	8000440 <main+0x4c>
				  default:
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	e601      	b.n	8000440 <main+0x4c>
					  break;
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	e5ff      	b.n	8000440 <main+0x4c>
					  break;
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	e5fd      	b.n	8000440 <main+0x4c>
					  break;
 8000844:	46c0      	nop			@ (mov r8, r8)
	  if(HAL_GPIO_ReadPin(MANUAL_GPIO_Port, MANUAL_Pin) == GPIO_PIN_SET)
 8000846:	e5fb      	b.n	8000440 <main+0x4c>
 8000848:	20000000 	.word	0x20000000
 800084c:	20000214 	.word	0x20000214
 8000850:	50000400 	.word	0x50000400

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b08f      	sub	sp, #60	@ 0x3c
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	2418      	movs	r4, #24
 800085c:	193b      	adds	r3, r7, r4
 800085e:	0018      	movs	r0, r3
 8000860:	2320      	movs	r3, #32
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f004 fe9b 	bl	80055a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	0018      	movs	r0, r3
 800086e:	2314      	movs	r3, #20
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f004 fe94 	bl	80055a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2280      	movs	r2, #128	@ 0x80
 8000882:	0252      	lsls	r2, r2, #9
 8000884:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	193b      	adds	r3, r7, r4
 8000888:	0018      	movs	r0, r3
 800088a:	f002 fa43 	bl	8002d14 <HAL_RCC_OscConfig>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000892:	f000 f911 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2201      	movs	r2, #1
 80008a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2100      	movs	r1, #0
 80008b8:	0018      	movs	r0, r3
 80008ba:	f002 fc51 	bl	8003160 <HAL_RCC_ClockConfig>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008c2:	f000 f8f9 	bl	8000ab8 <Error_Handler>
  }
}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b00f      	add	sp, #60	@ 0x3c
 80008cc:	bd90      	pop	{r4, r7, pc}
	...

080008d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d4:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 80008d6:	4a25      	ldr	r2, [pc, #148]	@ (800096c <MX_USART1_UART_Init+0x9c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008da:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 80008dc:	2296      	movs	r2, #150	@ 0x96
 80008de:	0192      	lsls	r2, r2, #6
 80008e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000918:	4813      	ldr	r0, [pc, #76]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 800091a:	2300      	movs	r3, #0
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	f004 fae4 	bl	8004eec <HAL_RS485Ex_Init>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 f8c6 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 800092e:	2100      	movs	r1, #0
 8000930:	0018      	movs	r0, r3
 8000932:	f004 fb9f 	bl	8005074 <HAL_UARTEx_SetTxFifoThreshold>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f8bd 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 8000940:	2100      	movs	r1, #0
 8000942:	0018      	movs	r0, r3
 8000944:	f004 fbd6 	bl	80050f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800094c:	f000 f8b4 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <MX_USART1_UART_Init+0x98>)
 8000952:	0018      	movs	r0, r3
 8000954:	f004 fb54 	bl	8005000 <HAL_UARTEx_DisableFifoMode>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 800095c:	f000 f8ac 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	200000c4 	.word	0x200000c4
 800096c:	40013800 	.word	0x40013800

08000970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <MX_DMA_Init+0x48>)
 8000978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_DMA_Init+0x48>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	639a      	str	r2, [r3, #56]	@ 0x38
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <MX_DMA_Init+0x48>)
 8000984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2009      	movs	r0, #9
 8000994:	f001 f9a8 	bl	8001ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000998:	2009      	movs	r0, #9
 800099a:	f001 f9ba 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	200a      	movs	r0, #10
 80009a4:	f001 f9a0 	bl	8001ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009a8:	200a      	movs	r0, #10
 80009aa:	f001 f9b2 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	40021000 	.word	0x40021000

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08b      	sub	sp, #44	@ 0x2c
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	2414      	movs	r4, #20
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	0018      	movs	r0, r3
 80009c8:	2314      	movs	r3, #20
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f004 fde7 	bl	80055a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b37      	ldr	r3, [pc, #220]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 80009d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009d6:	4b36      	ldr	r3, [pc, #216]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 80009d8:	2104      	movs	r1, #4
 80009da:	430a      	orrs	r2, r1
 80009dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80009de:	4b34      	ldr	r3, [pc, #208]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 80009e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009e2:	2204      	movs	r2, #4
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ea:	4b31      	ldr	r3, [pc, #196]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 80009ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ee:	4b30      	ldr	r3, [pc, #192]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 80009f0:	2120      	movs	r1, #32
 80009f2:	430a      	orrs	r2, r1
 80009f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009fa:	2220      	movs	r2, #32
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a06:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a08:	2102      	movs	r1, #2
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a0e:	4b28      	ldr	r3, [pc, #160]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a12:	2202      	movs	r2, #2
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b25      	ldr	r3, [pc, #148]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a1e:	4b24      	ldr	r3, [pc, #144]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a26:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <MX_GPIO_Init+0xf4>)
 8000a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_480_Pin|RELAY_120_Pin, GPIO_PIN_RESET);
 8000a32:	23c0      	movs	r3, #192	@ 0xc0
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	481f      	ldr	r0, [pc, #124]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	f002 f94d 	bl	8002cda <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_120_Pin ESTOP_SENSE_Pin */
  GPIO_InitStruct.Pin = SENSE_120_Pin|ESTOP_SENSE_Pin;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2282      	movs	r2, #130	@ 0x82
 8000a44:	0212      	lsls	r2, r2, #8
 8000a46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0010      	movs	r0, r2
 8000a5c:	f001 fed6 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : MANUAL_Pin */
  GPIO_InitStruct.Pin = MANUAL_Pin;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2240      	movs	r2, #64	@ 0x40
 8000a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2201      	movs	r2, #1
 8000a70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MANUAL_GPIO_Port, &GPIO_InitStruct);
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a76:	0019      	movs	r1, r3
 8000a78:	0010      	movs	r0, r2
 8000a7a:	f001 fec7 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_480_Pin RELAY_120_Pin */
  GPIO_InitStruct.Pin = RELAY_480_Pin|RELAY_120_Pin;
 8000a7e:	0021      	movs	r1, r4
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	22c0      	movs	r2, #192	@ 0xc0
 8000a84:	0052      	lsls	r2, r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	0010      	movs	r0, r2
 8000aa2:	f001 feb3 	bl	800280c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b00b      	add	sp, #44	@ 0x2c
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	50000400 	.word	0x50000400

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	e7fd      	b.n	8000ac0 <Error_Handler+0x8>

08000ac4 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	000a      	movs	r2, r1
 8000ace:	1cbb      	adds	r3, r7, #2
 8000ad0:	801a      	strh	r2, [r3, #0]
	if(modbus_header)
 8000ad2:	4b24      	ldr	r3, [pc, #144]	@ (8000b64 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d026      	beq.n	8000b2a <HAL_UARTEx_RxEventCallback+0x66>
	{
		// Log the time for chunk miss error handling
		chunk_time = HAL_GetTick();
 8000adc:	f001 f808 	bl	8001af0 <HAL_GetTick>
 8000ae0:	0002      	movs	r2, r0
 8000ae2:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000ae4:	601a      	str	r2, [r3, #0]
		modbus_header = 0;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	801a      	strh	r2, [r3, #0]

		// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &modbus_rx_buffer[6], (uint16_t)(((modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5])*2 + 2 + 1));
 8000aec:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b6c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000af4:	7952      	ldrb	r2, [r2, #5]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	3301      	adds	r3, #1
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	18db      	adds	r3, r3, r3
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	3301      	adds	r3, #1
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	491a      	ldr	r1, [pc, #104]	@ (8000b70 <HAL_UARTEx_RxEventCallback+0xac>)
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f004 fb34 	bl	8005178 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000b12:	2280      	movs	r2, #128	@ 0x80
 8000b14:	589b      	ldr	r3, [r3, r2]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000b1c:	2180      	movs	r1, #128	@ 0x80
 8000b1e:	585b      	ldr	r3, [r3, r1]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2104      	movs	r1, #4
 8000b24:	438a      	bics	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
#ifdef MB_SLAVE
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
#endif
	}
}
 8000b28:	e017      	b.n	8000b5a <HAL_UARTEx_RxEventCallback+0x96>
		modbus_header = 1;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	801a      	strh	r2, [r3, #0]
		uart_rx_int = 1;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 8000b36:	490d      	ldr	r1, [pc, #52]	@ (8000b6c <HAL_UARTEx_RxEventCallback+0xa8>)
 8000b38:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000b3a:	2206      	movs	r2, #6
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f004 fb1b 	bl	8005178 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	589b      	ldr	r3, [r3, r2]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000b4e:	2180      	movs	r1, #128	@ 0x80
 8000b50:	585b      	ldr	r3, [r3, r1]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2104      	movs	r1, #4
 8000b56:	438a      	bics	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	20000010 	.word	0x20000010
 8000b68:	2000041c 	.word	0x2000041c
 8000b6c:	20000218 	.word	0x20000218
 8000b70:	2000021e 	.word	0x2000021e
 8000b74:	200000c4 	.word	0x200000c4
 8000b78:	20000420 	.word	0x20000420

08000b7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 8000b84:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <HAL_UART_TxCpltCallback+0x18>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	20000012 	.word	0x20000012

08000b98 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <HAL_UART_ErrorCallback+0x28>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <HAL_UART_ErrorCallback+0x2c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_UART_ErrorCallback+0x2c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	0052      	lsls	r2, r2, #1
 8000bb2:	0852      	lsrs	r2, r2, #1
 8000bb4:	609a      	str	r2, [r3, #8]
}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	20000421 	.word	0x20000421
 8000bc4:	200000c4 	.word	0x200000c4

08000bc8 <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <modbus_rx+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 8000bd6:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <modbus_rx+0x20>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
		return 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <modbus_rx+0x1a>
	}
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000420 	.word	0x20000420

08000bec <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 8000bec:	b5b0      	push	{r4, r5, r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f000 fc64 	bl	80014c8 <get_rx_buffer>
 8000c00:	0003      	movs	r3, r0
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21c      	sxth	r4, r3
 8000c06:	2003      	movs	r0, #3
 8000c08:	f000 fc5e 	bl	80014c8 <get_rx_buffer>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	4323      	orrs	r3, r4
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	230c      	movs	r3, #12
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000c1a:	2004      	movs	r0, #4
 8000c1c:	f000 fc54 	bl	80014c8 <get_rx_buffer>
 8000c20:	0003      	movs	r3, r0
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	b21c      	sxth	r4, r3
 8000c26:	2005      	movs	r0, #5
 8000c28:	f000 fc4e 	bl	80014c8 <get_rx_buffer>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	4323      	orrs	r3, r4
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	210a      	movs	r1, #10
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000c3a:	000a      	movs	r2, r1
 8000c3c:	18bb      	adds	r3, r7, r2
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c42:	d803      	bhi.n	8000c4c <return_holding_registers+0x60>
 8000c44:	18bb      	adds	r3, r7, r2
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d104      	bne.n	8000c56 <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000c4c:	2006      	movs	r0, #6
 8000c4e:	f000 f97d 	bl	8000f4c <modbus_exception>
 8000c52:	0003      	movs	r3, r0
 8000c54:	e06e      	b.n	8000d34 <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000c56:	230a      	movs	r3, #10
 8000c58:	18fa      	adds	r2, r7, r3
 8000c5a:	230c      	movs	r3, #12
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	8812      	ldrh	r2, [r2, #0]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	18d3      	adds	r3, r2, r3
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	2108      	movs	r1, #8
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	3a01      	subs	r2, #1
 8000c6c:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d904      	bls.n	8000c80 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000c76:	2005      	movs	r0, #5
 8000c78:	f000 f968 	bl	8000f4c <modbus_exception>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	e059      	b.n	8000d34 <return_holding_registers+0x148>
	}

	// Return register values
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 fc21 	bl	80014c8 <get_rx_buffer>
 8000c86:	0003      	movs	r3, r0
 8000c88:	001a      	movs	r2, r3
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d3c <return_holding_registers+0x150>)
 8000c8c:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 fc1a 	bl	80014c8 <get_rx_buffer>
 8000c94:	0003      	movs	r3, r0
 8000c96:	001a      	movs	r2, r3
 8000c98:	4b28      	ldr	r3, [pc, #160]	@ (8000d3c <return_holding_registers+0x150>)
 8000c9a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	18db      	adds	r3, r3, r3
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <return_holding_registers+0x150>)
 8000caa:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2203      	movs	r2, #3
 8000cb0:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	e02c      	b.n	8000d16 <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8000cbc:	250c      	movs	r5, #12
 8000cbe:	197b      	adds	r3, r7, r5
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	240f      	movs	r4, #15
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	18d2      	adds	r2, r2, r3
 8000cca:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <return_holding_registers+0x154>)
 8000ccc:	0052      	lsls	r2, r2, #1
 8000cce:	5ad3      	ldrh	r3, [r2, r3]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	b299      	uxth	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	b2d0      	uxtb	r0, r2
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	7010      	strb	r0, [r2, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	b2c9      	uxtb	r1, r1
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <return_holding_registers+0x150>)
 8000ce6:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 8000ce8:	197b      	adds	r3, r7, r5
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	18d2      	adds	r2, r2, r3
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <return_holding_registers+0x154>)
 8000cf4:	0052      	lsls	r2, r2, #1
 8000cf6:	5ad1      	ldrh	r1, [r2, r3]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	b2d0      	uxtb	r0, r2
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	7010      	strb	r0, [r2, #0]
 8000d04:	001a      	movs	r2, r3
 8000d06:	b2c9      	uxtb	r1, r1
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <return_holding_registers+0x150>)
 8000d0a:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	3201      	adds	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	230f      	movs	r3, #15
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	220a      	movs	r2, #10
 8000d20:	18ba      	adds	r2, r7, r2
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8c9      	bhi.n	8000cbc <return_holding_registers+0xd0>
	}

	return modbus_send((*tx_len));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f000 f9c1 	bl	80010b4 <modbus_send>
 8000d32:	0003      	movs	r3, r0
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b004      	add	sp, #16
 8000d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3c:	20000318 	.word	0x20000318
 8000d40:	20000000 	.word	0x20000000

08000d44 <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000d52:	2002      	movs	r0, #2
 8000d54:	f000 fbb8 	bl	80014c8 <get_rx_buffer>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	b21c      	sxth	r4, r3
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f000 fbb2 	bl	80014c8 <get_rx_buffer>
 8000d64:	0003      	movs	r3, r0
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	4323      	orrs	r3, r4
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	2314      	movs	r3, #20
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000d72:	2004      	movs	r0, #4
 8000d74:	f000 fba8 	bl	80014c8 <get_rx_buffer>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b21c      	sxth	r4, r3
 8000d7e:	2005      	movs	r0, #5
 8000d80:	f000 fba2 	bl	80014c8 <get_rx_buffer>
 8000d84:	0003      	movs	r3, r0
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	2112      	movs	r1, #18
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8000d92:	000a      	movs	r2, r1
 8000d94:	18bb      	adds	r3, r7, r2
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	2b7d      	cmp	r3, #125	@ 0x7d
 8000d9a:	d803      	bhi.n	8000da4 <edit_multiple_registers+0x60>
 8000d9c:	18bb      	adds	r3, r7, r2
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d104      	bne.n	8000dae <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000da4:	2006      	movs	r0, #6
 8000da6:	f000 f8d1 	bl	8000f4c <modbus_exception>
 8000daa:	0003      	movs	r3, r0
 8000dac:	e0c6      	b.n	8000f3c <edit_multiple_registers+0x1f8>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000dae:	2312      	movs	r3, #18
 8000db0:	18fa      	adds	r2, r7, r3
 8000db2:	2314      	movs	r3, #20
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	8812      	ldrh	r2, [r2, #0]
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d904      	bls.n	8000dd8 <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000dce:	2005      	movs	r0, #5
 8000dd0:	f000 f8bc 	bl	8000f4c <modbus_exception>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	e0b1      	b.n	8000f3c <edit_multiple_registers+0x1f8>
	}

	// Protect Read only values
	if(((first_register_address >= GPIO_READ) && (first_register_address <= GPIO_READ)) ||
 8000dd8:	2214      	movs	r2, #20
 8000dda:	18bb      	adds	r3, r7, r2
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d903      	bls.n	8000dea <edit_multiple_registers+0xa6>
 8000de2:	18bb      	adds	r3, r7, r2
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d912      	bls.n	8000e10 <edit_multiple_registers+0xcc>
 8000dea:	2210      	movs	r2, #16
 8000dec:	18bb      	adds	r3, r7, r2
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d903      	bls.n	8000dfc <edit_multiple_registers+0xb8>
		 ((last_register_address >= GPIO_READ) && (last_register_address <= GPIO_READ)) ||
 8000df4:	18bb      	adds	r3, r7, r2
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d909      	bls.n	8000e10 <edit_multiple_registers+0xcc>
 8000dfc:	2314      	movs	r3, #20
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d809      	bhi.n	8000e1a <edit_multiple_registers+0xd6>
		 ((first_register_address < GPIO_READ  && last_register_address > GPIO_READ)))
 8000e06:	2310      	movs	r3, #16
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d904      	bls.n	8000e1a <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8000e10:	2004      	movs	r0, #4
 8000e12:	f000 f89b 	bl	8000f4c <modbus_exception>
 8000e16:	0003      	movs	r3, r0
 8000e18:	e090      	b.n	8000f3c <edit_multiple_registers+0x1f8>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 fb54 	bl	80014c8 <get_rx_buffer>
 8000e20:	0003      	movs	r3, r0
 8000e22:	001a      	movs	r2, r3
 8000e24:	4b47      	ldr	r3, [pc, #284]	@ (8000f44 <edit_multiple_registers+0x200>)
 8000e26:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f000 fb4d 	bl	80014c8 <get_rx_buffer>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	001a      	movs	r2, r3
 8000e32:	4b44      	ldr	r3, [pc, #272]	@ (8000f44 <edit_multiple_registers+0x200>)
 8000e34:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8000e36:	2002      	movs	r0, #2
 8000e38:	f000 fb46 	bl	80014c8 <get_rx_buffer>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	001a      	movs	r2, r3
 8000e40:	4b40      	ldr	r3, [pc, #256]	@ (8000f44 <edit_multiple_registers+0x200>)
 8000e42:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 fb3f 	bl	80014c8 <get_rx_buffer>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f44 <edit_multiple_registers+0x200>)
 8000e50:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8000e52:	2004      	movs	r0, #4
 8000e54:	f000 fb38 	bl	80014c8 <get_rx_buffer>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	4b39      	ldr	r3, [pc, #228]	@ (8000f44 <edit_multiple_registers+0x200>)
 8000e5e:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8000e60:	2005      	movs	r0, #5
 8000e62:	f000 fb31 	bl	80014c8 <get_rx_buffer>
 8000e66:	0003      	movs	r3, r0
 8000e68:	001a      	movs	r2, r3
 8000e6a:	4b36      	ldr	r3, [pc, #216]	@ (8000f44 <edit_multiple_registers+0x200>)
 8000e6c:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2206      	movs	r2, #6
 8000e72:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8000e74:	2317      	movs	r3, #23
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	e032      	b.n	8000ee4 <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8000e7e:	2517      	movs	r5, #23
 8000e80:	197b      	adds	r3, r7, r5
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	18db      	adds	r3, r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	3307      	adds	r3, #7
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f000 fb1b 	bl	80014c8 <get_rx_buffer>
 8000e92:	0003      	movs	r3, r0
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21c      	sxth	r4, r3
 8000e98:	197b      	adds	r3, r7, r5
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	18db      	adds	r3, r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f000 fb0f 	bl	80014c8 <get_rx_buffer>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4323      	orrs	r3, r4
 8000eb0:	b219      	sxth	r1, r3
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	183b      	adds	r3, r7, r0
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	197b      	adds	r3, r7, r5
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	18d2      	adds	r2, r2, r3
 8000ebe:	b289      	uxth	r1, r1
 8000ec0:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <edit_multiple_registers+0x204>)
 8000ec2:	0052      	lsls	r2, r2, #1
 8000ec4:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8000ec6:	197b      	adds	r3, r7, r5
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	183b      	adds	r3, r7, r0
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f000 f861 	bl	8000f9c <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8000eda:	197b      	adds	r3, r7, r5
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	2317      	movs	r3, #23
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	2212      	movs	r2, #18
 8000eee:	18ba      	adds	r2, r7, r2
 8000ef0:	8812      	ldrh	r2, [r2, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d8c3      	bhi.n	8000e7e <edit_multiple_registers+0x13a>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f000 fe04 	bl	8001b04 <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	250f      	movs	r5, #15
 8000f02:	197c      	adds	r4, r7, r5
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 f8d5 	bl	80010b4 <modbus_send>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 8000f0e:	197b      	adds	r3, r7, r5
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10d      	bne.n	8000f34 <edit_multiple_registers+0x1f0>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8000f18:	2314      	movs	r3, #20
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d808      	bhi.n	8000f34 <edit_multiple_registers+0x1f0>
 8000f22:	2310      	movs	r3, #16
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <edit_multiple_registers+0x1f0>
		{
			return modbus_change_baud_rate();
 8000f2c:	f000 fa40 	bl	80013b0 <modbus_change_baud_rate>
 8000f30:	0003      	movs	r3, r0
 8000f32:	e003      	b.n	8000f3c <edit_multiple_registers+0x1f8>
		}
	}
	return status;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
}
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b006      	add	sp, #24
 8000f42:	bdb0      	pop	{r4, r5, r7, pc}
 8000f44:	20000318 	.word	0x20000318
 8000f48:	20000000 	.word	0x20000000

08000f4c <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	0002      	movs	r2, r0
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 fab5 	bl	80014c8 <get_rx_buffer>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	001a      	movs	r2, r3
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <modbus_exception+0x4c>)
 8000f64:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 faae 	bl	80014c8 <get_rx_buffer>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	001a      	movs	r2, r3
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	425b      	negs	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <modbus_exception+0x4c>)
 8000f7a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <modbus_exception+0x4c>)
 8000f86:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f893 	bl	80010b4 <modbus_send>
 8000f8e:	0003      	movs	r3, r0
}
 8000f90:	0018      	movs	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000318 	.word	0x20000318

08000f9c <handle_range>:

void handle_range(uint16_t holding_register)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	1dbb      	adds	r3, r7, #6
 8000fa6:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8000fa8:	1dbb      	adds	r3, r7, #6
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d900      	bls.n	8000fb2 <handle_range+0x16>
 8000fb0:	e075      	b.n	800109e <handle_range+0x102>
 8000fb2:	009a      	lsls	r2, r3, #2
 8000fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80010a8 <handle_range+0x10c>)
 8000fb6:	18d3      	adds	r3, r2, r3
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	881a      	ldrh	r2, [r3, #0]
 8000fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80010ac <handle_range+0x110>)
 8000fc2:	0052      	lsls	r2, r2, #1
 8000fc4:	5ad3      	ldrh	r3, [r2, r3]
 8000fc6:	2bff      	cmp	r3, #255	@ 0xff
 8000fc8:	d800      	bhi.n	8000fcc <handle_range+0x30>
 8000fca:	e05f      	b.n	800108c <handle_range+0xf0>
			{
				holding_register_database[holding_register] = 0xFF;
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	4b36      	ldr	r3, [pc, #216]	@ (80010ac <handle_range+0x110>)
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	21ff      	movs	r1, #255	@ 0xff
 8000fd6:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8000fd8:	e058      	b.n	800108c <handle_range+0xf0>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 8000fda:	1dbb      	adds	r3, r7, #6
 8000fdc:	881a      	ldrh	r2, [r3, #0]
 8000fde:	4b33      	ldr	r3, [pc, #204]	@ (80010ac <handle_range+0x110>)
 8000fe0:	0052      	lsls	r2, r2, #1
 8000fe2:	5ad3      	ldrh	r3, [r2, r3]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d806      	bhi.n	8000ff6 <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 8000fe8:	1dbb      	adds	r3, r7, #6
 8000fea:	881a      	ldrh	r2, [r3, #0]
 8000fec:	4b2f      	ldr	r3, [pc, #188]	@ (80010ac <handle_range+0x110>)
 8000fee:	0052      	lsls	r2, r2, #1
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 8000ff4:	e04c      	b.n	8001090 <handle_range+0xf4>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	881a      	ldrh	r2, [r3, #0]
 8000ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80010ac <handle_range+0x110>)
 8000ffc:	0052      	lsls	r2, r2, #1
 8000ffe:	5ad3      	ldrh	r3, [r2, r3]
 8001000:	2b09      	cmp	r3, #9
 8001002:	d945      	bls.n	8001090 <handle_range+0xf4>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 8001004:	1dbb      	adds	r3, r7, #6
 8001006:	881a      	ldrh	r2, [r3, #0]
 8001008:	4b28      	ldr	r3, [pc, #160]	@ (80010ac <handle_range+0x110>)
 800100a:	0052      	lsls	r2, r2, #1
 800100c:	2109      	movs	r1, #9
 800100e:	52d1      	strh	r1, [r2, r3]
			break;
 8001010:	e03e      	b.n	8001090 <handle_range+0xf4>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 8001012:	1dbb      	adds	r3, r7, #6
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <handle_range+0x110>)
 8001018:	0052      	lsls	r2, r2, #1
 800101a:	5ad3      	ldrh	r3, [r2, r3]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d806      	bhi.n	800102e <handle_range+0x92>
			{
				holding_register_database[holding_register] = 5;
 8001020:	1dbb      	adds	r3, r7, #6
 8001022:	881a      	ldrh	r2, [r3, #0]
 8001024:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <handle_range+0x110>)
 8001026:	0052      	lsls	r2, r2, #1
 8001028:	2105      	movs	r1, #5
 800102a:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 800102c:	e032      	b.n	8001094 <handle_range+0xf8>
			else if(holding_register_database[holding_register] > 1000)
 800102e:	1dbb      	adds	r3, r7, #6
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <handle_range+0x110>)
 8001034:	0052      	lsls	r2, r2, #1
 8001036:	5ad2      	ldrh	r2, [r2, r3]
 8001038:	23fa      	movs	r3, #250	@ 0xfa
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	429a      	cmp	r2, r3
 800103e:	d929      	bls.n	8001094 <handle_range+0xf8>
				holding_register_database[holding_register] = 1000;
 8001040:	1dbb      	adds	r3, r7, #6
 8001042:	881a      	ldrh	r2, [r3, #0]
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <handle_range+0x110>)
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	21fa      	movs	r1, #250	@ 0xfa
 800104a:	0089      	lsls	r1, r1, #2
 800104c:	52d1      	strh	r1, [r2, r3]
			break;
 800104e:	e021      	b.n	8001094 <handle_range+0xf8>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8001050:	1dbb      	adds	r3, r7, #6
 8001052:	881a      	ldrh	r2, [r3, #0]
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <handle_range+0x110>)
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	5ad3      	ldrh	r3, [r2, r3]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d91c      	bls.n	8001098 <handle_range+0xfc>
			{
				holding_register_database[holding_register] = 5;
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <handle_range+0x110>)
 8001064:	0052      	lsls	r2, r2, #1
 8001066:	2105      	movs	r1, #5
 8001068:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800106a:	e015      	b.n	8001098 <handle_range+0xfc>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 800106c:	1dbb      	adds	r3, r7, #6
 800106e:	881a      	ldrh	r2, [r3, #0]
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <handle_range+0x110>)
 8001072:	0052      	lsls	r2, r2, #1
 8001074:	5ad2      	ldrh	r2, [r2, r3]
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	429a      	cmp	r2, r3
 800107c:	d30e      	bcc.n	800109c <handle_range+0x100>
			{
				holding_register_database[holding_register] = 0x3FF;
 800107e:	1dbb      	adds	r3, r7, #6
 8001080:	881a      	ldrh	r2, [r3, #0]
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <handle_range+0x110>)
 8001084:	0052      	lsls	r2, r2, #1
 8001086:	490a      	ldr	r1, [pc, #40]	@ (80010b0 <handle_range+0x114>)
 8001088:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800108a:	e007      	b.n	800109c <handle_range+0x100>
			break;
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	e006      	b.n	800109e <handle_range+0x102>
			break;
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	e004      	b.n	800109e <handle_range+0x102>
			break;
 8001094:	46c0      	nop			@ (mov r8, r8)
 8001096:	e002      	b.n	800109e <handle_range+0x102>
			break;
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	e000      	b.n	800109e <handle_range+0x102>
			break;
 800109c:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	08005838 	.word	0x08005838
 80010ac:	20000000 	.word	0x20000000
 80010b0:	000003ff 	.word	0x000003ff

080010b4 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 80010b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	0002      	movs	r2, r0
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 80010c0:	250f      	movs	r5, #15
 80010c2:	197b      	adds	r3, r7, r5
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 80010c8:	260c      	movs	r6, #12
 80010ca:	19bc      	adds	r4, r7, r6
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <modbus_send+0x9c>)
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fa25 	bl	8001524 <crc_16>
 80010da:	0003      	movs	r3, r0
 80010dc:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	19ba      	adds	r2, r7, r6
 80010e4:	8812      	ldrh	r2, [r2, #0]
 80010e6:	b2d1      	uxtb	r1, r2
 80010e8:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <modbus_send+0x9c>)
 80010ea:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 80010ec:	19bb      	adds	r3, r7, r6
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2d1      	uxtb	r1, r2
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <modbus_send+0x9c>)
 80010fe:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <modbus_send+0xa0>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 8001106:	f000 fcf3 	bl	8001af0 <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <modbus_send+0xa4>)
 800110e:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b29b      	uxth	r3, r3
 8001116:	3302      	adds	r3, #2
 8001118:	b29a      	uxth	r2, r3
 800111a:	490d      	ldr	r1, [pc, #52]	@ (8001150 <modbus_send+0x9c>)
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <modbus_send+0xa8>)
 800111e:	0018      	movs	r0, r3
 8001120:	f002 fb00 	bl	8003724 <HAL_UART_Transmit_DMA>
 8001124:	0003      	movs	r3, r0
 8001126:	001a      	movs	r2, r3
 8001128:	197b      	adds	r3, r7, r5
 800112a:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmatx, DMA_IT_HT);
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <modbus_send+0xa8>)
 800112e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <modbus_send+0xa8>)
 8001136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2104      	movs	r1, #4
 800113c:	438a      	bics	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
	return status;
 8001140:	197b      	adds	r3, r7, r5
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b25b      	sxtb	r3, r3
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b005      	add	sp, #20
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	20000318 	.word	0x20000318
 8001154:	20000012 	.word	0x20000012
 8001158:	20000418 	.word	0x20000418
 800115c:	200000c4 	.word	0x200000c4

08001160 <modbus_reset>:

int8_t modbus_reset()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	// Reset interrupt variables to default state
	uart_tx_int = 1;
 800116c:	4b37      	ldr	r3, [pc, #220]	@ (800124c <modbus_reset+0xec>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
	uart_rx_int = 0;
 8001172:	4b37      	ldr	r3, [pc, #220]	@ (8001250 <modbus_reset+0xf0>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 8001178:	4b36      	ldr	r3, [pc, #216]	@ (8001254 <modbus_reset+0xf4>)
 800117a:	0018      	movs	r0, r3
 800117c:	f002 fb64 	bl	8003848 <HAL_UART_Abort>
 8001180:	0003      	movs	r3, r0
 8001182:	001a      	movs	r2, r3
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 8001188:	4b32      	ldr	r3, [pc, #200]	@ (8001254 <modbus_reset+0xf4>)
 800118a:	0018      	movs	r0, r3
 800118c:	f002 fa8a 	bl	80036a4 <HAL_UART_DeInit>
 8001190:	0003      	movs	r3, r0
 8001192:	b259      	sxtb	r1, r3
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 800119e:	4b2e      	ldr	r3, [pc, #184]	@ (8001258 <modbus_reset+0xf8>)
 80011a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <modbus_reset+0xf8>)
 80011a4:	2180      	movs	r1, #128	@ 0x80
 80011a6:	01c9      	lsls	r1, r1, #7
 80011a8:	430a      	orrs	r2, r1
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	@ 0x64
 80011ae:	f000 fca9 	bl	8001b04 <HAL_Delay>
	__USART1_RELEASE_RESET();
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <modbus_reset+0xf8>)
 80011b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011b6:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <modbus_reset+0xf8>)
 80011b8:	4928      	ldr	r1, [pc, #160]	@ (800125c <modbus_reset+0xfc>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 80011be:	4825      	ldr	r0, [pc, #148]	@ (8001254 <modbus_reset+0xf4>)
 80011c0:	2300      	movs	r3, #0
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	f003 fe91 	bl	8004eec <HAL_RS485Ex_Init>
 80011ca:	0003      	movs	r3, r0
 80011cc:	001a      	movs	r2, r3
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <modbus_reset+0xf4>)
 80011d4:	2100      	movs	r1, #0
 80011d6:	0018      	movs	r0, r3
 80011d8:	f003 ff4c 	bl	8005074 <HAL_UARTEx_SetTxFifoThreshold>
 80011dc:	0003      	movs	r3, r0
 80011de:	b259      	sxtb	r1, r3
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	1dfa      	adds	r2, r7, #7
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <modbus_reset+0xf4>)
 80011ec:	2100      	movs	r1, #0
 80011ee:	0018      	movs	r0, r3
 80011f0:	f003 ff80 	bl	80050f4 <HAL_UARTEx_SetRxFifoThreshold>
 80011f4:	0003      	movs	r3, r0
 80011f6:	b259      	sxtb	r1, r3
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	1dfa      	adds	r2, r7, #7
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 8001202:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <modbus_reset+0xf4>)
 8001204:	0018      	movs	r0, r3
 8001206:	f003 fefb 	bl	8005000 <HAL_UARTEx_DisableFifoMode>
 800120a:	0003      	movs	r3, r0
 800120c:	b259      	sxtb	r1, r3
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	1dfa      	adds	r2, r7, #7
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	701a      	strb	r2, [r3, #0]
	status |= modbus_set_rx();
 8001218:	f000 f822 	bl	8001260 <modbus_set_rx>
 800121c:	0003      	movs	r3, r0
 800121e:	0019      	movs	r1, r3
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	1dfa      	adds	r2, r7, #7
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b25b      	sxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <modbus_reset+0xde>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 8001234:	2015      	movs	r0, #21
 8001236:	f000 f957 	bl	80014e8 <handle_modbus_error>
 800123a:	0003      	movs	r3, r0
 800123c:	e002      	b.n	8001244 <modbus_reset+0xe4>
	}
	return status;
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000012 	.word	0x20000012
 8001250:	20000420 	.word	0x20000420
 8001254:	200000c4 	.word	0x200000c4
 8001258:	40021000 	.word	0x40021000
 800125c:	ffffbfff 	.word	0xffffbfff

08001260 <modbus_set_rx>:

int8_t modbus_set_rx()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 8001266:	490e      	ldr	r1, [pc, #56]	@ (80012a0 <modbus_set_rx+0x40>)
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <modbus_set_rx+0x44>)
 800126a:	2206      	movs	r2, #6
 800126c:	0018      	movs	r0, r3
 800126e:	f003 ff83 	bl	8005178 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001272:	0003      	movs	r3, r0
 8001274:	001a      	movs	r2, r3
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <modbus_set_rx+0x44>)
 800127c:	2280      	movs	r2, #128	@ 0x80
 800127e:	589b      	ldr	r3, [r3, r2]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <modbus_set_rx+0x44>)
 8001286:	2180      	movs	r1, #128	@ 0x80
 8001288:	585b      	ldr	r3, [r3, r1]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2104      	movs	r1, #4
 800128e:	438a      	bics	r2, r1
 8001290:	601a      	str	r2, [r3, #0]

	return status;
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b25b      	sxtb	r3, r3
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000218 	.word	0x20000218
 80012a4:	200000c4 	.word	0x200000c4

080012a8 <monitor_modbus>:

int8_t monitor_modbus()
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 80012b4:	1dfc      	adds	r4, r7, #7
 80012b6:	f000 f97b 	bl	80015b0 <handle_chunk_miss>
 80012ba:	0003      	movs	r3, r0
 80012bc:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d012      	beq.n	80012ee <monitor_modbus+0x46>
	{
		status = modbus_reset();
 80012c8:	1dfc      	adds	r4, r7, #7
 80012ca:	f7ff ff49 	bl	8001160 <modbus_reset>
 80012ce:	0003      	movs	r3, r0
 80012d0:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <monitor_modbus+0x3c>
		{
			return status;
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	e03c      	b.n	800135e <monitor_modbus+0xb6>
		}
		return handle_modbus_error(MB_UART_ERROR);
 80012e4:	2014      	movs	r0, #20
 80012e6:	f000 f8ff 	bl	80014e8 <handle_modbus_error>
 80012ea:	0003      	movs	r3, r0
 80012ec:	e037      	b.n	800135e <monitor_modbus+0xb6>
	}

	// Uart error handling
	if(uart_err_int)
 80012ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <monitor_modbus+0xc0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d015      	beq.n	8001324 <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <monitor_modbus+0xc0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 80012fe:	1dfc      	adds	r4, r7, #7
 8001300:	f7ff ff2e 	bl	8001160 <modbus_reset>
 8001304:	0003      	movs	r3, r0
 8001306:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <monitor_modbus+0x72>
		{
			return status;
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	e021      	b.n	800135e <monitor_modbus+0xb6>
		}
		return handle_modbus_error(MB_UART_ERROR);
 800131a:	2014      	movs	r0, #20
 800131c:	f000 f8e4 	bl	80014e8 <handle_modbus_error>
 8001320:	0003      	movs	r3, r0
 8001322:	e01c      	b.n	800135e <monitor_modbus+0xb6>
	}

	// TX timeout handling
	if(!uart_tx_int)
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <monitor_modbus+0xc4>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d114      	bne.n	8001358 <monitor_modbus+0xb0>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 800132e:	f000 fbdf 	bl	8001af0 <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <monitor_modbus+0xc8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <monitor_modbus+0xcc>)
 800133c:	8892      	ldrh	r2, [r2, #4]
 800133e:	4293      	cmp	r3, r2
 8001340:	d307      	bcc.n	8001352 <monitor_modbus+0xaa>
		{
			uart_tx_int = 1;
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <monitor_modbus+0xc4>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
			return handle_modbus_error(MB_TX_TIMEOUT);
 8001348:	2012      	movs	r0, #18
 800134a:	f000 f8cd 	bl	80014e8 <handle_modbus_error>
 800134e:	0003      	movs	r3, r0
 8001350:	e005      	b.n	800135e <monitor_modbus+0xb6>
		}
		status = HAL_BUSY;
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	2202      	movs	r2, #2
 8001356:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b003      	add	sp, #12
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	20000421 	.word	0x20000421
 800136c:	20000012 	.word	0x20000012
 8001370:	20000418 	.word	0x20000418
 8001374:	20000000 	.word	0x20000000

08001378 <modbus_startup>:

// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_startup()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	uart_err_int = 0;
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <modbus_startup+0x18>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	return modbus_reset();
 8001382:	f7ff feed 	bl	8001160 <modbus_reset>
 8001386:	0003      	movs	r3, r0
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	20000421 	.word	0x20000421

08001394 <modbus_shutdown>:

int8_t modbus_shutdown()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	return HAL_UART_AbortReceive(&huart1);
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <modbus_shutdown+0x18>)
 800139a:	0018      	movs	r0, r3
 800139c:	f002 fb60 	bl	8003a60 <HAL_UART_AbortReceive>
 80013a0:	0003      	movs	r3, r0
 80013a2:	b25b      	sxtb	r3, r3
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	200000c4 	.word	0x200000c4

080013b0 <modbus_change_baud_rate>:

int8_t modbus_change_baud_rate()
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 80013bc:	4b3f      	ldr	r3, [pc, #252]	@ (80014bc <modbus_change_baud_rate+0x10c>)
 80013be:	885b      	ldrh	r3, [r3, #2]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d831      	bhi.n	8001428 <modbus_change_baud_rate+0x78>
 80013c4:	009a      	lsls	r2, r3, #2
 80013c6:	4b3e      	ldr	r3, [pc, #248]	@ (80014c0 <modbus_change_baud_rate+0x110>)
 80013c8:	18d3      	adds	r3, r2, r3
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	469f      	mov	pc, r3
	{
		case BAUD_RATE_2400:
		{
			huart1.Init.BaudRate = 2400;
 80013ce:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 80013d0:	2296      	movs	r2, #150	@ 0x96
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	605a      	str	r2, [r3, #4]
			break;
 80013d6:	e04e      	b.n	8001476 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 80013d8:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 80013da:	2296      	movs	r2, #150	@ 0x96
 80013dc:	0152      	lsls	r2, r2, #5
 80013de:	605a      	str	r2, [r3, #4]
			break;
 80013e0:	e049      	b.n	8001476 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 80013e2:	4b38      	ldr	r3, [pc, #224]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 80013e4:	2296      	movs	r2, #150	@ 0x96
 80013e6:	0192      	lsls	r2, r2, #6
 80013e8:	605a      	str	r2, [r3, #4]
			break;
 80013ea:	e044      	b.n	8001476 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 80013ec:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 80013ee:	2296      	movs	r2, #150	@ 0x96
 80013f0:	01d2      	lsls	r2, r2, #7
 80013f2:	605a      	str	r2, [r3, #4]
			break;
 80013f4:	e03f      	b.n	8001476 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80013f6:	4b33      	ldr	r3, [pc, #204]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 80013f8:	2296      	movs	r2, #150	@ 0x96
 80013fa:	0212      	lsls	r2, r2, #8
 80013fc:	605a      	str	r2, [r3, #4]
			break;
 80013fe:	e03a      	b.n	8001476 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8001400:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 8001402:	22e1      	movs	r2, #225	@ 0xe1
 8001404:	0212      	lsls	r2, r2, #8
 8001406:	605a      	str	r2, [r3, #4]
			break;
 8001408:	e035      	b.n	8001476 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 800140a:	4b2e      	ldr	r3, [pc, #184]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 800140c:	22e1      	movs	r2, #225	@ 0xe1
 800140e:	0252      	lsls	r2, r2, #9
 8001410:	605a      	str	r2, [r3, #4]
			break;
 8001412:	e030      	b.n	8001476 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8001414:	4b2b      	ldr	r3, [pc, #172]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 8001416:	22fa      	movs	r2, #250	@ 0xfa
 8001418:	0252      	lsls	r2, r2, #9
 800141a:	605a      	str	r2, [r3, #4]
			break;
 800141c:	e02b      	b.n	8001476 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 800141e:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 8001420:	22fa      	movs	r2, #250	@ 0xfa
 8001422:	0292      	lsls	r2, r2, #10
 8001424:	605a      	str	r2, [r3, #4]
			break;
 8001426:	e026      	b.n	8001476 <modbus_change_baud_rate+0xc6>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 8001428:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <modbus_change_baud_rate+0x10c>)
 800142a:	2203      	movs	r2, #3
 800142c:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 800142e:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 8001430:	2296      	movs	r2, #150	@ 0x96
 8001432:	0192      	lsls	r2, r2, #6
 8001434:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8001436:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 8001438:	0018      	movs	r0, r3
 800143a:	f002 ff23 	bl	8004284 <UART_SetConfig>
 800143e:	0003      	movs	r3, r0
 8001440:	001a      	movs	r2, r3
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b25b      	sxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10d      	bne.n	800146c <modbus_change_baud_rate+0xbc>
			{
				status = modbus_reset();
 8001450:	1dfc      	adds	r4, r7, #7
 8001452:	f7ff fe85 	bl	8001160 <modbus_reset>
 8001456:	0003      	movs	r3, r0
 8001458:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b25b      	sxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <modbus_change_baud_rate+0xbc>
				{
					return status;
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b25b      	sxtb	r3, r3
 800146a:	e022      	b.n	80014b2 <modbus_change_baud_rate+0x102>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 800146c:	200e      	movs	r0, #14
 800146e:	f000 f83b 	bl	80014e8 <handle_modbus_error>
 8001472:	0003      	movs	r3, r0
 8001474:	e01d      	b.n	80014b2 <modbus_change_baud_rate+0x102>
		}
	}
	status = UART_SetConfig(&huart1);
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <modbus_change_baud_rate+0x114>)
 8001478:	0018      	movs	r0, r3
 800147a:	f002 ff03 	bl	8004284 <UART_SetConfig>
 800147e:	0003      	movs	r3, r0
 8001480:	001a      	movs	r2, r3
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10d      	bne.n	80014ac <modbus_change_baud_rate+0xfc>
	{
		// Log error, reset UART
		status = modbus_reset();
 8001490:	1dfc      	adds	r4, r7, #7
 8001492:	f7ff fe65 	bl	8001160 <modbus_reset>
 8001496:	0003      	movs	r3, r0
 8001498:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <modbus_change_baud_rate+0xfc>
		{
			return status;
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	e002      	b.n	80014b2 <modbus_change_baud_rate+0x102>
		}
	}

	return modbus_set_rx();
 80014ac:	f7ff fed8 	bl	8001260 <modbus_set_rx>
 80014b0:	0003      	movs	r3, r0
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b003      	add	sp, #12
 80014b8:	bd90      	pop	{r4, r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	20000000 	.word	0x20000000
 80014c0:	0800584c 	.word	0x0800584c
 80014c4:	200000c4 	.word	0x200000c4

080014c8 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	0002      	movs	r2, r0
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE)
	{
		return modbus_rx_buffer[index];
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4a02      	ldr	r2, [pc, #8]	@ (80014e4 <get_rx_buffer+0x1c>)
 80014da:	5cd3      	ldrb	r3, [r2, r3]
	}
	return 0xFF;
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000218 	.word	0x20000218

080014e8 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	0002      	movs	r2, r0
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <handle_modbus_error+0x38>)
 80014f6:	891a      	ldrh	r2, [r3, #8]
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	3b0e      	subs	r3, #14
 8001500:	2101      	movs	r1, #1
 8001502:	4099      	lsls	r1, r3
 8001504:	000b      	movs	r3, r1
 8001506:	b29b      	uxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <handle_modbus_error+0x38>)
 800150e:	811a      	strh	r2, [r3, #8]
	return error_code;
 8001510:	1dfb      	adds	r3, r7, #7
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b25b      	sxtb	r3, r3
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	20000000 	.word	0x20000000

08001524 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	000a      	movs	r2, r1
 800152e:	1cfb      	adds	r3, r7, #3
 8001530:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8001532:	230f      	movs	r3, #15
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	22ff      	movs	r2, #255	@ 0xff
 8001538:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 800153a:	230e      	movs	r3, #14
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	22ff      	movs	r2, #255	@ 0xff
 8001540:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8001542:	e019      	b.n	8001578 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	200e      	movs	r0, #14
 800154e:	183b      	adds	r3, r7, r0
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4053      	eors	r3, r2
 8001554:	b2db      	uxtb	r3, r3
 8001556:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8001558:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <crc_16+0x84>)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	18d3      	adds	r3, r2, r3
 800155e:	7819      	ldrb	r1, [r3, #0]
 8001560:	183b      	adds	r3, r7, r0
 8001562:	200f      	movs	r0, #15
 8001564:	183a      	adds	r2, r7, r0
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	404a      	eors	r2, r1
 800156a:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 800156c:	183b      	adds	r3, r7, r0
 800156e:	490f      	ldr	r1, [pc, #60]	@ (80015ac <crc_16+0x88>)
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	188a      	adds	r2, r1, r2
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	701a      	strb	r2, [r3, #0]
	while (size--)
 8001578:	1cfb      	adds	r3, r7, #3
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	1cfa      	adds	r2, r7, #3
 800157e:	1e59      	subs	r1, r3, #1
 8001580:	7011      	strb	r1, [r2, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1de      	bne.n	8001544 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8001586:	230f      	movs	r3, #15
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	230e      	movs	r3, #14
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b21b      	sxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b21b      	sxth	r3, r3
 800159c:	b29b      	uxth	r3, r3
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	08005638 	.word	0x08005638
 80015ac:	08005738 	.word	0x08005738

080015b0 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <handle_chunk_miss+0x5c>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d120      	bne.n	8001602 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 80015c0:	f000 fa96 	bl	8001af0 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <handle_chunk_miss+0x60>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	d918      	bls.n	8001602 <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <handle_chunk_miss+0x5c>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <handle_chunk_miss+0x64>)
 80015d8:	0018      	movs	r0, r3
 80015da:	f002 f935 	bl	8003848 <HAL_UART_Abort>
 80015de:	0003      	movs	r3, r0
 80015e0:	001a      	movs	r2, r3
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d104      	bne.n	80015fa <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 80015f0:	1dfc      	adds	r4, r7, #7
 80015f2:	f7ff fe35 	bl	8001260 <modbus_set_rx>
 80015f6:	0003      	movs	r3, r0
 80015f8:	7023      	strb	r3, [r4, #0]
			}
			return status;
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	e000      	b.n	8001604 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8001602:	2300      	movs	r3, #0
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b003      	add	sp, #12
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	20000010 	.word	0x20000010
 8001610:	2000041c 	.word	0x2000041c
 8001614:	200000c4 	.word	0x200000c4

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_MspInit+0x44>)
 8001620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_MspInit+0x44>)
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	641a      	str	r2, [r3, #64]	@ 0x40
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_MspInit+0x44>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	2201      	movs	r2, #1
 8001630:	4013      	ands	r3, r2
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_MspInit+0x44>)
 8001638:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <HAL_MspInit+0x44>)
 800163c:	2180      	movs	r1, #128	@ 0x80
 800163e:	0549      	lsls	r1, r1, #21
 8001640:	430a      	orrs	r2, r1
 8001642:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <HAL_MspInit+0x44>)
 8001646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	055b      	lsls	r3, r3, #21
 800164c:	4013      	ands	r3, r2
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b002      	add	sp, #8
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b095      	sub	sp, #84	@ 0x54
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	233c      	movs	r3, #60	@ 0x3c
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	0018      	movs	r0, r3
 800166e:	2314      	movs	r3, #20
 8001670:	001a      	movs	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f003 ff94 	bl	80055a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001678:	241c      	movs	r4, #28
 800167a:	193b      	adds	r3, r7, r4
 800167c:	0018      	movs	r0, r3
 800167e:	2320      	movs	r3, #32
 8001680:	001a      	movs	r2, r3
 8001682:	2100      	movs	r1, #0
 8001684:	f003 ff8c 	bl	80055a0 <memset>
  if(huart->Instance==USART1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a74      	ldr	r2, [pc, #464]	@ (8001860 <HAL_UART_MspInit+0x200>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d000      	beq.n	8001694 <HAL_UART_MspInit+0x34>
 8001692:	e0e1      	b.n	8001858 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001694:	193b      	adds	r3, r7, r4
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800169a:	193b      	adds	r3, r7, r4
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	0018      	movs	r0, r3
 80016a4:	f001 ff02 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80016ac:	f7ff fa04 	bl	8000ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016b6:	2180      	movs	r1, #128	@ 0x80
 80016b8:	01c9      	lsls	r1, r1, #7
 80016ba:	430a      	orrs	r2, r1
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80016be:	4b69      	ldr	r3, [pc, #420]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016c2:	2380      	movs	r3, #128	@ 0x80
 80016c4:	01db      	lsls	r3, r3, #7
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016cc:	4b65      	ldr	r3, [pc, #404]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d0:	4b64      	ldr	r3, [pc, #400]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016d2:	2104      	movs	r1, #4
 80016d4:	430a      	orrs	r2, r1
 80016d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80016d8:	4b62      	ldr	r3, [pc, #392]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016dc:	2204      	movs	r2, #4
 80016de:	4013      	ands	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016ea:	2102      	movs	r1, #2
 80016ec:	430a      	orrs	r2, r1
 80016ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80016f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f4:	2202      	movs	r2, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <HAL_UART_MspInit+0x204>)
 80016fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001700:	4b58      	ldr	r3, [pc, #352]	@ (8001864 <HAL_UART_MspInit+0x204>)
 8001702:	2101      	movs	r1, #1
 8001704:	430a      	orrs	r2, r1
 8001706:	635a      	str	r2, [r3, #52]	@ 0x34
 8001708:	4b56      	ldr	r3, [pc, #344]	@ (8001864 <HAL_UART_MspInit+0x204>)
 800170a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170c:	2201      	movs	r2, #1
 800170e:	4013      	ands	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001714:	213c      	movs	r1, #60	@ 0x3c
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	01d2      	lsls	r2, r2, #7
 800171c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	000c      	movs	r4, r1
 8001720:	193b      	adds	r3, r7, r4
 8001722:	2202      	movs	r2, #2
 8001724:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	193b      	adds	r3, r7, r4
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	193b      	adds	r3, r7, r4
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	193b      	adds	r3, r7, r4
 800173a:	4a4b      	ldr	r2, [pc, #300]	@ (8001868 <HAL_UART_MspInit+0x208>)
 800173c:	0019      	movs	r1, r3
 800173e:	0010      	movs	r0, r2
 8001740:	f001 f864 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001744:	193b      	adds	r3, r7, r4
 8001746:	2204      	movs	r2, #4
 8001748:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	193b      	adds	r3, r7, r4
 800174c:	2202      	movs	r2, #2
 800174e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	193b      	adds	r3, r7, r4
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	193b      	adds	r3, r7, r4
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800175c:	193b      	adds	r3, r7, r4
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	193b      	adds	r3, r7, r4
 8001764:	4a41      	ldr	r2, [pc, #260]	@ (800186c <HAL_UART_MspInit+0x20c>)
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f001 f84f 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800176e:	0021      	movs	r1, r4
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2280      	movs	r2, #128	@ 0x80
 8001774:	0152      	lsls	r2, r2, #5
 8001776:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	187b      	adds	r3, r7, r1
 800177a:	2202      	movs	r2, #2
 800177c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	187b      	adds	r3, r7, r1
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	187b      	adds	r3, r7, r1
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2201      	movs	r2, #1
 800178e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	187a      	adds	r2, r7, r1
 8001792:	23a0      	movs	r3, #160	@ 0xa0
 8001794:	05db      	lsls	r3, r3, #23
 8001796:	0011      	movs	r1, r2
 8001798:	0018      	movs	r0, r3
 800179a:	f001 f837 	bl	800280c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800179e:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017a0:	4a34      	ldr	r2, [pc, #208]	@ (8001874 <HAL_UART_MspInit+0x214>)
 80017a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80017a4:	4b32      	ldr	r3, [pc, #200]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017a6:	2232      	movs	r2, #50	@ 0x32
 80017a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017aa:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017b8:	2280      	movs	r2, #128	@ 0x80
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017c8:	4b29      	ldr	r3, [pc, #164]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017ce:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017d0:	22c0      	movs	r2, #192	@ 0xc0
 80017d2:	0192      	lsls	r2, r2, #6
 80017d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017d6:	4b26      	ldr	r3, [pc, #152]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fac7 	bl	8001d6c <HAL_DMA_Init>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 80017e2:	f7ff f969 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2180      	movs	r1, #128	@ 0x80
 80017ea:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017ec:	505a      	str	r2, [r3, r1]
 80017ee:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <HAL_UART_MspInit+0x210>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_UART_MspInit+0x218>)
 80017f6:	4a21      	ldr	r2, [pc, #132]	@ (800187c <HAL_UART_MspInit+0x21c>)
 80017f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <HAL_UART_MspInit+0x218>)
 80017fc:	2233      	movs	r2, #51	@ 0x33
 80017fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001800:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <HAL_UART_MspInit+0x218>)
 8001802:	2210      	movs	r2, #16
 8001804:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001806:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <HAL_UART_MspInit+0x218>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800180c:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <HAL_UART_MspInit+0x218>)
 800180e:	2280      	movs	r2, #128	@ 0x80
 8001810:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001812:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_UART_MspInit+0x218>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001818:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <HAL_UART_MspInit+0x218>)
 800181a:	2200      	movs	r2, #0
 800181c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_UART_MspInit+0x218>)
 8001820:	2200      	movs	r2, #0
 8001822:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_UART_MspInit+0x218>)
 8001826:	22c0      	movs	r2, #192	@ 0xc0
 8001828:	0192      	lsls	r2, r2, #6
 800182a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800182c:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_UART_MspInit+0x218>)
 800182e:	0018      	movs	r0, r3
 8001830:	f000 fa9c 	bl	8001d6c <HAL_DMA_Init>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8001838:	f7ff f93e 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a0e      	ldr	r2, [pc, #56]	@ (8001878 <HAL_UART_MspInit+0x218>)
 8001840:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001842:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <HAL_UART_MspInit+0x218>)
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	201b      	movs	r0, #27
 800184e:	f000 fa4b 	bl	8001ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001852:	201b      	movs	r0, #27
 8001854:	f000 fa5d 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b015      	add	sp, #84	@ 0x54
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	40013800 	.word	0x40013800
 8001864:	40021000 	.word	0x40021000
 8001868:	50000800 	.word	0x50000800
 800186c:	50000400 	.word	0x50000400
 8001870:	20000158 	.word	0x20000158
 8001874:	40020008 	.word	0x40020008
 8001878:	200001b4 	.word	0x200001b4
 800187c:	4002001c 	.word	0x4002001c

08001880 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <HAL_UART_MspDeInit+0x6c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d127      	bne.n	80018e2 <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <HAL_UART_MspDeInit+0x70>)
 8001894:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <HAL_UART_MspDeInit+0x70>)
 8001898:	4916      	ldr	r1, [pc, #88]	@ (80018f4 <HAL_UART_MspDeInit+0x74>)
 800189a:	400a      	ands	r2, r1
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	01db      	lsls	r3, r3, #7
 80018a2:	4a15      	ldr	r2, [pc, #84]	@ (80018f8 <HAL_UART_MspDeInit+0x78>)
 80018a4:	0019      	movs	r1, r3
 80018a6:	0010      	movs	r0, r2
 80018a8:	f001 f922 	bl	8002af0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <HAL_UART_MspDeInit+0x7c>)
 80018ae:	2104      	movs	r1, #4
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 f91d 	bl	8002af0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80018b6:	2380      	movs	r3, #128	@ 0x80
 80018b8:	015a      	lsls	r2, r3, #5
 80018ba:	23a0      	movs	r3, #160	@ 0xa0
 80018bc:	05db      	lsls	r3, r3, #23
 80018be:	0011      	movs	r1, r2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f001 f915 	bl	8002af0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2280      	movs	r2, #128	@ 0x80
 80018ca:	589b      	ldr	r3, [r3, r2]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 fad7 	bl	8001e80 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 fad2 	bl	8001e80 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80018dc:	201b      	movs	r0, #27
 80018de:	f000 fa28 	bl	8001d32 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	40013800 	.word	0x40013800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	ffffbfff 	.word	0xffffbfff
 80018f8:	50000800 	.word	0x50000800
 80018fc:	50000400 	.word	0x50000400

08001900 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001904:	f3bf 8f4f 	dsb	sy
}
 8001908:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190a:	4b04      	ldr	r3, [pc, #16]	@ (800191c <__NVIC_SystemReset+0x1c>)
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SystemReset+0x20>)
 800190e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	e7fd      	b.n	8001916 <__NVIC_SystemReset+0x16>
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	e000ed00 	.word	0xe000ed00
 8001920:	05fa0004 	.word	0x05fa0004

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	e7fd      	b.n	8001928 <NMI_Handler+0x4>

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  NVIC_SystemReset();
 8001930:	f7ff ffe6 	bl	8001900 <__NVIC_SystemReset>

08001934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001938:	46c0      	nop			@ (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f000 f8be 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	46c0      	nop			@ (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <DMA1_Channel1_IRQHandler+0x14>)
 800195e:	0018      	movs	r0, r3
 8001960:	f000 fc6a 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001964:	46c0      	nop			@ (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	20000158 	.word	0x20000158

08001970 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001976:	0018      	movs	r0, r3
 8001978:	f000 fc5e 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	200001b4 	.word	0x200001b4

08001988 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <USART1_IRQHandler+0x14>)
 800198e:	0018      	movs	r0, r3
 8001990:	f002 f91a 	bl	8003bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001994:	46c0      	nop			@ (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	200000c4 	.word	0x200000c4

080019a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019a4:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <SystemInit+0x14>)
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	0512      	lsls	r2, r2, #20
 80019aa:	609a      	str	r2, [r3, #8]
#endif
}
 80019ac:	46c0      	nop			@ (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019bc:	f7ff fff0 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019c2:	e003      	b.n	80019cc <LoopCopyDataInit>

080019c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80019c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019ca:	3104      	adds	r1, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019cc:	480a      	ldr	r0, [pc, #40]	@ (80019f8 <LoopForever+0xa>)
  ldr r3, =_edata
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <LoopForever+0xe>)
  adds r2, r0, r1
 80019d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019d4:	d3f6      	bcc.n	80019c4 <CopyDataInit>
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <LoopForever+0x12>)
  b LoopFillZerobss
 80019d8:	e002      	b.n	80019e0 <LoopFillZerobss>

080019da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  str  r3, [r2]
 80019dc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019de:	3204      	adds	r2, #4

080019e0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <LoopForever+0x16>)
  cmp r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019e4:	d3f9      	bcc.n	80019da <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80019e6:	f003 fde3 	bl	80055b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ea:	f7fe fd03 	bl	80003f4 <main>

080019ee <LoopForever>:

LoopForever:
    b LoopForever
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
  ldr   r0, =_estack
 80019f0:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 80019f4:	08005904 	.word	0x08005904
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019fc:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 8001a00:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8001a04:	20000448 	.word	0x20000448

08001a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_IRQHandler>

08001a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a10:	1dfb      	adds	r3, r7, #7
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a16:	2003      	movs	r0, #3
 8001a18:	f000 f80e 	bl	8001a38 <HAL_InitTick>
 8001a1c:	1e03      	subs	r3, r0, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001a20:	1dfb      	adds	r3, r7, #7
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e001      	b.n	8001a2c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a28:	f7ff fdf6 	bl	8001618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	781b      	ldrb	r3, [r3, #0]
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a40:	230f      	movs	r3, #15
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001a48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <HAL_InitTick+0x88>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d02b      	beq.n	8001aa8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <HAL_InitTick+0x8c>)
 8001a52:	681c      	ldr	r4, [r3, #0]
 8001a54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <HAL_InitTick+0x88>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	0019      	movs	r1, r3
 8001a5a:	23fa      	movs	r3, #250	@ 0xfa
 8001a5c:	0098      	lsls	r0, r3, #2
 8001a5e:	f7fe fb53 	bl	8000108 <__udivsi3>
 8001a62:	0003      	movs	r3, r0
 8001a64:	0019      	movs	r1, r3
 8001a66:	0020      	movs	r0, r4
 8001a68:	f7fe fb4e 	bl	8000108 <__udivsi3>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 f96f 	bl	8001d52 <HAL_SYSTICK_Config>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d112      	bne.n	8001a9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d80a      	bhi.n	8001a94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	2301      	movs	r3, #1
 8001a82:	425b      	negs	r3, r3
 8001a84:	2200      	movs	r2, #0
 8001a86:	0018      	movs	r0, r3
 8001a88:	f000 f92e 	bl	8001ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <HAL_InitTick+0x90>)
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e00d      	b.n	8001ab0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a94:	230f      	movs	r3, #15
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	e008      	b.n	8001ab0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e003      	b.n	8001ab0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	781b      	ldrb	r3, [r3, #0]
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b005      	add	sp, #20
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	2000001c 	.word	0x2000001c
 8001ac4:	20000014 	.word	0x20000014
 8001ac8:	20000018 	.word	0x20000018

08001acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_IncTick+0x1c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_IncTick+0x20>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	18d2      	adds	r2, r2, r3
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <HAL_IncTick+0x20>)
 8001ade:	601a      	str	r2, [r3, #0]
}
 8001ae0:	46c0      	nop			@ (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	2000001c 	.word	0x2000001c
 8001aec:	20000424 	.word	0x20000424

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b02      	ldr	r3, [pc, #8]	@ (8001b00 <HAL_GetTick+0x10>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	20000424 	.word	0x20000424

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff fff0 	bl	8001af0 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <HAL_Delay+0x44>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	001a      	movs	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	189b      	adds	r3, r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	f7ff ffe0 	bl	8001af0 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f7      	bhi.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	46c0      	nop			@ (mov r8, r8)
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b004      	add	sp, #16
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	2000001c 	.word	0x2000001c

08001b4c <__NVIC_EnableIRQ>:
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	0002      	movs	r2, r0
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b5e:	d809      	bhi.n	8001b74 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	001a      	movs	r2, r3
 8001b66:	231f      	movs	r3, #31
 8001b68:	401a      	ands	r2, r3
 8001b6a:	4b04      	ldr	r3, [pc, #16]	@ (8001b7c <__NVIC_EnableIRQ+0x30>)
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4091      	lsls	r1, r2
 8001b70:	000a      	movs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	46c0      	nop			@ (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_DisableIRQ>:
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	0002      	movs	r2, r0
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b92:	d810      	bhi.n	8001bb6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	001a      	movs	r2, r3
 8001b9a:	231f      	movs	r3, #31
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	4908      	ldr	r1, [pc, #32]	@ (8001bc0 <__NVIC_DisableIRQ+0x40>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	2280      	movs	r2, #128	@ 0x80
 8001ba8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001baa:	f3bf 8f4f 	dsb	sy
}
 8001bae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001bb0:	f3bf 8f6f 	isb	sy
}
 8001bb4:	46c0      	nop			@ (mov r8, r8)
}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	0002      	movs	r2, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bd8:	d828      	bhi.n	8001c2c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bda:	4a2f      	ldr	r2, [pc, #188]	@ (8001c98 <__NVIC_SetPriority+0xd4>)
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	33c0      	adds	r3, #192	@ 0xc0
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	589b      	ldr	r3, [r3, r2]
 8001bea:	1dfa      	adds	r2, r7, #7
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	0011      	movs	r1, r2
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	00d2      	lsls	r2, r2, #3
 8001bf6:	21ff      	movs	r1, #255	@ 0xff
 8001bf8:	4091      	lsls	r1, r2
 8001bfa:	000a      	movs	r2, r1
 8001bfc:	43d2      	mvns	r2, r2
 8001bfe:	401a      	ands	r2, r3
 8001c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	019b      	lsls	r3, r3, #6
 8001c06:	22ff      	movs	r2, #255	@ 0xff
 8001c08:	401a      	ands	r2, r3
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	2303      	movs	r3, #3
 8001c12:	4003      	ands	r3, r0
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c18:	481f      	ldr	r0, [pc, #124]	@ (8001c98 <__NVIC_SetPriority+0xd4>)
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b25b      	sxtb	r3, r3
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	430a      	orrs	r2, r1
 8001c24:	33c0      	adds	r3, #192	@ 0xc0
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	501a      	str	r2, [r3, r0]
}
 8001c2a:	e031      	b.n	8001c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c9c <__NVIC_SetPriority+0xd8>)
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	0019      	movs	r1, r3
 8001c34:	230f      	movs	r3, #15
 8001c36:	400b      	ands	r3, r1
 8001c38:	3b08      	subs	r3, #8
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3306      	adds	r3, #6
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	18d3      	adds	r3, r2, r3
 8001c42:	3304      	adds	r3, #4
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	1dfa      	adds	r2, r7, #7
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	400a      	ands	r2, r1
 8001c50:	00d2      	lsls	r2, r2, #3
 8001c52:	21ff      	movs	r1, #255	@ 0xff
 8001c54:	4091      	lsls	r1, r2
 8001c56:	000a      	movs	r2, r1
 8001c58:	43d2      	mvns	r2, r2
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	22ff      	movs	r2, #255	@ 0xff
 8001c64:	401a      	ands	r2, r3
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	4003      	ands	r3, r0
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c74:	4809      	ldr	r0, [pc, #36]	@ (8001c9c <__NVIC_SetPriority+0xd8>)
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	4023      	ands	r3, r4
 8001c80:	3b08      	subs	r3, #8
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	430a      	orrs	r2, r1
 8001c86:	3306      	adds	r3, #6
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	18c3      	adds	r3, r0, r3
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	46c0      	nop			@ (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b003      	add	sp, #12
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	045b      	lsls	r3, r3, #17
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d301      	bcc.n	8001cb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e010      	b.n	8001cda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <SysTick_Config+0x44>)
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	2103      	movs	r1, #3
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7ff ff7c 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <SysTick_Config+0x44>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <SysTick_Config+0x44>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	0018      	movs	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b002      	add	sp, #8
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	1c02      	adds	r2, r0, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	0011      	movs	r1, r2
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b004      	add	sp, #16
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	0002      	movs	r2, r0
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff ff11 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b002      	add	sp, #8
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	0002      	movs	r2, r0
 8001d3a:	1dfb      	adds	r3, r7, #7
 8001d3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff ff1b 	bl	8001b80 <__NVIC_DisableIRQ>
}
 8001d4a:	46c0      	nop			@ (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7ff ff9f 	bl	8001ca0 <SysTick_Config>
 8001d62:	0003      	movs	r3, r0
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e077      	b.n	8001e6e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a3d      	ldr	r2, [pc, #244]	@ (8001e78 <HAL_DMA_Init+0x10c>)
 8001d84:	4694      	mov	ip, r2
 8001d86:	4463      	add	r3, ip
 8001d88:	2114      	movs	r1, #20
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7fe f9bc 	bl	8000108 <__udivsi3>
 8001d90:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001d92:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2225      	movs	r2, #37	@ 0x25
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4934      	ldr	r1, [pc, #208]	@ (8001e7c <HAL_DMA_Init+0x110>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 fb21 	bl	8002430 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	01db      	lsls	r3, r3, #7
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d102      	bne.n	8001e00 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e08:	21ff      	movs	r1, #255	@ 0xff
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e16:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d011      	beq.n	8001e44 <HAL_DMA_Init+0xd8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d80d      	bhi.n	8001e44 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 fb2c 	bl	8002488 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e008      	b.n	8001e56 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2225      	movs	r2, #37	@ 0x25
 8001e60:	2101      	movs	r1, #1
 8001e62:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2224      	movs	r2, #36	@ 0x24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	bffdfff8 	.word	0xbffdfff8
 8001e7c:	ffff800f 	.word	0xffff800f

08001e80 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e066      	b.n	8001f60 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a30      	ldr	r2, [pc, #192]	@ (8001f68 <HAL_DMA_DeInit+0xe8>)
 8001ea8:	4694      	mov	ip, r2
 8001eaa:	4463      	add	r3, ip
 8001eac:	2114      	movs	r1, #20
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe f92a 	bl	8000108 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001eb6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001ec4:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <HAL_DMA_DeInit+0xec>)
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	221c      	movs	r2, #28
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <HAL_DMA_DeInit+0xec>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f000 faa7 	bl	8002430 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ef2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d010      	beq.n	8001f1e <HAL_DMA_DeInit+0x9e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d80c      	bhi.n	8001f1e <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fabe 	bl	8002488 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001f1c:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2225      	movs	r2, #37	@ 0x25
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2224      	movs	r2, #36	@ 0x24
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	bffdfff8 	.word	0xbffdfff8
 8001f6c:	40020000 	.word	0x40020000

08001f70 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2317      	movs	r3, #23
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2224      	movs	r2, #36	@ 0x24
 8001f8a:	5c9b      	ldrb	r3, [r3, r2]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_DMA_Start_IT+0x24>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e070      	b.n	8002076 <HAL_DMA_Start_IT+0x106>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2224      	movs	r2, #36	@ 0x24
 8001f98:	2101      	movs	r1, #1
 8001f9a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2225      	movs	r2, #37	@ 0x25
 8001fa0:	5c9b      	ldrb	r3, [r3, r2]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d157      	bne.n	8002058 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2225      	movs	r2, #37	@ 0x25
 8001fac:	2102      	movs	r1, #2
 8001fae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	438a      	bics	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f9ef 	bl	80023b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	210e      	movs	r1, #14
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e00f      	b.n	800200c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	210a      	movs	r1, #10
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	025b      	lsls	r3, r3, #9
 8002016:	4013      	ands	r3, r2
 8002018:	d008      	beq.n	800202c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002024:	2180      	movs	r1, #128	@ 0x80
 8002026:	0049      	lsls	r1, r1, #1
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800203e:	2180      	movs	r1, #128	@ 0x80
 8002040:	0049      	lsls	r1, r1, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2101      	movs	r1, #1
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e007      	b.n	8002068 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2224      	movs	r2, #36	@ 0x24
 800205c:	2100      	movs	r1, #0
 800205e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002060:	2317      	movs	r3, #23
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2202      	movs	r2, #2
 8002066:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2224      	movs	r2, #36	@ 0x24
 800206c:	2100      	movs	r1, #0
 800206e:	5499      	strb	r1, [r3, r2]

  return status;
 8002070:	2317      	movs	r3, #23
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	781b      	ldrb	r3, [r3, #0]
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b006      	add	sp, #24
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e050      	b.n	8002134 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2225      	movs	r2, #37	@ 0x25
 8002096:	5c9b      	ldrb	r3, [r3, r2]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d008      	beq.n	80020b0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2204      	movs	r2, #4
 80020a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2224      	movs	r2, #36	@ 0x24
 80020a8:	2100      	movs	r1, #0
 80020aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e041      	b.n	8002134 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	210e      	movs	r1, #14
 80020bc:	438a      	bics	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	491c      	ldr	r1, [pc, #112]	@ (800213c <HAL_DMA_Abort+0xbc>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2101      	movs	r1, #1
 80020dc:	438a      	bics	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80020e0:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <HAL_DMA_Abort+0xc0>)
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	221c      	movs	r2, #28
 80020ea:	4013      	ands	r3, r2
 80020ec:	2201      	movs	r2, #1
 80020ee:	409a      	lsls	r2, r3
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_DMA_Abort+0xc0>)
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00c      	beq.n	8002122 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002112:	490a      	ldr	r1, [pc, #40]	@ (800213c <HAL_DMA_Abort+0xbc>)
 8002114:	400a      	ands	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002120:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2225      	movs	r2, #37	@ 0x25
 8002126:	2101      	movs	r1, #1
 8002128:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2224      	movs	r2, #36	@ 0x24
 800212e:	2100      	movs	r1, #0
 8002130:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}
 800213c:	fffffeff 	.word	0xfffffeff
 8002140:	40020000 	.word	0x40020000

08002144 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800214c:	230f      	movs	r3, #15
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	@ 0x24
 8002158:	2100      	movs	r1, #0
 800215a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2224      	movs	r2, #36	@ 0x24
 8002160:	5c9b      	ldrb	r3, [r3, r2]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_DMA_Abort_IT+0x26>
 8002166:	2302      	movs	r3, #2
 8002168:	e05e      	b.n	8002228 <HAL_DMA_Abort_IT+0xe4>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2224      	movs	r2, #36	@ 0x24
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2225      	movs	r2, #37	@ 0x25
 8002176:	5c9b      	ldrb	r3, [r3, r2]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d007      	beq.n	800218e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2204      	movs	r2, #4
 8002182:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002184:	230f      	movs	r3, #15
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e049      	b.n	8002222 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	210e      	movs	r1, #14
 800219a:	438a      	bics	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	438a      	bics	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	491d      	ldr	r1, [pc, #116]	@ (8002230 <HAL_DMA_Abort_IT+0xec>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80021be:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_DMA_Abort_IT+0xf0>)
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	221c      	movs	r2, #28
 80021c8:	4013      	ands	r3, r2
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <HAL_DMA_Abort_IT+0xf0>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f0:	490f      	ldr	r1, [pc, #60]	@ (8002230 <HAL_DMA_Abort_IT+0xec>)
 80021f2:	400a      	ands	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80021fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2225      	movs	r2, #37	@ 0x25
 8002204:	2101      	movs	r1, #1
 8002206:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	@ 0x24
 800220c:	2100      	movs	r1, #0
 800220e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	0010      	movs	r0, r2
 8002220:	4798      	blx	r3
    }
  }
  return status;
 8002222:	230f      	movs	r3, #15
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b004      	add	sp, #16
 800222e:	bd80      	pop	{r7, pc}
 8002230:	fffffeff 	.word	0xfffffeff
 8002234:	40020000 	.word	0x40020000

08002238 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002240:	4b55      	ldr	r3, [pc, #340]	@ (8002398 <HAL_DMA_IRQHandler+0x160>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	221c      	movs	r2, #28
 8002254:	4013      	ands	r3, r2
 8002256:	2204      	movs	r2, #4
 8002258:	409a      	lsls	r2, r3
 800225a:	0013      	movs	r3, r2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	d027      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x7a>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2204      	movs	r2, #4
 8002266:	4013      	ands	r3, r2
 8002268:	d023      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2220      	movs	r2, #32
 8002272:	4013      	ands	r3, r2
 8002274:	d107      	bne.n	8002286 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2104      	movs	r1, #4
 8002282:	438a      	bics	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002286:	4b44      	ldr	r3, [pc, #272]	@ (8002398 <HAL_DMA_IRQHandler+0x160>)
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	221c      	movs	r2, #28
 8002290:	4013      	ands	r3, r2
 8002292:	2204      	movs	r2, #4
 8002294:	409a      	lsls	r2, r3
 8002296:	4b40      	ldr	r3, [pc, #256]	@ (8002398 <HAL_DMA_IRQHandler+0x160>)
 8002298:	430a      	orrs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d100      	bne.n	80022a6 <HAL_DMA_IRQHandler+0x6e>
 80022a4:	e073      	b.n	800238e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	0010      	movs	r0, r2
 80022ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80022b0:	e06d      	b.n	800238e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	221c      	movs	r2, #28
 80022b8:	4013      	ands	r3, r2
 80022ba:	2202      	movs	r2, #2
 80022bc:	409a      	lsls	r2, r3
 80022be:	0013      	movs	r3, r2
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	d02e      	beq.n	8002324 <HAL_DMA_IRQHandler+0xec>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d02a      	beq.n	8002324 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2220      	movs	r2, #32
 80022d6:	4013      	ands	r3, r2
 80022d8:	d10b      	bne.n	80022f2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	210a      	movs	r1, #10
 80022e6:	438a      	bics	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2225      	movs	r2, #37	@ 0x25
 80022ee:	2101      	movs	r1, #1
 80022f0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80022f2:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_DMA_IRQHandler+0x160>)
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	221c      	movs	r2, #28
 80022fc:	4013      	ands	r3, r2
 80022fe:	2202      	movs	r2, #2
 8002300:	409a      	lsls	r2, r3
 8002302:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_DMA_IRQHandler+0x160>)
 8002304:	430a      	orrs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2224      	movs	r2, #36	@ 0x24
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d03a      	beq.n	800238e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	0010      	movs	r0, r2
 8002320:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002322:	e034      	b.n	800238e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	221c      	movs	r2, #28
 800232a:	4013      	ands	r3, r2
 800232c:	2208      	movs	r2, #8
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	d02b      	beq.n	8002390 <HAL_DMA_IRQHandler+0x158>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2208      	movs	r2, #8
 800233c:	4013      	ands	r3, r2
 800233e:	d027      	beq.n	8002390 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	210e      	movs	r1, #14
 800234c:	438a      	bics	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_DMA_IRQHandler+0x160>)
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	221c      	movs	r2, #28
 800235a:	4013      	ands	r3, r2
 800235c:	2201      	movs	r2, #1
 800235e:	409a      	lsls	r2, r3
 8002360:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_DMA_IRQHandler+0x160>)
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2225      	movs	r2, #37	@ 0x25
 8002370:	2101      	movs	r1, #1
 8002372:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	@ 0x24
 8002378:	2100      	movs	r1, #0
 800237a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	0010      	movs	r0, r2
 800238c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	46c0      	nop			@ (mov r8, r8)
}
 8002392:	46bd      	mov	sp, r7
 8002394:	b004      	add	sp, #16
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40020000 	.word	0x40020000

0800239c <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80023d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80023da:	4b14      	ldr	r3, [pc, #80]	@ (800242c <DMA_SetConfig+0x7c>)
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	221c      	movs	r2, #28
 80023e4:	4013      	ands	r3, r2
 80023e6:	2201      	movs	r2, #1
 80023e8:	409a      	lsls	r2, r3
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <DMA_SetConfig+0x7c>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d108      	bne.n	8002412 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002410:	e007      	b.n	8002422 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	60da      	str	r2, [r3, #12]
}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	b004      	add	sp, #16
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	40020000 	.word	0x40020000

08002430 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	001a      	movs	r2, r3
 800243e:	23ff      	movs	r3, #255	@ 0xff
 8002440:	4013      	ands	r3, r2
 8002442:	3b08      	subs	r3, #8
 8002444:	2114      	movs	r1, #20
 8002446:	0018      	movs	r0, r3
 8002448:	f7fd fe5e 	bl	8000108 <__udivsi3>
 800244c:	0003      	movs	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002456:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002458:	4694      	mov	ip, r2
 800245a:	4463      	add	r3, ip
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	001a      	movs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002468:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	221c      	movs	r2, #28
 800246e:	4013      	ands	r3, r2
 8002470:	2201      	movs	r2, #1
 8002472:	409a      	lsls	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002478:	46c0      	nop			@ (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b004      	add	sp, #16
 800247e:	bd80      	pop	{r7, pc}
 8002480:	10008200 	.word	0x10008200
 8002484:	40020880 	.word	0x40020880

08002488 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	22ff      	movs	r2, #255	@ 0xff
 8002496:	4013      	ands	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	001a      	movs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a07      	ldr	r2, [pc, #28]	@ (80024cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	4013      	ands	r3, r2
 80024b8:	2201      	movs	r2, #1
 80024ba:	409a      	lsls	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	1000823f 	.word	0x1000823f
 80024cc:	40020940 	.word	0x40020940

080024d0 <HAL_FLASH_Program>:
  *               are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	603a      	str	r2, [r7, #0]
 80024dc:	607b      	str	r3, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_FLASH_Program+0x94>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_FLASH_Program+0x1a>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e038      	b.n	800255c <HAL_FLASH_Program+0x8c>
 80024ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <HAL_FLASH_Program+0x94>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <HAL_FLASH_Program+0x94>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024f6:	2517      	movs	r5, #23
 80024f8:	197c      	adds	r4, r7, r5
 80024fa:	23fa      	movs	r3, #250	@ 0xfa
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 f874 	bl	80025ec <FLASH_WaitForLastOperation>
 8002504:	0003      	movs	r3, r0
 8002506:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002508:	197b      	adds	r3, r7, r5
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11f      	bne.n	8002550 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d106      	bne.n	8002524 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	0008      	movs	r0, r1
 800251e:	f000 f8bf 	bl	80026a0 <FLASH_Program_DoubleWord>
 8002522:	e005      	b.n	8002530 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	0011      	movs	r1, r2
 800252a:	0018      	movs	r0, r3
 800252c:	f003 f87c 	bl	8005628 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002530:	2317      	movs	r3, #23
 8002532:	18fc      	adds	r4, r7, r3
 8002534:	23fa      	movs	r3, #250	@ 0xfa
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	0018      	movs	r0, r3
 800253a:	f000 f857 	bl	80025ec <FLASH_WaitForLastOperation>
 800253e:	0003      	movs	r3, r0
 8002540:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8002542:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_FLASH_Program+0x98>)
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43d9      	mvns	r1, r3
 800254a:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <HAL_FLASH_Program+0x98>)
 800254c:	400a      	ands	r2, r1
 800254e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <HAL_FLASH_Program+0x94>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002556:	2317      	movs	r3, #23
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	781b      	ldrb	r3, [r3, #0]
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b006      	add	sp, #24
 8002562:	bdb0      	pop	{r4, r5, r7, pc}
 8002564:	20000428 	.word	0x20000428
 8002568:	40022000 	.word	0x40022000

0800256c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	1dfb      	adds	r3, r7, #7
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_FLASH_Unlock+0x3c>)
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	da0c      	bge.n	800259a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002580:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_FLASH_Unlock+0x3c>)
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <HAL_FLASH_Unlock+0x40>)
 8002584:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <HAL_FLASH_Unlock+0x3c>)
 8002588:	4a09      	ldr	r2, [pc, #36]	@ (80025b0 <HAL_FLASH_Unlock+0x44>)
 800258a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_FLASH_Unlock+0x3c>)
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da02      	bge.n	800259a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8002594:	1dfb      	adds	r3, r7, #7
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800259a:	1dfb      	adds	r3, r7, #7
 800259c:	781b      	ldrb	r3, [r3, #0]
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b002      	add	sp, #8
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	40022000 	.word	0x40022000
 80025ac:	45670123 	.word	0x45670123
 80025b0:	cdef89ab 	.word	0xcdef89ab

080025b4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80025c0:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_FLASH_Lock+0x34>)
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <HAL_FLASH_Lock+0x34>)
 80025c6:	2180      	movs	r1, #128	@ 0x80
 80025c8:	0609      	lsls	r1, r1, #24
 80025ca:	430a      	orrs	r2, r1
 80025cc:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_FLASH_Lock+0x34>)
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	da02      	bge.n	80025dc <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	781b      	ldrb	r3, [r3, #0]
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40022000 	.word	0x40022000

080025ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80025f4:	f7ff fa7c 	bl	8001af0 <HAL_GetTick>
 80025f8:	0002      	movs	r2, r0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	189b      	adds	r3, r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 8002600:	e007      	b.n	8002612 <FLASH_WaitForLastOperation+0x26>
  {
    if (HAL_GetTick() >= timeout)
 8002602:	f7ff fa75 	bl	8001af0 <HAL_GetTick>
 8002606:	0002      	movs	r2, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4293      	cmp	r3, r2
 800260c:	d801      	bhi.n	8002612 <FLASH_WaitForLastOperation+0x26>
    {
      return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e03b      	b.n	800268a <FLASH_WaitForLastOperation+0x9e>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 8002612:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <FLASH_WaitForLastOperation+0xa8>)
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	401a      	ands	r2, r3
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	025b      	lsls	r3, r3, #9
 8002620:	429a      	cmp	r2, r3
 8002622:	d101      	bne.n	8002628 <FLASH_WaitForLastOperation+0x3c>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <FLASH_WaitForLastOperation+0x3e>
 8002628:	2300      	movs	r3, #0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1e9      	bne.n	8002602 <FLASH_WaitForLastOperation+0x16>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800262e:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <FLASH_WaitForLastOperation+0xa8>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	4a19      	ldr	r2, [pc, #100]	@ (8002698 <FLASH_WaitForLastOperation+0xac>)
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8002638:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <FLASH_WaitForLastOperation+0xa8>)
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <FLASH_WaitForLastOperation+0x62>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002644:	4b15      	ldr	r3, [pc, #84]	@ (800269c <FLASH_WaitForLastOperation+0xb0>)
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e01d      	b.n	800268a <FLASH_WaitForLastOperation+0x9e>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800264e:	f7ff fa4f 	bl	8001af0 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	189b      	adds	r3, r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800265a:	e007      	b.n	800266c <FLASH_WaitForLastOperation+0x80>
  {
    if (HAL_GetTick() >= timeout)
 800265c:	f7ff fa48 	bl	8001af0 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4293      	cmp	r3, r2
 8002666:	d801      	bhi.n	800266c <FLASH_WaitForLastOperation+0x80>
    {
      return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e00e      	b.n	800268a <FLASH_WaitForLastOperation+0x9e>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800266c:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <FLASH_WaitForLastOperation+0xa8>)
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	02db      	lsls	r3, r3, #11
 8002674:	401a      	ands	r2, r3
 8002676:	2380      	movs	r3, #128	@ 0x80
 8002678:	02db      	lsls	r3, r3, #11
 800267a:	429a      	cmp	r2, r3
 800267c:	d101      	bne.n	8002682 <FLASH_WaitForLastOperation+0x96>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <FLASH_WaitForLastOperation+0x98>
 8002682:	2300      	movs	r3, #0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e9      	bne.n	800265c <FLASH_WaitForLastOperation+0x70>
    }
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40022000 	.word	0x40022000
 8002698:	0000c3fa 	.word	0x0000c3fa
 800269c:	20000428 	.word	0x20000428

080026a0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80026a0:	b5b0      	push	{r4, r5, r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	603a      	str	r2, [r7, #0]
 80026aa:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <FLASH_Program_DoubleWord+0x3c>)
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <FLASH_Program_DoubleWord+0x3c>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	430a      	orrs	r2, r1
 80026b6:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80026be:	f3bf 8f6f 	isb	sy
}
 80026c2:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	001c      	movs	r4, r3
 80026c8:	2300      	movs	r3, #0
 80026ca:	001d      	movs	r5, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3304      	adds	r3, #4
 80026d0:	0022      	movs	r2, r4
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	46c0      	nop			@ (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b004      	add	sp, #16
 80026da:	bdb0      	pop	{r4, r5, r7, pc}
 80026dc:	40022000 	.word	0x40022000

080026e0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(const FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80026e0:	b5b0      	push	{r4, r5, r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026ea:	4b30      	ldr	r3, [pc, #192]	@ (80027ac <HAL_FLASHEx_Erase+0xcc>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_FLASHEx_Erase+0x16>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e056      	b.n	80027a4 <HAL_FLASHEx_Erase+0xc4>
 80026f6:	4b2d      	ldr	r3, [pc, #180]	@ (80027ac <HAL_FLASHEx_Erase+0xcc>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026fc:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_FLASHEx_Erase+0xcc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002702:	250f      	movs	r5, #15
 8002704:	197c      	adds	r4, r7, r5
 8002706:	23fa      	movs	r3, #250	@ 0xfa
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	0018      	movs	r0, r3
 800270c:	f7ff ff6e 	bl	80025ec <FLASH_WaitForLastOperation>
 8002710:	0003      	movs	r3, r0
 8002712:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002714:	002c      	movs	r4, r5
 8002716:	193b      	adds	r3, r7, r4
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d13c      	bne.n	8002798 <HAL_FLASHEx_Erase+0xb8>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b04      	cmp	r3, #4
 8002724:	d10a      	bne.n	800273c <HAL_FLASHEx_Erase+0x5c>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8002726:	f000 f845 	bl	80027b4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800272a:	193c      	adds	r4, r7, r4
 800272c:	23fa      	movs	r3, #250	@ 0xfa
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	0018      	movs	r0, r3
 8002732:	f7ff ff5b 	bl	80025ec <FLASH_WaitForLastOperation>
 8002736:	0003      	movs	r3, r0
 8002738:	7023      	strb	r3, [r4, #0]
 800273a:	e02d      	b.n	8002798 <HAL_FLASHEx_Erase+0xb8>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	4252      	negs	r2, r2
 8002742:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	e017      	b.n	800277c <HAL_FLASHEx_Erase+0x9c>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	0018      	movs	r0, r3
 8002750:	f000 f840 	bl	80027d4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002754:	250f      	movs	r5, #15
 8002756:	197c      	adds	r4, r7, r5
 8002758:	23fa      	movs	r3, #250	@ 0xfa
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	0018      	movs	r0, r3
 800275e:	f7ff ff45 	bl	80025ec <FLASH_WaitForLastOperation>
 8002762:	0003      	movs	r3, r0
 8002764:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8002766:	197b      	adds	r3, r7, r5
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_FLASHEx_Erase+0x96>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	601a      	str	r2, [r3, #0]
          break;
 8002774:	e00a      	b.n	800278c <HAL_FLASHEx_Erase+0xac>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3301      	adds	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	18d3      	adds	r3, r2, r3
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	429a      	cmp	r2, r3
 800278a:	d3df      	bcc.n	800274c <HAL_FLASHEx_Erase+0x6c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800278c:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <HAL_FLASHEx_Erase+0xd0>)
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <HAL_FLASHEx_Erase+0xd0>)
 8002792:	2102      	movs	r1, #2
 8002794:	438a      	bics	r2, r1
 8002796:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <HAL_FLASHEx_Erase+0xcc>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800279e:	230f      	movs	r3, #15
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	781b      	ldrb	r3, [r3, #0]
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b004      	add	sp, #16
 80027aa:	bdb0      	pop	{r4, r5, r7, pc}
 80027ac:	20000428 	.word	0x20000428
 80027b0:	40022000 	.word	0x40022000

080027b4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | FLASH_CR_MER1);
 80027b8:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <FLASH_MassErase+0x18>)
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <FLASH_MassErase+0x18>)
 80027be:	4904      	ldr	r1, [pc, #16]	@ (80027d0 <FLASH_MassErase+0x1c>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	615a      	str	r2, [r3, #20]
}
 80027c4:	46c0      	nop			@ (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	40022000 	.word	0x40022000
 80027d0:	00010004 	.word	0x00010004

080027d4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80027dc:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <FLASH_PageErase+0x2c>)
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	4a08      	ldr	r2, [pc, #32]	@ (8002804 <FLASH_PageErase+0x30>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	00da      	lsls	r2, r3, #3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <FLASH_PageErase+0x2c>)
 80027f0:	4905      	ldr	r1, [pc, #20]	@ (8002808 <FLASH_PageErase+0x34>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	615a      	str	r2, [r3, #20]
}
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b004      	add	sp, #16
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	40022000 	.word	0x40022000
 8002804:	fffffe07 	.word	0xfffffe07
 8002808:	00010002 	.word	0x00010002

0800280c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800281a:	e153      	b.n	8002ac4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2101      	movs	r1, #1
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4091      	lsls	r1, r2
 8002826:	000a      	movs	r2, r1
 8002828:	4013      	ands	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d100      	bne.n	8002834 <HAL_GPIO_Init+0x28>
 8002832:	e144      	b.n	8002abe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x38>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b12      	cmp	r3, #18
 8002842:	d125      	bne.n	8002890 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	0092      	lsls	r2, r2, #2
 800284e:	58d3      	ldr	r3, [r2, r3]
 8002850:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2207      	movs	r2, #7
 8002856:	4013      	ands	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	409a      	lsls	r2, r3
 800285e:	0013      	movs	r3, r2
 8002860:	43da      	mvns	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	220f      	movs	r2, #15
 800286e:	401a      	ands	r2, r3
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2107      	movs	r1, #7
 8002874:	400b      	ands	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	409a      	lsls	r2, r3
 800287a:	0013      	movs	r3, r2
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	08da      	lsrs	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3208      	adds	r2, #8
 800288a:	0092      	lsls	r2, r2, #2
 800288c:	6979      	ldr	r1, [r7, #20]
 800288e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	409a      	lsls	r2, r3
 800289e:	0013      	movs	r3, r2
 80028a0:	43da      	mvns	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	401a      	ands	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	409a      	lsls	r2, r3
 80028b6:	0013      	movs	r3, r2
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d00b      	beq.n	80028e4 <HAL_GPIO_Init+0xd8>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d007      	beq.n	80028e4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028d8:	2b11      	cmp	r3, #17
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b12      	cmp	r3, #18
 80028e2:	d130      	bne.n	8002946 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	409a      	lsls	r2, r3
 80028f2:	0013      	movs	r3, r2
 80028f4:	43da      	mvns	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	4013      	ands	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	409a      	lsls	r2, r3
 8002906:	0013      	movs	r3, r2
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800291a:	2201      	movs	r2, #1
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	409a      	lsls	r2, r3
 8002920:	0013      	movs	r3, r2
 8002922:	43da      	mvns	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	4013      	ands	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	2201      	movs	r2, #1
 8002932:	401a      	ands	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	409a      	lsls	r2, r3
 8002938:	0013      	movs	r3, r2
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d017      	beq.n	800297e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	409a      	lsls	r2, r3
 800295c:	0013      	movs	r3, r2
 800295e:	43da      	mvns	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	4013      	ands	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	409a      	lsls	r2, r3
 8002970:	0013      	movs	r3, r2
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	055b      	lsls	r3, r3, #21
 8002986:	4013      	ands	r3, r2
 8002988:	d100      	bne.n	800298c <HAL_GPIO_Init+0x180>
 800298a:	e098      	b.n	8002abe <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800298c:	4a53      	ldr	r2, [pc, #332]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3318      	adds	r3, #24
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	589b      	ldr	r3, [r3, r2]
 8002998:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2203      	movs	r2, #3
 800299e:	4013      	ands	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	220f      	movs	r2, #15
 80029a4:	409a      	lsls	r2, r3
 80029a6:	0013      	movs	r3, r2
 80029a8:	43da      	mvns	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	4013      	ands	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	23a0      	movs	r3, #160	@ 0xa0
 80029b4:	05db      	lsls	r3, r3, #23
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x1e2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a48      	ldr	r2, [pc, #288]	@ (8002ae0 <HAL_GPIO_Init+0x2d4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x1de>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a47      	ldr	r2, [pc, #284]	@ (8002ae4 <HAL_GPIO_Init+0x2d8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x1da>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a46      	ldr	r2, [pc, #280]	@ (8002ae8 <HAL_GPIO_Init+0x2dc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x1d6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a45      	ldr	r2, [pc, #276]	@ (8002aec <HAL_GPIO_Init+0x2e0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x1d2>
 80029da:	2305      	movs	r3, #5
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x1e4>
 80029de:	2306      	movs	r3, #6
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x1e4>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x1e4>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x1e4>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x1e4>
 80029ee:	2300      	movs	r3, #0
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	2103      	movs	r1, #3
 80029f4:	400a      	ands	r2, r1
 80029f6:	00d2      	lsls	r2, r2, #3
 80029f8:	4093      	lsls	r3, r2
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002a00:	4936      	ldr	r1, [pc, #216]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3318      	adds	r3, #24
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002a0e:	4a33      	ldr	r2, [pc, #204]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	58d3      	ldr	r3, [r2, r3]
 8002a14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	025b      	lsls	r3, r3, #9
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002a34:	4929      	ldr	r1, [pc, #164]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a36:	2280      	movs	r2, #128	@ 0x80
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002a3c:	4a27      	ldr	r2, [pc, #156]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a3e:	2384      	movs	r3, #132	@ 0x84
 8002a40:	58d3      	ldr	r3, [r2, r3]
 8002a42:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	4013      	ands	r3, r2
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002a62:	491e      	ldr	r1, [pc, #120]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a64:	2284      	movs	r2, #132	@ 0x84
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43da      	mvns	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	4013      	ands	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	035b      	lsls	r3, r3, #13
 8002a82:	4013      	ands	r3, r2
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	039b      	lsls	r3, r3, #14
 8002aac:	4013      	ands	r3, r2
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	40da      	lsrs	r2, r3
 8002acc:	1e13      	subs	r3, r2, #0
 8002ace:	d000      	beq.n	8002ad2 <HAL_GPIO_Init+0x2c6>
 8002ad0:	e6a4      	b.n	800281c <HAL_GPIO_Init+0x10>
  }
}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b006      	add	sp, #24
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021800 	.word	0x40021800
 8002ae0:	50000400 	.word	0x50000400
 8002ae4:	50000800 	.word	0x50000800
 8002ae8:	50000c00 	.word	0x50000c00
 8002aec:	50001400 	.word	0x50001400

08002af0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002afe:	e0ba      	b.n	8002c76 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002b00:	2201      	movs	r2, #1
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	409a      	lsls	r2, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d100      	bne.n	8002b14 <HAL_GPIO_DeInit+0x24>
 8002b12:	e0ad      	b.n	8002c70 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8002b14:	4a5d      	ldr	r2, [pc, #372]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3318      	adds	r3, #24
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	589b      	ldr	r3, [r3, r2]
 8002b20:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2203      	movs	r2, #3
 8002b26:	4013      	ands	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4013      	ands	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	23a0      	movs	r3, #160	@ 0xa0
 8002b38:	05db      	lsls	r3, r3, #23
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d019      	beq.n	8002b72 <HAL_GPIO_DeInit+0x82>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a53      	ldr	r2, [pc, #332]	@ (8002c90 <HAL_GPIO_DeInit+0x1a0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_GPIO_DeInit+0x7e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a52      	ldr	r2, [pc, #328]	@ (8002c94 <HAL_GPIO_DeInit+0x1a4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00d      	beq.n	8002b6a <HAL_GPIO_DeInit+0x7a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a51      	ldr	r2, [pc, #324]	@ (8002c98 <HAL_GPIO_DeInit+0x1a8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <HAL_GPIO_DeInit+0x76>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a50      	ldr	r2, [pc, #320]	@ (8002c9c <HAL_GPIO_DeInit+0x1ac>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <HAL_GPIO_DeInit+0x72>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_DeInit+0x84>
 8002b62:	2306      	movs	r3, #6
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_DeInit+0x84>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_DeInit+0x84>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_DeInit+0x84>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_DeInit+0x84>
 8002b72:	2300      	movs	r3, #0
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	2103      	movs	r1, #3
 8002b78:	400a      	ands	r2, r1
 8002b7a:	00d2      	lsls	r2, r2, #3
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d136      	bne.n	8002bf2 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002b84:	4a41      	ldr	r2, [pc, #260]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	58d3      	ldr	r3, [r2, r3]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	43d2      	mvns	r2, r2
 8002b8e:	493f      	ldr	r1, [pc, #252]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	2280      	movs	r2, #128	@ 0x80
 8002b94:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8002b96:	4a3d      	ldr	r2, [pc, #244]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002b98:	2384      	movs	r3, #132	@ 0x84
 8002b9a:	58d3      	ldr	r3, [r2, r3]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	43d2      	mvns	r2, r2
 8002ba0:	493a      	ldr	r1, [pc, #232]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2284      	movs	r2, #132	@ 0x84
 8002ba6:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002ba8:	4b38      	ldr	r3, [pc, #224]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43d9      	mvns	r1, r3
 8002bb0:	4b36      	ldr	r3, [pc, #216]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002bb6:	4b35      	ldr	r3, [pc, #212]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43d9      	mvns	r1, r3
 8002bbe:	4b33      	ldr	r3, [pc, #204]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	220f      	movs	r2, #15
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3318      	adds	r3, #24
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	589a      	ldr	r2, [r3, r2]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	4829      	ldr	r0, [pc, #164]	@ (8002c8c <HAL_GPIO_DeInit+0x19c>)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	400a      	ands	r2, r1
 8002bec:	3318      	adds	r3, #24
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	4099      	lsls	r1, r3
 8002bfe:	000b      	movs	r3, r1
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	58d3      	ldr	r3, [r2, r3]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	2107      	movs	r1, #7
 8002c16:	400a      	ands	r2, r1
 8002c18:	0092      	lsls	r2, r2, #2
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	4091      	lsls	r1, r2
 8002c1e:	000a      	movs	r2, r1
 8002c20:	43d1      	mvns	r1, r2
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	08d2      	lsrs	r2, r2, #3
 8002c26:	4019      	ands	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	0052      	lsls	r2, r2, #1
 8002c38:	2103      	movs	r1, #3
 8002c3a:	4091      	lsls	r1, r2
 8002c3c:	000a      	movs	r2, r1
 8002c3e:	43d2      	mvns	r2, r2
 8002c40:	401a      	ands	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4091      	lsls	r1, r2
 8002c50:	000a      	movs	r2, r1
 8002c52:	43d2      	mvns	r2, r2
 8002c54:	401a      	ands	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	0052      	lsls	r2, r2, #1
 8002c62:	2103      	movs	r1, #3
 8002c64:	4091      	lsls	r1, r2
 8002c66:	000a      	movs	r2, r1
 8002c68:	43d2      	mvns	r2, r2
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3301      	adds	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	40da      	lsrs	r2, r3
 8002c7c:	1e13      	subs	r3, r2, #0
 8002c7e:	d000      	beq.n	8002c82 <HAL_GPIO_DeInit+0x192>
 8002c80:	e73e      	b.n	8002b00 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	46c0      	nop			@ (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b006      	add	sp, #24
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021800 	.word	0x40021800
 8002c90:	50000400 	.word	0x50000400
 8002c94:	50000800 	.word	0x50000800
 8002c98:	50000c00 	.word	0x50000c00
 8002c9c:	50001400 	.word	0x50001400

08002ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	000a      	movs	r2, r1
 8002caa:	1cbb      	adds	r3, r7, #2
 8002cac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	1cba      	adds	r2, r7, #2
 8002cb4:	8812      	ldrh	r2, [r2, #0]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002cba:	230f      	movs	r3, #15
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e003      	b.n	8002ccc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ccc:	230f      	movs	r3, #15
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	781b      	ldrb	r3, [r3, #0]
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	0008      	movs	r0, r1
 8002ce4:	0011      	movs	r1, r2
 8002ce6:	1cbb      	adds	r3, r7, #2
 8002ce8:	1c02      	adds	r2, r0, #0
 8002cea:	801a      	strh	r2, [r3, #0]
 8002cec:	1c7b      	adds	r3, r7, #1
 8002cee:	1c0a      	adds	r2, r1, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf2:	1c7b      	adds	r3, r7, #1
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cfa:	1cbb      	adds	r3, r7, #2
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d02:	e003      	b.n	8002d0c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d04:	1cbb      	adds	r3, r7, #2
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e20f      	b.n	8003146 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d100      	bne.n	8002d32 <HAL_RCC_OscConfig+0x1e>
 8002d30:	e069      	b.n	8002e06 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d32:	4bc8      	ldr	r3, [pc, #800]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2238      	movs	r2, #56	@ 0x38
 8002d38:	4013      	ands	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d105      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d15d      	bne.n	8002e06 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e1fb      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	025b      	lsls	r3, r3, #9
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_OscConfig+0x56>
 8002d5a:	4bbe      	ldr	r3, [pc, #760]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4bbd      	ldr	r3, [pc, #756]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002d60:	2180      	movs	r1, #128	@ 0x80
 8002d62:	0249      	lsls	r1, r1, #9
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e020      	b.n	8002dac <HAL_RCC_OscConfig+0x98>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	23a0      	movs	r3, #160	@ 0xa0
 8002d70:	02db      	lsls	r3, r3, #11
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d10e      	bne.n	8002d94 <HAL_RCC_OscConfig+0x80>
 8002d76:	4bb7      	ldr	r3, [pc, #732]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4bb6      	ldr	r3, [pc, #728]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002d7c:	2180      	movs	r1, #128	@ 0x80
 8002d7e:	02c9      	lsls	r1, r1, #11
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	4bb3      	ldr	r3, [pc, #716]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4bb2      	ldr	r3, [pc, #712]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002d8a:	2180      	movs	r1, #128	@ 0x80
 8002d8c:	0249      	lsls	r1, r1, #9
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0x98>
 8002d94:	4baf      	ldr	r3, [pc, #700]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4bae      	ldr	r3, [pc, #696]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002d9a:	49af      	ldr	r1, [pc, #700]	@ (8003058 <HAL_RCC_OscConfig+0x344>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	4bac      	ldr	r3, [pc, #688]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4bab      	ldr	r3, [pc, #684]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002da6:	49ad      	ldr	r1, [pc, #692]	@ (800305c <HAL_RCC_OscConfig+0x348>)
 8002da8:	400a      	ands	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d014      	beq.n	8002dde <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe fe9c 	bl	8001af0 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002dbe:	f7fe fe97 	bl	8001af0 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	@ 0x64
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1ba      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd0:	4ba0      	ldr	r3, [pc, #640]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	@ 0x80
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0xaa>
 8002ddc:	e013      	b.n	8002e06 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe fe87 	bl	8001af0 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002de8:	f7fe fe82 	bl	8001af0 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	@ 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1a5      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfa:	4b96      	ldr	r3, [pc, #600]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	2380      	movs	r3, #128	@ 0x80
 8002e00:	029b      	lsls	r3, r3, #10
 8002e02:	4013      	ands	r3, r2
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <HAL_RCC_OscConfig+0xfe>
 8002e10:	e086      	b.n	8002f20 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e12:	4b90      	ldr	r3, [pc, #576]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2238      	movs	r2, #56	@ 0x38
 8002e18:	4013      	ands	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d12f      	bne.n	8002e82 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e18b      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2e:	4b89      	ldr	r3, [pc, #548]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a8b      	ldr	r2, [pc, #556]	@ (8003060 <HAL_RCC_OscConfig+0x34c>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	021a      	lsls	r2, r3, #8
 8002e3e:	4b85      	ldr	r3, [pc, #532]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d112      	bne.n	8002e70 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e4a:	4b82      	ldr	r3, [pc, #520]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a85      	ldr	r2, [pc, #532]	@ (8003064 <HAL_RCC_OscConfig+0x350>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	4b7e      	ldr	r3, [pc, #504]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	0adb      	lsrs	r3, r3, #11
 8002e64:	2207      	movs	r2, #7
 8002e66:	4013      	ands	r3, r2
 8002e68:	4a7f      	ldr	r2, [pc, #508]	@ (8003068 <HAL_RCC_OscConfig+0x354>)
 8002e6a:	40da      	lsrs	r2, r3
 8002e6c:	4b7f      	ldr	r3, [pc, #508]	@ (800306c <HAL_RCC_OscConfig+0x358>)
 8002e6e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e70:	4b7f      	ldr	r3, [pc, #508]	@ (8003070 <HAL_RCC_OscConfig+0x35c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7fe fddf 	bl	8001a38 <HAL_InitTick>
 8002e7a:	1e03      	subs	r3, r0, #0
 8002e7c:	d050      	beq.n	8002f20 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e161      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d030      	beq.n	8002eec <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e8a:	4b72      	ldr	r3, [pc, #456]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	@ (8003064 <HAL_RCC_OscConfig+0x350>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	4b6e      	ldr	r3, [pc, #440]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002ea4:	2180      	movs	r1, #128	@ 0x80
 8002ea6:	0049      	lsls	r1, r1, #1
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fe20 	bl	8001af0 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002eb6:	f7fe fe1b 	bl	8001af0 <HAL_GetTick>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e13e      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec8:	4b62      	ldr	r3, [pc, #392]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b5f      	ldr	r3, [pc, #380]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a61      	ldr	r2, [pc, #388]	@ (8003060 <HAL_RCC_OscConfig+0x34c>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	021a      	lsls	r2, r3, #8
 8002ee4:	4b5b      	ldr	r3, [pc, #364]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	e019      	b.n	8002f20 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002eec:	4b59      	ldr	r3, [pc, #356]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b58      	ldr	r3, [pc, #352]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002ef2:	4960      	ldr	r1, [pc, #384]	@ (8003074 <HAL_RCC_OscConfig+0x360>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fdfa 	bl	8001af0 <HAL_GetTick>
 8002efc:	0003      	movs	r3, r0
 8002efe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f02:	f7fe fdf5 	bl	8001af0 <HAL_GetTick>
 8002f06:	0002      	movs	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e118      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f14:	4b4f      	ldr	r3, [pc, #316]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2208      	movs	r2, #8
 8002f26:	4013      	ands	r3, r2
 8002f28:	d042      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2238      	movs	r2, #56	@ 0x38
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b18      	cmp	r3, #24
 8002f34:	d105      	bne.n	8002f42 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d138      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e101      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d019      	beq.n	8002f7e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b42      	ldr	r3, [pc, #264]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002f4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f4e:	4b41      	ldr	r3, [pc, #260]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002f50:	2101      	movs	r1, #1
 8002f52:	430a      	orrs	r2, r1
 8002f54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fe fdcb 	bl	8001af0 <HAL_GetTick>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002f60:	f7fe fdc6 	bl	8001af0 <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0e9      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f72:	4b38      	ldr	r3, [pc, #224]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d0f1      	beq.n	8002f60 <HAL_RCC_OscConfig+0x24c>
 8002f7c:	e018      	b.n	8002fb0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f7e:	4b35      	ldr	r3, [pc, #212]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002f80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f82:	4b34      	ldr	r3, [pc, #208]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002f84:	2101      	movs	r1, #1
 8002f86:	438a      	bics	r2, r1
 8002f88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fdb1 	bl	8001af0 <HAL_GetTick>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002f94:	f7fe fdac 	bl	8001af0 <HAL_GetTick>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0cf      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002faa:	2202      	movs	r2, #2
 8002fac:	4013      	ands	r3, r2
 8002fae:	d1f1      	bne.n	8002f94 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d100      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2a8>
 8002fba:	e084      	b.n	80030c6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbc:	230f      	movs	r3, #15
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002fc4:	4b23      	ldr	r3, [pc, #140]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2238      	movs	r2, #56	@ 0x38
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d000      	beq.n	8002fda <HAL_RCC_OscConfig+0x2c6>
 8002fd8:	e075      	b.n	80030c6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0b3      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x2e0>
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002fe8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fea:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002fec:	2101      	movs	r1, #1
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ff2:	e01c      	b.n	800302e <HAL_RCC_OscConfig+0x31a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d10c      	bne.n	8003016 <HAL_RCC_OscConfig+0x302>
 8002ffc:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8002ffe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003000:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8003002:	2104      	movs	r1, #4
 8003004:	430a      	orrs	r2, r1
 8003006:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003008:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 800300a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 800300e:	2101      	movs	r1, #1
 8003010:	430a      	orrs	r2, r1
 8003012:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003014:	e00b      	b.n	800302e <HAL_RCC_OscConfig+0x31a>
 8003016:	4b0f      	ldr	r3, [pc, #60]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8003018:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 800301c:	2101      	movs	r1, #1
 800301e:	438a      	bics	r2, r1
 8003020:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003022:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8003024:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <HAL_RCC_OscConfig+0x340>)
 8003028:	2104      	movs	r1, #4
 800302a:	438a      	bics	r2, r1
 800302c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d028      	beq.n	8003088 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fd5b 	bl	8001af0 <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800303e:	e01d      	b.n	800307c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003040:	f7fe fd56 	bl	8001af0 <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	4a0b      	ldr	r2, [pc, #44]	@ (8003078 <HAL_RCC_OscConfig+0x364>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d915      	bls.n	800307c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e078      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
 8003054:	40021000 	.word	0x40021000
 8003058:	fffeffff 	.word	0xfffeffff
 800305c:	fffbffff 	.word	0xfffbffff
 8003060:	ffff80ff 	.word	0xffff80ff
 8003064:	ffffc7ff 	.word	0xffffc7ff
 8003068:	02dc6c00 	.word	0x02dc6c00
 800306c:	20000014 	.word	0x20000014
 8003070:	20000018 	.word	0x20000018
 8003074:	fffffeff 	.word	0xfffffeff
 8003078:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800307c:	4b34      	ldr	r3, [pc, #208]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	2202      	movs	r2, #2
 8003082:	4013      	ands	r3, r2
 8003084:	d0dc      	beq.n	8003040 <HAL_RCC_OscConfig+0x32c>
 8003086:	e013      	b.n	80030b0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fd32 	bl	8001af0 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003090:	e009      	b.n	80030a6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe fd2d 	bl	8001af0 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	4a2d      	ldr	r2, [pc, #180]	@ (8003154 <HAL_RCC_OscConfig+0x440>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e04f      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80030a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	2202      	movs	r2, #2
 80030ac:	4013      	ands	r3, r2
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4b25      	ldr	r3, [pc, #148]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 80030bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030be:	4b24      	ldr	r3, [pc, #144]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 80030c0:	4925      	ldr	r1, [pc, #148]	@ (8003158 <HAL_RCC_OscConfig+0x444>)
 80030c2:	400a      	ands	r2, r1
 80030c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2210      	movs	r2, #16
 80030cc:	4013      	ands	r3, r2
 80030ce:	d039      	beq.n	8003144 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01b      	beq.n	8003110 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 80030de:	2180      	movs	r1, #128	@ 0x80
 80030e0:	03c9      	lsls	r1, r1, #15
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe fd03 	bl	8001af0 <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f0:	f7fe fcfe 	bl	8001af0 <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e021      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8003102:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	2380      	movs	r3, #128	@ 0x80
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	4013      	ands	r3, r2
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x3dc>
 800310e:	e019      	b.n	8003144 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003110:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 8003116:	4911      	ldr	r1, [pc, #68]	@ (800315c <HAL_RCC_OscConfig+0x448>)
 8003118:	400a      	ands	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fe fce8 	bl	8001af0 <HAL_GetTick>
 8003120:	0003      	movs	r3, r0
 8003122:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003126:	f7fe fce3 	bl	8001af0 <HAL_GetTick>
 800312a:	0002      	movs	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e006      	b.n	8003146 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_RCC_OscConfig+0x43c>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	4013      	ands	r3, r2
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b006      	add	sp, #24
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	40021000 	.word	0x40021000
 8003154:	00001388 	.word	0x00001388
 8003158:	efffffff 	.word	0xefffffff
 800315c:	ffbfffff 	.word	0xffbfffff

08003160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0f6      	b.n	8003362 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b7d      	ldr	r3, [pc, #500]	@ (800336c <HAL_RCC_ClockConfig+0x20c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2207      	movs	r2, #7
 800317a:	4013      	ands	r3, r2
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d91e      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b7a      	ldr	r3, [pc, #488]	@ (800336c <HAL_RCC_ClockConfig+0x20c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2207      	movs	r2, #7
 8003188:	4393      	bics	r3, r2
 800318a:	0019      	movs	r1, r3
 800318c:	4b77      	ldr	r3, [pc, #476]	@ (800336c <HAL_RCC_ClockConfig+0x20c>)
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003194:	f7fe fcac 	bl	8001af0 <HAL_GetTick>
 8003198:	0003      	movs	r3, r0
 800319a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800319c:	e009      	b.n	80031b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800319e:	f7fe fca7 	bl	8001af0 <HAL_GetTick>
 80031a2:	0002      	movs	r2, r0
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	4a71      	ldr	r2, [pc, #452]	@ (8003370 <HAL_RCC_ClockConfig+0x210>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0d7      	b.n	8003362 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031b2:	4b6e      	ldr	r3, [pc, #440]	@ (800336c <HAL_RCC_ClockConfig+0x20c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2207      	movs	r2, #7
 80031b8:	4013      	ands	r3, r2
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1ee      	bne.n	800319e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2202      	movs	r2, #2
 80031c6:	4013      	ands	r3, r2
 80031c8:	d017      	beq.n	80031fa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2204      	movs	r2, #4
 80031d0:	4013      	ands	r3, r2
 80031d2:	d008      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031d4:	4b67      	ldr	r3, [pc, #412]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4a67      	ldr	r2, [pc, #412]	@ (8003378 <HAL_RCC_ClockConfig+0x218>)
 80031da:	401a      	ands	r2, r3
 80031dc:	4b65      	ldr	r3, [pc, #404]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 80031de:	21b0      	movs	r1, #176	@ 0xb0
 80031e0:	0109      	lsls	r1, r1, #4
 80031e2:	430a      	orrs	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e6:	4b63      	ldr	r3, [pc, #396]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4a64      	ldr	r2, [pc, #400]	@ (800337c <HAL_RCC_ClockConfig+0x21c>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	4b5f      	ldr	r3, [pc, #380]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d100      	bne.n	8003206 <HAL_RCC_ClockConfig+0xa6>
 8003204:	e061      	b.n	80032ca <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8003206:	4b5b      	ldr	r3, [pc, #364]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	221c      	movs	r2, #28
 800320c:	4393      	bics	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	4b57      	ldr	r3, [pc, #348]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	4b54      	ldr	r3, [pc, #336]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	029b      	lsls	r3, r3, #10
 800322a:	4013      	ands	r3, r2
 800322c:	d12b      	bne.n	8003286 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e097      	b.n	8003362 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323a:	4b4e      	ldr	r3, [pc, #312]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4013      	ands	r3, r2
 8003244:	d11f      	bne.n	8003286 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e08b      	b.n	8003362 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8003252:	4b48      	ldr	r3, [pc, #288]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	4013      	ands	r3, r2
 800325c:	d113      	bne.n	8003286 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e07f      	b.n	8003362 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d106      	bne.n	8003278 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800326a:	4b42      	ldr	r3, [pc, #264]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 800326c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326e:	2202      	movs	r2, #2
 8003270:	4013      	ands	r3, r2
 8003272:	d108      	bne.n	8003286 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e074      	b.n	8003362 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003278:	4b3e      	ldr	r3, [pc, #248]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	2202      	movs	r2, #2
 800327e:	4013      	ands	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06d      	b.n	8003362 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003286:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2207      	movs	r2, #7
 800328c:	4393      	bics	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	4b37      	ldr	r3, [pc, #220]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 8003296:	430a      	orrs	r2, r1
 8003298:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329a:	f7fe fc29 	bl	8001af0 <HAL_GetTick>
 800329e:	0003      	movs	r3, r0
 80032a0:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e009      	b.n	80032b8 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fe fc24 	bl	8001af0 <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	4a30      	ldr	r2, [pc, #192]	@ (8003370 <HAL_RCC_ClockConfig+0x210>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e054      	b.n	8003362 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2238      	movs	r2, #56	@ 0x38
 80032be:	401a      	ands	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d1ec      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ca:	4b28      	ldr	r3, [pc, #160]	@ (800336c <HAL_RCC_ClockConfig+0x20c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2207      	movs	r2, #7
 80032d0:	4013      	ands	r3, r2
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d21e      	bcs.n	8003316 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d8:	4b24      	ldr	r3, [pc, #144]	@ (800336c <HAL_RCC_ClockConfig+0x20c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2207      	movs	r2, #7
 80032de:	4393      	bics	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	4b22      	ldr	r3, [pc, #136]	@ (800336c <HAL_RCC_ClockConfig+0x20c>)
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032ea:	f7fe fc01 	bl	8001af0 <HAL_GetTick>
 80032ee:	0003      	movs	r3, r0
 80032f0:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032f2:	e009      	b.n	8003308 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032f4:	f7fe fbfc 	bl	8001af0 <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003370 <HAL_RCC_ClockConfig+0x210>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e02c      	b.n	8003362 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003308:	4b18      	ldr	r3, [pc, #96]	@ (800336c <HAL_RCC_ClockConfig+0x20c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2207      	movs	r2, #7
 800330e:	4013      	ands	r3, r2
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d1ee      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2204      	movs	r2, #4
 800331c:	4013      	ands	r3, r2
 800331e:	d009      	beq.n	8003334 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b14      	ldr	r3, [pc, #80]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a16      	ldr	r2, [pc, #88]	@ (8003380 <HAL_RCC_ClockConfig+0x220>)
 8003326:	4013      	ands	r3, r2
 8003328:	0019      	movs	r1, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	4b11      	ldr	r3, [pc, #68]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 8003330:	430a      	orrs	r2, r1
 8003332:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003334:	f000 f82c 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8003338:	0001      	movs	r1, r0
 800333a:	4b0e      	ldr	r3, [pc, #56]	@ (8003374 <HAL_RCC_ClockConfig+0x214>)
 800333c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	220f      	movs	r2, #15
 8003342:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003344:	4b0f      	ldr	r3, [pc, #60]	@ (8003384 <HAL_RCC_ClockConfig+0x224>)
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800334a:	221f      	movs	r2, #31
 800334c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800334e:	000a      	movs	r2, r1
 8003350:	40da      	lsrs	r2, r3
 8003352:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <HAL_RCC_ClockConfig+0x228>)
 8003354:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003356:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <HAL_RCC_ClockConfig+0x22c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0018      	movs	r0, r3
 800335c:	f7fe fb6c 	bl	8001a38 <HAL_InitTick>
 8003360:	0003      	movs	r3, r0
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b004      	add	sp, #16
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			@ (mov r8, r8)
 800336c:	40022000 	.word	0x40022000
 8003370:	00001388 	.word	0x00001388
 8003374:	40021000 	.word	0x40021000
 8003378:	ffff84ff 	.word	0xffff84ff
 800337c:	fffff0ff 	.word	0xfffff0ff
 8003380:	ffff8fff 	.word	0xffff8fff
 8003384:	08005874 	.word	0x08005874
 8003388:	20000014 	.word	0x20000014
 800338c:	20000018 	.word	0x20000018

08003390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8003396:	4b27      	ldr	r3, [pc, #156]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	2207      	movs	r2, #7
 800339e:	4013      	ands	r3, r2
 80033a0:	3301      	adds	r3, #1
 80033a2:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033a4:	4b23      	ldr	r3, [pc, #140]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2238      	movs	r2, #56	@ 0x38
 80033aa:	4013      	ands	r3, r2
 80033ac:	d10f      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80033ae:	4b21      	ldr	r3, [pc, #132]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	0adb      	lsrs	r3, r3, #11
 80033b4:	2207      	movs	r2, #7
 80033b6:	4013      	ands	r3, r2
 80033b8:	2201      	movs	r2, #1
 80033ba:	409a      	lsls	r2, r3
 80033bc:	0013      	movs	r3, r2
 80033be:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	481d      	ldr	r0, [pc, #116]	@ (8003438 <HAL_RCC_GetSysClockFreq+0xa8>)
 80033c4:	f7fc fea0 	bl	8000108 <__udivsi3>
 80033c8:	0003      	movs	r3, r0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e027      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033ce:	4b19      	ldr	r3, [pc, #100]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2238      	movs	r2, #56	@ 0x38
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d102      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033da:	4b18      	ldr	r3, [pc, #96]	@ (800343c <HAL_RCC_GetSysClockFreq+0xac>)
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e01e      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80033e0:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2238      	movs	r2, #56	@ 0x38
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d103      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	e014      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2238      	movs	r2, #56	@ 0x38
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b18      	cmp	r3, #24
 80033fe:	d103      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003400:	23fa      	movs	r3, #250	@ 0xfa
 8003402:	01db      	lsls	r3, r3, #7
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e00a      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8003408:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <HAL_RCC_GetSysClockFreq+0xa4>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2238      	movs	r2, #56	@ 0x38
 800340e:	4013      	ands	r3, r2
 8003410:	2b10      	cmp	r3, #16
 8003412:	d102      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8003414:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e001      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7fc fe71 	bl	8000108 <__udivsi3>
 8003426:	0003      	movs	r3, r0
 8003428:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b004      	add	sp, #16
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	02dc6c00 	.word	0x02dc6c00
 800343c:	007a1200 	.word	0x007a1200

08003440 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003444:	f7ff ffa4 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8003448:	0001      	movs	r1, r0
 800344a:	4b09      	ldr	r3, [pc, #36]	@ (8003470 <HAL_RCC_GetHCLKFreq+0x30>)
 800344c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	220f      	movs	r2, #15
 8003452:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003454:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <HAL_RCC_GetHCLKFreq+0x34>)
 8003456:	0092      	lsls	r2, r2, #2
 8003458:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800345a:	221f      	movs	r2, #31
 800345c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800345e:	000a      	movs	r2, r1
 8003460:	40da      	lsrs	r2, r3
 8003462:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x38>)
 8003464:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8003466:	4b04      	ldr	r3, [pc, #16]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x38>)
 8003468:	681b      	ldr	r3, [r3, #0]
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	08005874 	.word	0x08005874
 8003478:	20000014 	.word	0x20000014

0800347c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003480:	f7ff ffde 	bl	8003440 <HAL_RCC_GetHCLKFreq>
 8003484:	0001      	movs	r1, r0
 8003486:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	0b1b      	lsrs	r3, r3, #12
 800348c:	2207      	movs	r2, #7
 800348e:	401a      	ands	r2, r3
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	58d3      	ldr	r3, [r2, r3]
 8003496:	221f      	movs	r2, #31
 8003498:	4013      	ands	r3, r2
 800349a:	40d9      	lsrs	r1, r3
 800349c:	000b      	movs	r3, r1
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	080058b4 	.word	0x080058b4

080034ac <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80034b4:	2313      	movs	r3, #19
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034bc:	2312      	movs	r3, #18
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2240      	movs	r2, #64	@ 0x40
 80034ca:	4013      	ands	r3, r2
 80034cc:	d100      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80034ce:	e079      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d0:	2011      	movs	r0, #17
 80034d2:	183b      	adds	r3, r7, r0
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034dc:	2380      	movs	r3, #128	@ 0x80
 80034de:	055b      	lsls	r3, r3, #21
 80034e0:	4013      	ands	r3, r2
 80034e2:	d110      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b67      	ldr	r3, [pc, #412]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034e8:	4b66      	ldr	r3, [pc, #408]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034ea:	2180      	movs	r1, #128	@ 0x80
 80034ec:	0549      	lsls	r1, r1, #21
 80034ee:	430a      	orrs	r2, r1
 80034f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034f2:	4b64      	ldr	r3, [pc, #400]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	055b      	lsls	r3, r3, #21
 80034fa:	4013      	ands	r3, r2
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003500:	183b      	adds	r3, r7, r0
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003506:	4b5f      	ldr	r3, [pc, #380]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003508:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800350a:	23c0      	movs	r3, #192	@ 0xc0
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4013      	ands	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d019      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	429a      	cmp	r2, r3
 8003520:	d014      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003522:	4b58      	ldr	r3, [pc, #352]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003526:	4a58      	ldr	r2, [pc, #352]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003528:	4013      	ands	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800352c:	4b55      	ldr	r3, [pc, #340]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800352e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003530:	4b54      	ldr	r3, [pc, #336]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003532:	2180      	movs	r1, #128	@ 0x80
 8003534:	0249      	lsls	r1, r1, #9
 8003536:	430a      	orrs	r2, r1
 8003538:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800353a:	4b52      	ldr	r3, [pc, #328]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800353c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800353e:	4b51      	ldr	r3, [pc, #324]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003540:	4952      	ldr	r1, [pc, #328]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003542:	400a      	ands	r2, r1
 8003544:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003546:	4b4f      	ldr	r3, [pc, #316]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d016      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe facc 	bl	8001af0 <HAL_GetTick>
 8003558:	0003      	movs	r3, r0
 800355a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800355c:	e00c      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe fac7 	bl	8001af0 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	4a49      	ldr	r2, [pc, #292]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d904      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800356e:	2313      	movs	r3, #19
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	2203      	movs	r2, #3
 8003574:	701a      	strb	r2, [r3, #0]
          break;
 8003576:	e004      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003578:	4b42      	ldr	r3, [pc, #264]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800357a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357c:	2202      	movs	r2, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d0ed      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003582:	2313      	movs	r3, #19
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358c:	4b3d      	ldr	r3, [pc, #244]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800358e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003590:	4a3d      	ldr	r2, [pc, #244]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	4b3a      	ldr	r3, [pc, #232]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800359c:	430a      	orrs	r2, r1
 800359e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035a0:	e005      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a2:	2312      	movs	r3, #18
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	2213      	movs	r2, #19
 80035a8:	18ba      	adds	r2, r7, r2
 80035aa:	7812      	ldrb	r2, [r2, #0]
 80035ac:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ae:	2311      	movs	r3, #17
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b32      	ldr	r3, [pc, #200]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035bc:	4b31      	ldr	r3, [pc, #196]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035be:	4935      	ldr	r1, [pc, #212]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2201      	movs	r2, #1
 80035ca:	4013      	ands	r3, r2
 80035cc:	d009      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	2203      	movs	r2, #3
 80035d4:	4393      	bics	r3, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	4b29      	ldr	r3, [pc, #164]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035de:	430a      	orrs	r2, r1
 80035e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2202      	movs	r2, #2
 80035e8:	4013      	ands	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ec:	4b25      	ldr	r3, [pc, #148]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f0:	4a29      	ldr	r2, [pc, #164]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	0019      	movs	r1, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035fc:	430a      	orrs	r2, r1
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2220      	movs	r2, #32
 8003606:	4013      	ands	r3, r2
 8003608:	d008      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800360a:	4b1e      	ldr	r3, [pc, #120]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800360c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	0899      	lsrs	r1, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	4b1b      	ldr	r3, [pc, #108]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003618:	430a      	orrs	r2, r1
 800361a:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2208      	movs	r2, #8
 8003622:	4013      	ands	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003626:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362a:	4a1c      	ldr	r2, [pc, #112]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800362c:	4013      	ands	r3, r2
 800362e:	0019      	movs	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	4b13      	ldr	r3, [pc, #76]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003636:	430a      	orrs	r2, r1
 8003638:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2204      	movs	r2, #4
 8003640:	4013      	ands	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003644:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	4a15      	ldr	r2, [pc, #84]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800364a:	4013      	ands	r3, r2
 800364c:	0019      	movs	r1, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003654:	430a      	orrs	r2, r1
 8003656:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2280      	movs	r2, #128	@ 0x80
 800365e:	4013      	ands	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003662:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	22e0      	movs	r2, #224	@ 0xe0
 8003668:	4393      	bics	r3, r2
 800366a:	0019      	movs	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003676:	2312      	movs	r3, #18
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	781b      	ldrb	r3, [r3, #0]
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b006      	add	sp, #24
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	fffffcff 	.word	0xfffffcff
 800368c:	fffeffff 	.word	0xfffeffff
 8003690:	00001388 	.word	0x00001388
 8003694:	efffffff 	.word	0xefffffff
 8003698:	ffffcfff 	.word	0xffffcfff
 800369c:	ffffefff 	.word	0xffffefff
 80036a0:	ffff3fff 	.word	0xffff3fff

080036a4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e032      	b.n	800371c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2288      	movs	r2, #136	@ 0x88
 80036ba:	2124      	movs	r1, #36	@ 0x24
 80036bc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	438a      	bics	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7fe f8c9 	bl	8001880 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2290      	movs	r2, #144	@ 0x90
 80036f2:	2100      	movs	r1, #0
 80036f4:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2288      	movs	r2, #136	@ 0x88
 80036fa:	2100      	movs	r1, #0
 80036fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	228c      	movs	r2, #140	@ 0x8c
 8003702:	2100      	movs	r1, #0
 8003704:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2284      	movs	r2, #132	@ 0x84
 8003716:	2100      	movs	r1, #0
 8003718:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	1dbb      	adds	r3, r7, #6
 8003730:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2288      	movs	r2, #136	@ 0x88
 8003736:	589b      	ldr	r3, [r3, r2]
 8003738:	2b20      	cmp	r3, #32
 800373a:	d000      	beq.n	800373e <HAL_UART_Transmit_DMA+0x1a>
 800373c:	e079      	b.n	8003832 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_UART_Transmit_DMA+0x28>
 8003744:	1dbb      	adds	r3, r7, #6
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e071      	b.n	8003834 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	015b      	lsls	r3, r3, #5
 8003758:	429a      	cmp	r2, r3
 800375a:	d109      	bne.n	8003770 <HAL_UART_Transmit_DMA+0x4c>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2201      	movs	r2, #1
 8003768:	4013      	ands	r3, r2
 800376a:	d001      	beq.n	8003770 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e061      	b.n	8003834 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1dba      	adds	r2, r7, #6
 800377a:	2154      	movs	r1, #84	@ 0x54
 800377c:	8812      	ldrh	r2, [r2, #0]
 800377e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1dba      	adds	r2, r7, #6
 8003784:	2156      	movs	r1, #86	@ 0x56
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2290      	movs	r2, #144	@ 0x90
 800378e:	2100      	movs	r1, #0
 8003790:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2288      	movs	r2, #136	@ 0x88
 8003796:	2121      	movs	r1, #33	@ 0x21
 8003798:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d028      	beq.n	80037f4 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a6:	4a25      	ldr	r2, [pc, #148]	@ (800383c <HAL_UART_Transmit_DMA+0x118>)
 80037a8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ae:	4a24      	ldr	r2, [pc, #144]	@ (8003840 <HAL_UART_Transmit_DMA+0x11c>)
 80037b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b6:	4a23      	ldr	r2, [pc, #140]	@ (8003844 <HAL_UART_Transmit_DMA+0x120>)
 80037b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037be:	2200      	movs	r2, #0
 80037c0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ca:	0019      	movs	r1, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3328      	adds	r3, #40	@ 0x28
 80037d2:	001a      	movs	r2, r3
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	f7fe fbca 	bl	8001f70 <HAL_DMA_Start_IT>
 80037dc:	1e03      	subs	r3, r0, #0
 80037de:	d009      	beq.n	80037f4 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2290      	movs	r2, #144	@ 0x90
 80037e4:	2110      	movs	r1, #16
 80037e6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2288      	movs	r2, #136	@ 0x88
 80037ec:	2120      	movs	r1, #32
 80037ee:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e01f      	b.n	8003834 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2240      	movs	r2, #64	@ 0x40
 80037fa:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003800:	613b      	str	r3, [r7, #16]
  return(result);
 8003802:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	2301      	movs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f383 8810 	msr	PRIMASK, r3
}
 8003810:	46c0      	nop			@ (mov r8, r8)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2180      	movs	r1, #128	@ 0x80
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f383 8810 	msr	PRIMASK, r3
}
 800382c:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	0018      	movs	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	b008      	add	sp, #32
 800383a:	bd80      	pop	{r7, pc}
 800383c:	08004bb5 	.word	0x08004bb5
 8003840:	08004c4d 	.word	0x08004c4d
 8003844:	08004ddf 	.word	0x08004ddf

08003848 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b096      	sub	sp, #88	@ 0x58
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003850:	f3ef 8310 	mrs	r3, PRIMASK
 8003854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003858:	657b      	str	r3, [r7, #84]	@ 0x54
 800385a:	2301      	movs	r3, #1
 800385c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	f383 8810 	msr	PRIMASK, r3
}
 8003864:	46c0      	nop			@ (mov r8, r8)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4979      	ldr	r1, [pc, #484]	@ (8003a58 <HAL_UART_Abort+0x210>)
 8003872:	400a      	ands	r2, r1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003878:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003882:	f3ef 8310 	mrs	r3, PRIMASK
 8003886:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8003888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800388a:	653b      	str	r3, [r7, #80]	@ 0x50
 800388c:	2301      	movs	r3, #1
 800388e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003892:	f383 8810 	msr	PRIMASK, r3
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	496e      	ldr	r1, [pc, #440]	@ (8003a5c <HAL_UART_Abort+0x214>)
 80038a4:	400a      	ands	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038aa:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ae:	f383 8810 	msr	PRIMASK, r3
}
 80038b2:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d118      	bne.n	80038ee <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038bc:	f3ef 8310 	mrs	r3, PRIMASK
 80038c0:	623b      	str	r3, [r7, #32]
  return(result);
 80038c2:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80038c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c6:	2301      	movs	r3, #1
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			@ (mov r8, r8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2110      	movs	r1, #16
 80038de:	438a      	bics	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2280      	movs	r2, #128	@ 0x80
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b80      	cmp	r3, #128	@ 0x80
 80038fa:	d135      	bne.n	8003968 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003900:	617b      	str	r3, [r7, #20]
  return(result);
 8003902:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003904:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003906:	2301      	movs	r3, #1
 8003908:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f383 8810 	msr	PRIMASK, r3
}
 8003910:	46c0      	nop			@ (mov r8, r8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2180      	movs	r1, #128	@ 0x80
 800391e:	438a      	bics	r2, r1
 8003920:	609a      	str	r2, [r3, #8]
 8003922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d018      	beq.n	8003968 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800393a:	2200      	movs	r2, #0
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003942:	0018      	movs	r0, r3
 8003944:	f7fe fb9c 	bl	8002080 <HAL_DMA_Abort>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d00d      	beq.n	8003968 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003950:	0018      	movs	r0, r3
 8003952:	f7fe fd23 	bl	800239c <HAL_DMA_GetError>
 8003956:	0003      	movs	r3, r0
 8003958:	2b20      	cmp	r3, #32
 800395a:	d105      	bne.n	8003968 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2290      	movs	r2, #144	@ 0x90
 8003960:	2110      	movs	r1, #16
 8003962:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e072      	b.n	8003a4e <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2240      	movs	r2, #64	@ 0x40
 8003970:	4013      	ands	r3, r2
 8003972:	2b40      	cmp	r3, #64	@ 0x40
 8003974:	d139      	bne.n	80039ea <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003976:	f3ef 8310 	mrs	r3, PRIMASK
 800397a:	60bb      	str	r3, [r7, #8]
  return(result);
 800397c:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003980:	2301      	movs	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f383 8810 	msr	PRIMASK, r3
}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2140      	movs	r1, #64	@ 0x40
 8003998:	438a      	bics	r2, r1
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800399e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f383 8810 	msr	PRIMASK, r3
}
 80039a6:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2280      	movs	r2, #128	@ 0x80
 80039ac:	589b      	ldr	r3, [r3, r2]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01b      	beq.n	80039ea <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2280      	movs	r2, #128	@ 0x80
 80039b6:	589b      	ldr	r3, [r3, r2]
 80039b8:	2200      	movs	r2, #0
 80039ba:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2280      	movs	r2, #128	@ 0x80
 80039c0:	589b      	ldr	r3, [r3, r2]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fe fb5c 	bl	8002080 <HAL_DMA_Abort>
 80039c8:	1e03      	subs	r3, r0, #0
 80039ca:	d00e      	beq.n	80039ea <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2280      	movs	r2, #128	@ 0x80
 80039d0:	589b      	ldr	r3, [r3, r2]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fe fce2 	bl	800239c <HAL_DMA_GetError>
 80039d8:	0003      	movs	r3, r0
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d105      	bne.n	80039ea <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2290      	movs	r2, #144	@ 0x90
 80039e2:	2110      	movs	r1, #16
 80039e4:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e031      	b.n	8003a4e <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2256      	movs	r2, #86	@ 0x56
 80039ee:	2100      	movs	r1, #0
 80039f0:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	225e      	movs	r2, #94	@ 0x5e
 80039f6:	2100      	movs	r1, #0
 80039f8:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	220f      	movs	r2, #15
 8003a00:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003a06:	2380      	movs	r3, #128	@ 0x80
 8003a08:	059b      	lsls	r3, r3, #22
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d107      	bne.n	8003a1e <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2110      	movs	r1, #16
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2108      	movs	r1, #8
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2288      	movs	r2, #136	@ 0x88
 8003a32:	2120      	movs	r1, #32
 8003a34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	228c      	movs	r2, #140	@ 0x8c
 8003a3a:	2120      	movs	r1, #32
 8003a3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2290      	movs	r2, #144	@ 0x90
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b016      	add	sp, #88	@ 0x58
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	fffffe1f 	.word	0xfffffe1f
 8003a5c:	ef7ffffe 	.word	0xef7ffffe

08003a60 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b092      	sub	sp, #72	@ 0x48
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a68:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6c:	623b      	str	r3, [r7, #32]
  return(result);
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8003a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a72:	2301      	movs	r3, #1
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	f383 8810 	msr	PRIMASK, r3
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	494d      	ldr	r1, [pc, #308]	@ (8003bc0 <HAL_UART_AbortReceive+0x160>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	f383 8810 	msr	PRIMASK, r3
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8003aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4942      	ldr	r1, [pc, #264]	@ (8003bc4 <HAL_UART_AbortReceive+0x164>)
 8003abc:	400a      	ands	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d118      	bne.n	8003b06 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad8:	617b      	str	r3, [r7, #20]
  return(result);
 8003ada:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ade:	2301      	movs	r3, #1
 8003ae0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			@ (mov r8, r8)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2110      	movs	r1, #16
 8003af6:	438a      	bics	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003afc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2240      	movs	r2, #64	@ 0x40
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b40      	cmp	r3, #64	@ 0x40
 8003b12:	d139      	bne.n	8003b88 <HAL_UART_AbortReceive+0x128>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b14:	f3ef 8310 	mrs	r3, PRIMASK
 8003b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b1e:	2301      	movs	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f383 8810 	msr	PRIMASK, r3
}
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2140      	movs	r1, #64	@ 0x40
 8003b36:	438a      	bics	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f383 8810 	msr	PRIMASK, r3
}
 8003b44:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2280      	movs	r2, #128	@ 0x80
 8003b4a:	589b      	ldr	r3, [r3, r2]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01b      	beq.n	8003b88 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	@ 0x80
 8003b54:	589b      	ldr	r3, [r3, r2]
 8003b56:	2200      	movs	r2, #0
 8003b58:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2280      	movs	r2, #128	@ 0x80
 8003b5e:	589b      	ldr	r3, [r3, r2]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f7fe fa8d 	bl	8002080 <HAL_DMA_Abort>
 8003b66:	1e03      	subs	r3, r0, #0
 8003b68:	d00e      	beq.n	8003b88 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2280      	movs	r2, #128	@ 0x80
 8003b6e:	589b      	ldr	r3, [r3, r2]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7fe fc13 	bl	800239c <HAL_DMA_GetError>
 8003b76:	0003      	movs	r3, r0
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d105      	bne.n	8003b88 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2290      	movs	r2, #144	@ 0x90
 8003b80:	2110      	movs	r1, #16
 8003b82:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e017      	b.n	8003bb8 <HAL_UART_AbortReceive+0x158>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	225e      	movs	r2, #94	@ 0x5e
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	220f      	movs	r2, #15
 8003b96:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2108      	movs	r1, #8
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	228c      	movs	r2, #140	@ 0x8c
 8003bac:	2120      	movs	r1, #32
 8003bae:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b012      	add	sp, #72	@ 0x48
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	fffffedf 	.word	0xfffffedf
 8003bc4:	effffffe 	.word	0xeffffffe

08003bc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b0aa      	sub	sp, #168	@ 0xa8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	22a4      	movs	r2, #164	@ 0xa4
 8003bd8:	18b9      	adds	r1, r7, r2
 8003bda:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	20a0      	movs	r0, #160	@ 0xa0
 8003be4:	1839      	adds	r1, r7, r0
 8003be6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	249c      	movs	r4, #156	@ 0x9c
 8003bf0:	1939      	adds	r1, r7, r4
 8003bf2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	18bb      	adds	r3, r7, r2
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4aa2      	ldr	r2, [pc, #648]	@ (8003e84 <HAL_UART_IRQHandler+0x2bc>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2298      	movs	r2, #152	@ 0x98
 8003c00:	18bd      	adds	r5, r7, r2
 8003c02:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003c04:	18bb      	adds	r3, r7, r2
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d11a      	bne.n	8003c42 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2220      	movs	r2, #32
 8003c12:	4013      	ands	r3, r2
 8003c14:	d015      	beq.n	8003c42 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d105      	bne.n	8003c2c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c20:	193b      	adds	r3, r7, r4
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	2380      	movs	r3, #128	@ 0x80
 8003c26:	055b      	lsls	r3, r3, #21
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d00a      	beq.n	8003c42 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d100      	bne.n	8003c36 <HAL_UART_IRQHandler+0x6e>
 8003c34:	e2fb      	b.n	800422e <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	0010      	movs	r0, r2
 8003c3e:	4798      	blx	r3
      }
      return;
 8003c40:	e2f5      	b.n	800422e <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c42:	2398      	movs	r3, #152	@ 0x98
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d100      	bne.n	8003c4e <HAL_UART_IRQHandler+0x86>
 8003c4c:	e122      	b.n	8003e94 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c4e:	239c      	movs	r3, #156	@ 0x9c
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a8c      	ldr	r2, [pc, #560]	@ (8003e88 <HAL_UART_IRQHandler+0x2c0>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	d106      	bne.n	8003c68 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c5a:	23a0      	movs	r3, #160	@ 0xa0
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a8a      	ldr	r2, [pc, #552]	@ (8003e8c <HAL_UART_IRQHandler+0x2c4>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	d100      	bne.n	8003c68 <HAL_UART_IRQHandler+0xa0>
 8003c66:	e115      	b.n	8003e94 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c68:	23a4      	movs	r3, #164	@ 0xa4
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	4013      	ands	r3, r2
 8003c72:	d012      	beq.n	8003c9a <HAL_UART_IRQHandler+0xd2>
 8003c74:	23a0      	movs	r3, #160	@ 0xa0
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	2380      	movs	r3, #128	@ 0x80
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d00b      	beq.n	8003c9a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2201      	movs	r2, #1
 8003c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2290      	movs	r2, #144	@ 0x90
 8003c8e:	589b      	ldr	r3, [r3, r2]
 8003c90:	2201      	movs	r2, #1
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2190      	movs	r1, #144	@ 0x90
 8003c98:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c9a:	23a4      	movs	r3, #164	@ 0xa4
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d011      	beq.n	8003cca <HAL_UART_IRQHandler+0x102>
 8003ca6:	239c      	movs	r3, #156	@ 0x9c
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d00b      	beq.n	8003cca <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2290      	movs	r2, #144	@ 0x90
 8003cbe:	589b      	ldr	r3, [r3, r2]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2190      	movs	r1, #144	@ 0x90
 8003cc8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cca:	23a4      	movs	r3, #164	@ 0xa4
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d011      	beq.n	8003cfa <HAL_UART_IRQHandler+0x132>
 8003cd6:	239c      	movs	r3, #156	@ 0x9c
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2290      	movs	r2, #144	@ 0x90
 8003cee:	589b      	ldr	r3, [r3, r2]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2190      	movs	r1, #144	@ 0x90
 8003cf8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cfa:	23a4      	movs	r3, #164	@ 0xa4
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2208      	movs	r2, #8
 8003d02:	4013      	ands	r3, r2
 8003d04:	d017      	beq.n	8003d36 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d06:	23a0      	movs	r3, #160	@ 0xa0
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d105      	bne.n	8003d1e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d12:	239c      	movs	r3, #156	@ 0x9c
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a5b      	ldr	r2, [pc, #364]	@ (8003e88 <HAL_UART_IRQHandler+0x2c0>)
 8003d1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d1c:	d00b      	beq.n	8003d36 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2208      	movs	r2, #8
 8003d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2290      	movs	r2, #144	@ 0x90
 8003d2a:	589b      	ldr	r3, [r3, r2]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2190      	movs	r1, #144	@ 0x90
 8003d34:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d36:	23a4      	movs	r3, #164	@ 0xa4
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	2380      	movs	r3, #128	@ 0x80
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	4013      	ands	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_UART_IRQHandler+0x1a4>
 8003d44:	23a0      	movs	r3, #160	@ 0xa0
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	@ 0x80
 8003d4c:	04db      	lsls	r3, r3, #19
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d00c      	beq.n	8003d6c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2280      	movs	r2, #128	@ 0x80
 8003d58:	0112      	lsls	r2, r2, #4
 8003d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2290      	movs	r2, #144	@ 0x90
 8003d60:	589b      	ldr	r3, [r3, r2]
 8003d62:	2220      	movs	r2, #32
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2190      	movs	r1, #144	@ 0x90
 8003d6a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2290      	movs	r2, #144	@ 0x90
 8003d70:	589b      	ldr	r3, [r3, r2]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d100      	bne.n	8003d78 <HAL_UART_IRQHandler+0x1b0>
 8003d76:	e25c      	b.n	8004232 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d78:	23a4      	movs	r3, #164	@ 0xa4
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	4013      	ands	r3, r2
 8003d82:	d015      	beq.n	8003db0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d84:	23a0      	movs	r3, #160	@ 0xa0
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d106      	bne.n	8003d9e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d90:	239c      	movs	r3, #156	@ 0x9c
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	2380      	movs	r3, #128	@ 0x80
 8003d98:	055b      	lsls	r3, r3, #21
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d008      	beq.n	8003db0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	0010      	movs	r0, r2
 8003dae:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2290      	movs	r2, #144	@ 0x90
 8003db4:	589b      	ldr	r3, [r3, r2]
 8003db6:	2194      	movs	r1, #148	@ 0x94
 8003db8:	187a      	adds	r2, r7, r1
 8003dba:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2240      	movs	r2, #64	@ 0x40
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d004      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2228      	movs	r2, #40	@ 0x28
 8003dd0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd2:	d04c      	beq.n	8003e6e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f000 fe86 	bl	8004ae8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2240      	movs	r2, #64	@ 0x40
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b40      	cmp	r3, #64	@ 0x40
 8003de8:	d13c      	bne.n	8003e64 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003dea:	f3ef 8310 	mrs	r3, PRIMASK
 8003dee:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003df0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	2090      	movs	r0, #144	@ 0x90
 8003df4:	183a      	adds	r2, r7, r0
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	2301      	movs	r3, #1
 8003dfa:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dfe:	f383 8810 	msr	PRIMASK, r3
}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2140      	movs	r1, #64	@ 0x40
 8003e10:	438a      	bics	r2, r1
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	183b      	adds	r3, r7, r0
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e1c:	f383 8810 	msr	PRIMASK, r3
}
 8003e20:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2280      	movs	r2, #128	@ 0x80
 8003e26:	589b      	ldr	r3, [r3, r2]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d016      	beq.n	8003e5a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2280      	movs	r2, #128	@ 0x80
 8003e30:	589b      	ldr	r3, [r3, r2]
 8003e32:	4a17      	ldr	r2, [pc, #92]	@ (8003e90 <HAL_UART_IRQHandler+0x2c8>)
 8003e34:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2280      	movs	r2, #128	@ 0x80
 8003e3a:	589b      	ldr	r3, [r3, r2]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7fe f981 	bl	8002144 <HAL_DMA_Abort_IT>
 8003e42:	1e03      	subs	r3, r0, #0
 8003e44:	d01c      	beq.n	8003e80 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2280      	movs	r2, #128	@ 0x80
 8003e4a:	589b      	ldr	r3, [r3, r2]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	2180      	movs	r1, #128	@ 0x80
 8003e52:	5852      	ldr	r2, [r2, r1]
 8003e54:	0010      	movs	r0, r2
 8003e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	e012      	b.n	8003e80 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fc fe9b 	bl	8000b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e62:	e00d      	b.n	8003e80 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7fc fe96 	bl	8000b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	e008      	b.n	8003e80 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7fc fe91 	bl	8000b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2290      	movs	r2, #144	@ 0x90
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003e7e:	e1d8      	b.n	8004232 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	46c0      	nop			@ (mov r8, r8)
    return;
 8003e82:	e1d6      	b.n	8004232 <HAL_UART_IRQHandler+0x66a>
 8003e84:	0000080f 	.word	0x0000080f
 8003e88:	10000001 	.word	0x10000001
 8003e8c:	04000120 	.word	0x04000120
 8003e90:	08004e65 	.word	0x08004e65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d000      	beq.n	8003e9e <HAL_UART_IRQHandler+0x2d6>
 8003e9c:	e15d      	b.n	800415a <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e9e:	23a4      	movs	r3, #164	@ 0xa4
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d100      	bne.n	8003eac <HAL_UART_IRQHandler+0x2e4>
 8003eaa:	e156      	b.n	800415a <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003eac:	23a0      	movs	r3, #160	@ 0xa0
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d100      	bne.n	8003eba <HAL_UART_IRQHandler+0x2f2>
 8003eb8:	e14f      	b.n	800415a <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2240      	movs	r2, #64	@ 0x40
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b40      	cmp	r3, #64	@ 0x40
 8003ece:	d000      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x30a>
 8003ed0:	e0c3      	b.n	800405a <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2280      	movs	r2, #128	@ 0x80
 8003ed6:	589b      	ldr	r3, [r3, r2]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	217e      	movs	r1, #126	@ 0x7e
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ee2:	187b      	adds	r3, r7, r1
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d100      	bne.n	8003eec <HAL_UART_IRQHandler+0x324>
 8003eea:	e097      	b.n	800401c <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	225c      	movs	r2, #92	@ 0x5c
 8003ef0:	5a9b      	ldrh	r3, [r3, r2]
 8003ef2:	187a      	adds	r2, r7, r1
 8003ef4:	8812      	ldrh	r2, [r2, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d300      	bcc.n	8003efc <HAL_UART_IRQHandler+0x334>
 8003efa:	e08f      	b.n	800401c <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	187a      	adds	r2, r7, r1
 8003f00:	215e      	movs	r1, #94	@ 0x5e
 8003f02:	8812      	ldrh	r2, [r2, #0]
 8003f04:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2280      	movs	r2, #128	@ 0x80
 8003f0a:	589b      	ldr	r3, [r3, r2]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2220      	movs	r2, #32
 8003f12:	4013      	ands	r3, r2
 8003f14:	d170      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f16:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f20:	2301      	movs	r3, #1
 8003f22:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f26:	f383 8810 	msr	PRIMASK, r3
}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	49c4      	ldr	r1, [pc, #784]	@ (8004248 <HAL_UART_IRQHandler+0x680>)
 8003f38:	400a      	ands	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	f383 8810 	msr	PRIMASK, r3
}
 8003f46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f48:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f50:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f52:	2301      	movs	r3, #1
 8003f54:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	438a      	bics	r2, r1
 8003f6c:	609a      	str	r2, [r3, #8]
 8003f6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f70:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f74:	f383 8810 	msr	PRIMASK, r3
}
 8003f78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003f80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f82:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f84:	2301      	movs	r3, #1
 8003f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f8a:	f383 8810 	msr	PRIMASK, r3
}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2140      	movs	r1, #64	@ 0x40
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fa2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	228c      	movs	r2, #140	@ 0x8c
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fba:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2110      	movs	r1, #16
 8003fdc:	438a      	bics	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe6:	f383 8810 	msr	PRIMASK, r3
}
 8003fea:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2280      	movs	r2, #128	@ 0x80
 8003ff0:	589b      	ldr	r3, [r3, r2]
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f7fe f844 	bl	8002080 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	225c      	movs	r2, #92	@ 0x5c
 8004002:	5a9a      	ldrh	r2, [r3, r2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	215e      	movs	r1, #94	@ 0x5e
 8004008:	5a5b      	ldrh	r3, [r3, r1]
 800400a:	b29b      	uxth	r3, r3
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	0011      	movs	r1, r2
 8004014:	0018      	movs	r0, r3
 8004016:	f7fc fd55 	bl	8000ac4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800401a:	e10c      	b.n	8004236 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	225c      	movs	r2, #92	@ 0x5c
 8004020:	5a9b      	ldrh	r3, [r3, r2]
 8004022:	227e      	movs	r2, #126	@ 0x7e
 8004024:	18ba      	adds	r2, r7, r2
 8004026:	8812      	ldrh	r2, [r2, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d000      	beq.n	800402e <HAL_UART_IRQHandler+0x466>
 800402c:	e103      	b.n	8004236 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2280      	movs	r2, #128	@ 0x80
 8004032:	589b      	ldr	r3, [r3, r2]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2220      	movs	r2, #32
 800403a:	4013      	ands	r3, r2
 800403c:	2b20      	cmp	r3, #32
 800403e:	d000      	beq.n	8004042 <HAL_UART_IRQHandler+0x47a>
 8004040:	e0f9      	b.n	8004236 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	225c      	movs	r2, #92	@ 0x5c
 800404c:	5a9a      	ldrh	r2, [r3, r2]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0011      	movs	r1, r2
 8004052:	0018      	movs	r0, r3
 8004054:	f7fc fd36 	bl	8000ac4 <HAL_UARTEx_RxEventCallback>
      return;
 8004058:	e0ed      	b.n	8004236 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	225c      	movs	r2, #92	@ 0x5c
 800405e:	5a99      	ldrh	r1, [r3, r2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	225e      	movs	r2, #94	@ 0x5e
 8004064:	5a9b      	ldrh	r3, [r3, r2]
 8004066:	b29a      	uxth	r2, r3
 8004068:	208e      	movs	r0, #142	@ 0x8e
 800406a:	183b      	adds	r3, r7, r0
 800406c:	1a8a      	subs	r2, r1, r2
 800406e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	225e      	movs	r2, #94	@ 0x5e
 8004074:	5a9b      	ldrh	r3, [r3, r2]
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d100      	bne.n	800407e <HAL_UART_IRQHandler+0x4b6>
 800407c:	e0dd      	b.n	800423a <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 800407e:	183b      	adds	r3, r7, r0
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d100      	bne.n	8004088 <HAL_UART_IRQHandler+0x4c0>
 8004086:	e0d8      	b.n	800423a <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004088:	f3ef 8310 	mrs	r3, PRIMASK
 800408c:	60fb      	str	r3, [r7, #12]
  return(result);
 800408e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004090:	2488      	movs	r4, #136	@ 0x88
 8004092:	193a      	adds	r2, r7, r4
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	2301      	movs	r3, #1
 8004098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f383 8810 	msr	PRIMASK, r3
}
 80040a0:	46c0      	nop			@ (mov r8, r8)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4967      	ldr	r1, [pc, #412]	@ (800424c <HAL_UART_IRQHandler+0x684>)
 80040ae:	400a      	ands	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	193b      	adds	r3, r7, r4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80040c6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040c8:	2484      	movs	r4, #132	@ 0x84
 80040ca:	193a      	adds	r2, r7, r4
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	2301      	movs	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f383 8810 	msr	PRIMASK, r3
}
 80040d8:	46c0      	nop			@ (mov r8, r8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	495a      	ldr	r1, [pc, #360]	@ (8004250 <HAL_UART_IRQHandler+0x688>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	f383 8810 	msr	PRIMASK, r3
}
 80040f6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	228c      	movs	r2, #140	@ 0x8c
 80040fc:	2120      	movs	r1, #32
 80040fe:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800410c:	f3ef 8310 	mrs	r3, PRIMASK
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	2480      	movs	r4, #128	@ 0x80
 8004116:	193a      	adds	r2, r7, r4
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	2301      	movs	r3, #1
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			@ (mov r8, r8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2110      	movs	r1, #16
 8004132:	438a      	bics	r2, r1
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	193b      	adds	r3, r7, r4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800414a:	183b      	adds	r3, r7, r0
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0011      	movs	r1, r2
 8004152:	0018      	movs	r0, r3
 8004154:	f7fc fcb6 	bl	8000ac4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004158:	e06f      	b.n	800423a <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800415a:	23a4      	movs	r3, #164	@ 0xa4
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2380      	movs	r3, #128	@ 0x80
 8004162:	035b      	lsls	r3, r3, #13
 8004164:	4013      	ands	r3, r2
 8004166:	d010      	beq.n	800418a <HAL_UART_IRQHandler+0x5c2>
 8004168:	239c      	movs	r3, #156	@ 0x9c
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	03db      	lsls	r3, r3, #15
 8004172:	4013      	ands	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2280      	movs	r2, #128	@ 0x80
 800417c:	0352      	lsls	r2, r2, #13
 800417e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0018      	movs	r0, r3
 8004184:	f000 ff24 	bl	8004fd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004188:	e05a      	b.n	8004240 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800418a:	23a4      	movs	r3, #164	@ 0xa4
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2280      	movs	r2, #128	@ 0x80
 8004192:	4013      	ands	r3, r2
 8004194:	d016      	beq.n	80041c4 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004196:	23a0      	movs	r3, #160	@ 0xa0
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2280      	movs	r2, #128	@ 0x80
 800419e:	4013      	ands	r3, r2
 80041a0:	d106      	bne.n	80041b0 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80041a2:	239c      	movs	r3, #156	@ 0x9c
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	2380      	movs	r3, #128	@ 0x80
 80041aa:	041b      	lsls	r3, r3, #16
 80041ac:	4013      	ands	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d042      	beq.n	800423e <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	0010      	movs	r0, r2
 80041c0:	4798      	blx	r3
    }
    return;
 80041c2:	e03c      	b.n	800423e <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041c4:	23a4      	movs	r3, #164	@ 0xa4
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2240      	movs	r2, #64	@ 0x40
 80041cc:	4013      	ands	r3, r2
 80041ce:	d00a      	beq.n	80041e6 <HAL_UART_IRQHandler+0x61e>
 80041d0:	23a0      	movs	r3, #160	@ 0xa0
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2240      	movs	r2, #64	@ 0x40
 80041d8:	4013      	ands	r3, r2
 80041da:	d004      	beq.n	80041e6 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	0018      	movs	r0, r3
 80041e0:	f000 fe57 	bl	8004e92 <UART_EndTransmit_IT>
    return;
 80041e4:	e02c      	b.n	8004240 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041e6:	23a4      	movs	r3, #164	@ 0xa4
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	@ 0x80
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	4013      	ands	r3, r2
 80041f2:	d00b      	beq.n	800420c <HAL_UART_IRQHandler+0x644>
 80041f4:	23a0      	movs	r3, #160	@ 0xa0
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	05db      	lsls	r3, r3, #23
 80041fe:	4013      	ands	r3, r2
 8004200:	d004      	beq.n	800420c <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 fef3 	bl	8004ff0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800420a:	e019      	b.n	8004240 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800420c:	23a4      	movs	r3, #164	@ 0xa4
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	2380      	movs	r3, #128	@ 0x80
 8004214:	045b      	lsls	r3, r3, #17
 8004216:	4013      	ands	r3, r2
 8004218:	d012      	beq.n	8004240 <HAL_UART_IRQHandler+0x678>
 800421a:	23a0      	movs	r3, #160	@ 0xa0
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	da0d      	bge.n	8004240 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0018      	movs	r0, r3
 8004228:	f000 feda 	bl	8004fe0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800422c:	e008      	b.n	8004240 <HAL_UART_IRQHandler+0x678>
      return;
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	e006      	b.n	8004240 <HAL_UART_IRQHandler+0x678>
    return;
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	e004      	b.n	8004240 <HAL_UART_IRQHandler+0x678>
      return;
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	e002      	b.n	8004240 <HAL_UART_IRQHandler+0x678>
      return;
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	e000      	b.n	8004240 <HAL_UART_IRQHandler+0x678>
    return;
 800423e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004240:	46bd      	mov	sp, r7
 8004242:	b02a      	add	sp, #168	@ 0xa8
 8004244:	bdb0      	pop	{r4, r5, r7, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	fffffeff 	.word	0xfffffeff
 800424c:	fffffedf 	.word	0xfffffedf
 8004250:	effffffe 	.word	0xeffffffe

08004254 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800425c:	46c0      	nop			@ (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b002      	add	sp, #8
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800426c:	46c0      	nop			@ (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b002      	add	sp, #8
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800427c:	46c0      	nop			@ (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	b002      	add	sp, #8
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800428c:	231e      	movs	r3, #30
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4aab      	ldr	r2, [pc, #684]	@ (8004560 <UART_SetConfig+0x2dc>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	430a      	orrs	r2, r1
 80042c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4aa6      	ldr	r2, [pc, #664]	@ (8004564 <UART_SetConfig+0x2e0>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a9d      	ldr	r2, [pc, #628]	@ (8004568 <UART_SetConfig+0x2e4>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004306:	220f      	movs	r2, #15
 8004308:	4393      	bics	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a93      	ldr	r2, [pc, #588]	@ (800456c <UART_SetConfig+0x2e8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d127      	bne.n	8004372 <UART_SetConfig+0xee>
 8004322:	4b93      	ldr	r3, [pc, #588]	@ (8004570 <UART_SetConfig+0x2ec>)
 8004324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004326:	2203      	movs	r2, #3
 8004328:	4013      	ands	r3, r2
 800432a:	2b03      	cmp	r3, #3
 800432c:	d017      	beq.n	800435e <UART_SetConfig+0xda>
 800432e:	d81b      	bhi.n	8004368 <UART_SetConfig+0xe4>
 8004330:	2b02      	cmp	r3, #2
 8004332:	d00a      	beq.n	800434a <UART_SetConfig+0xc6>
 8004334:	d818      	bhi.n	8004368 <UART_SetConfig+0xe4>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <UART_SetConfig+0xbc>
 800433a:	2b01      	cmp	r3, #1
 800433c:	d00a      	beq.n	8004354 <UART_SetConfig+0xd0>
 800433e:	e013      	b.n	8004368 <UART_SetConfig+0xe4>
 8004340:	231f      	movs	r3, #31
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	e021      	b.n	800438e <UART_SetConfig+0x10a>
 800434a:	231f      	movs	r3, #31
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e01c      	b.n	800438e <UART_SetConfig+0x10a>
 8004354:	231f      	movs	r3, #31
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2204      	movs	r2, #4
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	e017      	b.n	800438e <UART_SetConfig+0x10a>
 800435e:	231f      	movs	r3, #31
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2208      	movs	r2, #8
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e012      	b.n	800438e <UART_SetConfig+0x10a>
 8004368:	231f      	movs	r3, #31
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	2210      	movs	r2, #16
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	e00d      	b.n	800438e <UART_SetConfig+0x10a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a7f      	ldr	r2, [pc, #508]	@ (8004574 <UART_SetConfig+0x2f0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d104      	bne.n	8004386 <UART_SetConfig+0x102>
 800437c:	231f      	movs	r3, #31
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	e003      	b.n	800438e <UART_SetConfig+0x10a>
 8004386:	231f      	movs	r3, #31
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	2210      	movs	r2, #16
 800438c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	2380      	movs	r3, #128	@ 0x80
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	429a      	cmp	r2, r3
 8004398:	d000      	beq.n	800439c <UART_SetConfig+0x118>
 800439a:	e06f      	b.n	800447c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800439c:	231f      	movs	r3, #31
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d01f      	beq.n	80043e6 <UART_SetConfig+0x162>
 80043a6:	dc22      	bgt.n	80043ee <UART_SetConfig+0x16a>
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d017      	beq.n	80043dc <UART_SetConfig+0x158>
 80043ac:	dc1f      	bgt.n	80043ee <UART_SetConfig+0x16a>
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <UART_SetConfig+0x134>
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d005      	beq.n	80043c2 <UART_SetConfig+0x13e>
 80043b6:	e01a      	b.n	80043ee <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b8:	f7ff f860 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 80043bc:	0003      	movs	r3, r0
 80043be:	61bb      	str	r3, [r7, #24]
        break;
 80043c0:	e01c      	b.n	80043fc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80043c2:	4b6b      	ldr	r3, [pc, #428]	@ (8004570 <UART_SetConfig+0x2ec>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2207      	movs	r2, #7
 80043ca:	4013      	ands	r3, r2
 80043cc:	3301      	adds	r3, #1
 80043ce:	0019      	movs	r1, r3
 80043d0:	4869      	ldr	r0, [pc, #420]	@ (8004578 <UART_SetConfig+0x2f4>)
 80043d2:	f7fb fe99 	bl	8000108 <__udivsi3>
 80043d6:	0003      	movs	r3, r0
 80043d8:	61bb      	str	r3, [r7, #24]
        break;
 80043da:	e00f      	b.n	80043fc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043dc:	f7fe ffd8 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 80043e0:	0003      	movs	r3, r0
 80043e2:	61bb      	str	r3, [r7, #24]
        break;
 80043e4:	e00a      	b.n	80043fc <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e6:	2380      	movs	r3, #128	@ 0x80
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	61bb      	str	r3, [r7, #24]
        break;
 80043ec:	e006      	b.n	80043fc <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043f2:	231e      	movs	r3, #30
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	2201      	movs	r2, #1
 80043f8:	701a      	strb	r2, [r3, #0]
        break;
 80043fa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d100      	bne.n	8004404 <UART_SetConfig+0x180>
 8004402:	e097      	b.n	8004534 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004408:	4b5c      	ldr	r3, [pc, #368]	@ (800457c <UART_SetConfig+0x2f8>)
 800440a:	0052      	lsls	r2, r2, #1
 800440c:	5ad3      	ldrh	r3, [r2, r3]
 800440e:	0019      	movs	r1, r3
 8004410:	69b8      	ldr	r0, [r7, #24]
 8004412:	f7fb fe79 	bl	8000108 <__udivsi3>
 8004416:	0003      	movs	r3, r0
 8004418:	005a      	lsls	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	18d2      	adds	r2, r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	0019      	movs	r1, r3
 8004428:	0010      	movs	r0, r2
 800442a:	f7fb fe6d 	bl	8000108 <__udivsi3>
 800442e:	0003      	movs	r3, r0
 8004430:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b0f      	cmp	r3, #15
 8004436:	d91c      	bls.n	8004472 <UART_SetConfig+0x1ee>
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	2380      	movs	r3, #128	@ 0x80
 800443c:	025b      	lsls	r3, r3, #9
 800443e:	429a      	cmp	r2, r3
 8004440:	d217      	bcs.n	8004472 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	b29a      	uxth	r2, r3
 8004446:	200e      	movs	r0, #14
 8004448:	183b      	adds	r3, r7, r0
 800444a:	210f      	movs	r1, #15
 800444c:	438a      	bics	r2, r1
 800444e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	085b      	lsrs	r3, r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	2207      	movs	r2, #7
 8004458:	4013      	ands	r3, r2
 800445a:	b299      	uxth	r1, r3
 800445c:	183b      	adds	r3, r7, r0
 800445e:	183a      	adds	r2, r7, r0
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	183a      	adds	r2, r7, r0
 800446c:	8812      	ldrh	r2, [r2, #0]
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	e060      	b.n	8004534 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004472:	231e      	movs	r3, #30
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	e05b      	b.n	8004534 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800447c:	231f      	movs	r3, #31
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b08      	cmp	r3, #8
 8004484:	d01f      	beq.n	80044c6 <UART_SetConfig+0x242>
 8004486:	dc22      	bgt.n	80044ce <UART_SetConfig+0x24a>
 8004488:	2b04      	cmp	r3, #4
 800448a:	d017      	beq.n	80044bc <UART_SetConfig+0x238>
 800448c:	dc1f      	bgt.n	80044ce <UART_SetConfig+0x24a>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <UART_SetConfig+0x214>
 8004492:	2b02      	cmp	r3, #2
 8004494:	d005      	beq.n	80044a2 <UART_SetConfig+0x21e>
 8004496:	e01a      	b.n	80044ce <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004498:	f7fe fff0 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 800449c:	0003      	movs	r3, r0
 800449e:	61bb      	str	r3, [r7, #24]
        break;
 80044a0:	e01c      	b.n	80044dc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80044a2:	4b33      	ldr	r3, [pc, #204]	@ (8004570 <UART_SetConfig+0x2ec>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2207      	movs	r2, #7
 80044aa:	4013      	ands	r3, r2
 80044ac:	3301      	adds	r3, #1
 80044ae:	0019      	movs	r1, r3
 80044b0:	4831      	ldr	r0, [pc, #196]	@ (8004578 <UART_SetConfig+0x2f4>)
 80044b2:	f7fb fe29 	bl	8000108 <__udivsi3>
 80044b6:	0003      	movs	r3, r0
 80044b8:	61bb      	str	r3, [r7, #24]
        break;
 80044ba:	e00f      	b.n	80044dc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044bc:	f7fe ff68 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 80044c0:	0003      	movs	r3, r0
 80044c2:	61bb      	str	r3, [r7, #24]
        break;
 80044c4:	e00a      	b.n	80044dc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c6:	2380      	movs	r3, #128	@ 0x80
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	61bb      	str	r3, [r7, #24]
        break;
 80044cc:	e006      	b.n	80044dc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044d2:	231e      	movs	r3, #30
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
        break;
 80044da:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d028      	beq.n	8004534 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e6:	4b25      	ldr	r3, [pc, #148]	@ (800457c <UART_SetConfig+0x2f8>)
 80044e8:	0052      	lsls	r2, r2, #1
 80044ea:	5ad3      	ldrh	r3, [r2, r3]
 80044ec:	0019      	movs	r1, r3
 80044ee:	69b8      	ldr	r0, [r7, #24]
 80044f0:	f7fb fe0a 	bl	8000108 <__udivsi3>
 80044f4:	0003      	movs	r3, r0
 80044f6:	001a      	movs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	18d2      	adds	r2, r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0019      	movs	r1, r3
 8004506:	0010      	movs	r0, r2
 8004508:	f7fb fdfe 	bl	8000108 <__udivsi3>
 800450c:	0003      	movs	r3, r0
 800450e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	d90a      	bls.n	800452c <UART_SetConfig+0x2a8>
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	2380      	movs	r3, #128	@ 0x80
 800451a:	025b      	lsls	r3, r3, #9
 800451c:	429a      	cmp	r2, r3
 800451e:	d205      	bcs.n	800452c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	e003      	b.n	8004534 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800452c:	231e      	movs	r3, #30
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	226a      	movs	r2, #106	@ 0x6a
 8004538:	2101      	movs	r1, #1
 800453a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2268      	movs	r2, #104	@ 0x68
 8004540:	2101      	movs	r1, #1
 8004542:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004550:	231e      	movs	r3, #30
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	781b      	ldrb	r3, [r3, #0]
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b008      	add	sp, #32
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	cfff69f3 	.word	0xcfff69f3
 8004564:	ffffcfff 	.word	0xffffcfff
 8004568:	11fff4ff 	.word	0x11fff4ff
 800456c:	40013800 	.word	0x40013800
 8004570:	40021000 	.word	0x40021000
 8004574:	40004400 	.word	0x40004400
 8004578:	02dc6c00 	.word	0x02dc6c00
 800457c:	080058d4 	.word	0x080058d4

08004580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	2208      	movs	r2, #8
 800458e:	4013      	ands	r3, r2
 8004590:	d00b      	beq.n	80045aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a4a      	ldr	r2, [pc, #296]	@ (80046c4 <UART_AdvFeatureConfig+0x144>)
 800459a:	4013      	ands	r3, r2
 800459c:	0019      	movs	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	2201      	movs	r2, #1
 80045b0:	4013      	ands	r3, r2
 80045b2:	d00b      	beq.n	80045cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4a43      	ldr	r2, [pc, #268]	@ (80046c8 <UART_AdvFeatureConfig+0x148>)
 80045bc:	4013      	ands	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d0:	2202      	movs	r2, #2
 80045d2:	4013      	ands	r3, r2
 80045d4:	d00b      	beq.n	80045ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a3b      	ldr	r2, [pc, #236]	@ (80046cc <UART_AdvFeatureConfig+0x14c>)
 80045de:	4013      	ands	r3, r2
 80045e0:	0019      	movs	r1, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f2:	2204      	movs	r2, #4
 80045f4:	4013      	ands	r3, r2
 80045f6:	d00b      	beq.n	8004610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4a34      	ldr	r2, [pc, #208]	@ (80046d0 <UART_AdvFeatureConfig+0x150>)
 8004600:	4013      	ands	r3, r2
 8004602:	0019      	movs	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004614:	2210      	movs	r2, #16
 8004616:	4013      	ands	r3, r2
 8004618:	d00b      	beq.n	8004632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a2c      	ldr	r2, [pc, #176]	@ (80046d4 <UART_AdvFeatureConfig+0x154>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004636:	2220      	movs	r2, #32
 8004638:	4013      	ands	r3, r2
 800463a:	d00b      	beq.n	8004654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	4a25      	ldr	r2, [pc, #148]	@ (80046d8 <UART_AdvFeatureConfig+0x158>)
 8004644:	4013      	ands	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	2240      	movs	r2, #64	@ 0x40
 800465a:	4013      	ands	r3, r2
 800465c:	d01d      	beq.n	800469a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4a1d      	ldr	r2, [pc, #116]	@ (80046dc <UART_AdvFeatureConfig+0x15c>)
 8004666:	4013      	ands	r3, r2
 8004668:	0019      	movs	r1, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800467a:	2380      	movs	r3, #128	@ 0x80
 800467c:	035b      	lsls	r3, r3, #13
 800467e:	429a      	cmp	r2, r3
 8004680:	d10b      	bne.n	800469a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <UART_AdvFeatureConfig+0x160>)
 800468a:	4013      	ands	r3, r2
 800468c:	0019      	movs	r1, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	2280      	movs	r2, #128	@ 0x80
 80046a0:	4013      	ands	r3, r2
 80046a2:	d00b      	beq.n	80046bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4a0e      	ldr	r2, [pc, #56]	@ (80046e4 <UART_AdvFeatureConfig+0x164>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	0019      	movs	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }
}
 80046bc:	46c0      	nop			@ (mov r8, r8)
 80046be:	46bd      	mov	sp, r7
 80046c0:	b002      	add	sp, #8
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	ffff7fff 	.word	0xffff7fff
 80046c8:	fffdffff 	.word	0xfffdffff
 80046cc:	fffeffff 	.word	0xfffeffff
 80046d0:	fffbffff 	.word	0xfffbffff
 80046d4:	ffffefff 	.word	0xffffefff
 80046d8:	ffffdfff 	.word	0xffffdfff
 80046dc:	ffefffff 	.word	0xffefffff
 80046e0:	ff9fffff 	.word	0xff9fffff
 80046e4:	fff7ffff 	.word	0xfff7ffff

080046e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b092      	sub	sp, #72	@ 0x48
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2290      	movs	r2, #144	@ 0x90
 80046f4:	2100      	movs	r1, #0
 80046f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046f8:	f7fd f9fa 	bl	8001af0 <HAL_GetTick>
 80046fc:	0003      	movs	r3, r0
 80046fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2208      	movs	r2, #8
 8004708:	4013      	ands	r3, r2
 800470a:	2b08      	cmp	r3, #8
 800470c:	d12d      	bne.n	800476a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004710:	2280      	movs	r2, #128	@ 0x80
 8004712:	0391      	lsls	r1, r2, #14
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4a47      	ldr	r2, [pc, #284]	@ (8004834 <UART_CheckIdleState+0x14c>)
 8004718:	9200      	str	r2, [sp, #0]
 800471a:	2200      	movs	r2, #0
 800471c:	f000 f88e 	bl	800483c <UART_WaitOnFlagUntilTimeout>
 8004720:	1e03      	subs	r3, r0, #0
 8004722:	d022      	beq.n	800476a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800472c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800472e:	2301      	movs	r3, #1
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			@ (mov r8, r8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2180      	movs	r1, #128	@ 0x80
 8004746:	438a      	bics	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2288      	movs	r2, #136	@ 0x88
 800475a:	2120      	movs	r1, #32
 800475c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2284      	movs	r2, #132	@ 0x84
 8004762:	2100      	movs	r1, #0
 8004764:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e060      	b.n	800482c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2204      	movs	r2, #4
 8004772:	4013      	ands	r3, r2
 8004774:	2b04      	cmp	r3, #4
 8004776:	d146      	bne.n	8004806 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800477a:	2280      	movs	r2, #128	@ 0x80
 800477c:	03d1      	lsls	r1, r2, #15
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4a2c      	ldr	r2, [pc, #176]	@ (8004834 <UART_CheckIdleState+0x14c>)
 8004782:	9200      	str	r2, [sp, #0]
 8004784:	2200      	movs	r2, #0
 8004786:	f000 f859 	bl	800483c <UART_WaitOnFlagUntilTimeout>
 800478a:	1e03      	subs	r3, r0, #0
 800478c:	d03b      	beq.n	8004806 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800478e:	f3ef 8310 	mrs	r3, PRIMASK
 8004792:	60fb      	str	r3, [r7, #12]
  return(result);
 8004794:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004796:	637b      	str	r3, [r7, #52]	@ 0x34
 8004798:	2301      	movs	r3, #1
 800479a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f383 8810 	msr	PRIMASK, r3
}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4922      	ldr	r1, [pc, #136]	@ (8004838 <UART_CheckIdleState+0x150>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f383 8810 	msr	PRIMASK, r3
}
 80047be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047c0:	f3ef 8310 	mrs	r3, PRIMASK
 80047c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80047c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047ca:	2301      	movs	r3, #1
 80047cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	46c0      	nop			@ (mov r8, r8)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2101      	movs	r1, #1
 80047e2:	438a      	bics	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	228c      	movs	r2, #140	@ 0x8c
 80047f6:	2120      	movs	r1, #32
 80047f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2284      	movs	r2, #132	@ 0x84
 80047fe:	2100      	movs	r1, #0
 8004800:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e012      	b.n	800482c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2288      	movs	r2, #136	@ 0x88
 800480a:	2120      	movs	r1, #32
 800480c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	228c      	movs	r2, #140	@ 0x8c
 8004812:	2120      	movs	r1, #32
 8004814:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2284      	movs	r2, #132	@ 0x84
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b010      	add	sp, #64	@ 0x40
 8004832:	bd80      	pop	{r7, pc}
 8004834:	01ffffff 	.word	0x01ffffff
 8004838:	fffffedf 	.word	0xfffffedf

0800483c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	1dfb      	adds	r3, r7, #7
 800484a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484c:	e051      	b.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	3301      	adds	r3, #1
 8004852:	d04e      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004854:	f7fd f94c 	bl	8001af0 <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e051      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2204      	movs	r2, #4
 8004876:	4013      	ands	r3, r2
 8004878:	d03b      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b80      	cmp	r3, #128	@ 0x80
 800487e:	d038      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b40      	cmp	r3, #64	@ 0x40
 8004884:	d035      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	2208      	movs	r2, #8
 800488e:	4013      	ands	r3, r2
 8004890:	2b08      	cmp	r3, #8
 8004892:	d111      	bne.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2208      	movs	r2, #8
 800489a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	0018      	movs	r0, r3
 80048a0:	f000 f922 	bl	8004ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2290      	movs	r2, #144	@ 0x90
 80048a8:	2108      	movs	r1, #8
 80048aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2284      	movs	r2, #132	@ 0x84
 80048b0:	2100      	movs	r1, #0
 80048b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e02c      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	401a      	ands	r2, r3
 80048c4:	2380      	movs	r3, #128	@ 0x80
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d112      	bne.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2280      	movs	r2, #128	@ 0x80
 80048d2:	0112      	lsls	r2, r2, #4
 80048d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 f905 	bl	8004ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2290      	movs	r2, #144	@ 0x90
 80048e2:	2120      	movs	r1, #32
 80048e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2284      	movs	r2, #132	@ 0x84
 80048ea:	2100      	movs	r1, #0
 80048ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e00f      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	4013      	ands	r3, r2
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	425a      	negs	r2, r3
 8004902:	4153      	adcs	r3, r2
 8004904:	b2db      	uxtb	r3, r3
 8004906:	001a      	movs	r2, r3
 8004908:	1dfb      	adds	r3, r7, #7
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d09e      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	0018      	movs	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	b004      	add	sp, #16
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b090      	sub	sp, #64	@ 0x40
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	1dbb      	adds	r3, r7, #6
 8004928:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1dba      	adds	r2, r7, #6
 8004934:	215c      	movs	r1, #92	@ 0x5c
 8004936:	8812      	ldrh	r2, [r2, #0]
 8004938:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2290      	movs	r2, #144	@ 0x90
 800493e:	2100      	movs	r1, #0
 8004940:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	228c      	movs	r2, #140	@ 0x8c
 8004946:	2122      	movs	r1, #34	@ 0x22
 8004948:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2280      	movs	r2, #128	@ 0x80
 800494e:	589b      	ldr	r3, [r3, r2]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d02d      	beq.n	80049b0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2280      	movs	r2, #128	@ 0x80
 8004958:	589b      	ldr	r3, [r3, r2]
 800495a:	4a40      	ldr	r2, [pc, #256]	@ (8004a5c <UART_Start_Receive_DMA+0x140>)
 800495c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2280      	movs	r2, #128	@ 0x80
 8004962:	589b      	ldr	r3, [r3, r2]
 8004964:	4a3e      	ldr	r2, [pc, #248]	@ (8004a60 <UART_Start_Receive_DMA+0x144>)
 8004966:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2280      	movs	r2, #128	@ 0x80
 800496c:	589b      	ldr	r3, [r3, r2]
 800496e:	4a3d      	ldr	r2, [pc, #244]	@ (8004a64 <UART_Start_Receive_DMA+0x148>)
 8004970:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2280      	movs	r2, #128	@ 0x80
 8004976:	589b      	ldr	r3, [r3, r2]
 8004978:	2200      	movs	r2, #0
 800497a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2280      	movs	r2, #128	@ 0x80
 8004980:	5898      	ldr	r0, [r3, r2]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3324      	adds	r3, #36	@ 0x24
 8004988:	0019      	movs	r1, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	001a      	movs	r2, r3
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	f7fd faec 	bl	8001f70 <HAL_DMA_Start_IT>
 8004998:	1e03      	subs	r3, r0, #0
 800499a:	d009      	beq.n	80049b0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2290      	movs	r2, #144	@ 0x90
 80049a0:	2110      	movs	r1, #16
 80049a2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	228c      	movs	r2, #140	@ 0x8c
 80049a8:	2120      	movs	r1, #32
 80049aa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e050      	b.n	8004a52 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d019      	beq.n	80049ec <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80049b8:	f3ef 8310 	mrs	r3, PRIMASK
 80049bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049c2:	2301      	movs	r3, #1
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c8:	f383 8810 	msr	PRIMASK, r3
}
 80049cc:	46c0      	nop			@ (mov r8, r8)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2180      	movs	r1, #128	@ 0x80
 80049da:	0049      	lsls	r1, r1, #1
 80049dc:	430a      	orrs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	f383 8810 	msr	PRIMASK, r3
}
 80049ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80049ec:	f3ef 8310 	mrs	r3, PRIMASK
 80049f0:	613b      	str	r3, [r7, #16]
  return(result);
 80049f2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049f6:	2301      	movs	r3, #1
 80049f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f383 8810 	msr	PRIMASK, r3
}
 8004a00:	46c0      	nop			@ (mov r8, r8)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]
 8004a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f383 8810 	msr	PRIMASK, r3
}
 8004a1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a22:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a24:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a28:	2301      	movs	r3, #1
 8004a2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	f383 8810 	msr	PRIMASK, r3
}
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2140      	movs	r1, #64	@ 0x40
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	f383 8810 	msr	PRIMASK, r3
}
 8004a4e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b010      	add	sp, #64	@ 0x40
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	08004c6d 	.word	0x08004c6d
 8004a60:	08004d9d 	.word	0x08004d9d
 8004a64:	08004ddf 	.word	0x08004ddf

08004a68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	@ 0x28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a76:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	21c0      	movs	r1, #192	@ 0xc0
 8004a92:	438a      	bics	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f383 8810 	msr	PRIMASK, r3
}
 8004aa0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa6:	617b      	str	r3, [r7, #20]
  return(result);
 8004aa8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	2301      	movs	r3, #1
 8004aae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4908      	ldr	r1, [pc, #32]	@ (8004ae4 <UART_EndTxTransfer+0x7c>)
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2288      	movs	r2, #136	@ 0x88
 8004ad8:	2120      	movs	r1, #32
 8004ada:	5099      	str	r1, [r3, r2]
}
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b00a      	add	sp, #40	@ 0x28
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	ff7fffff 	.word	0xff7fffff

08004ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08e      	sub	sp, #56	@ 0x38
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004af0:	f3ef 8310 	mrs	r3, PRIMASK
 8004af4:	617b      	str	r3, [r7, #20]
  return(result);
 8004af6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afa:	2301      	movs	r3, #1
 8004afc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f383 8810 	msr	PRIMASK, r3
}
 8004b04:	46c0      	nop			@ (mov r8, r8)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4926      	ldr	r1, [pc, #152]	@ (8004bac <UART_EndRxTransfer+0xc4>)
 8004b12:	400a      	ands	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f383 8810 	msr	PRIMASK, r3
}
 8004b20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b22:	f3ef 8310 	mrs	r3, PRIMASK
 8004b26:	623b      	str	r3, [r7, #32]
  return(result);
 8004b28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	f383 8810 	msr	PRIMASK, r3
}
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	491b      	ldr	r1, [pc, #108]	@ (8004bb0 <UART_EndRxTransfer+0xc8>)
 8004b44:	400a      	ands	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4e:	f383 8810 	msr	PRIMASK, r3
}
 8004b52:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d118      	bne.n	8004b8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b66:	2301      	movs	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f383 8810 	msr	PRIMASK, r3
}
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2110      	movs	r1, #16
 8004b7e:	438a      	bics	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f383 8810 	msr	PRIMASK, r3
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	228c      	movs	r2, #140	@ 0x8c
 8004b92:	2120      	movs	r1, #32
 8004b94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b00e      	add	sp, #56	@ 0x38
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	fffffedf 	.word	0xfffffedf
 8004bb0:	effffffe 	.word	0xeffffffe

08004bb4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08c      	sub	sp, #48	@ 0x30
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d135      	bne.n	8004c3a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd0:	2256      	movs	r2, #86	@ 0x56
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bda:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bdc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004be0:	2301      	movs	r3, #1
 8004be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f383 8810 	msr	PRIMASK, r3
}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2180      	movs	r1, #128	@ 0x80
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f383 8810 	msr	PRIMASK, r3
}
 8004c06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c08:	f3ef 8310 	mrs	r3, PRIMASK
 8004c0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c0e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c12:	2301      	movs	r3, #1
 8004c14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f383 8810 	msr	PRIMASK, r3
}
 8004c1c:	46c0      	nop			@ (mov r8, r8)
 8004c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2140      	movs	r1, #64	@ 0x40
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	f383 8810 	msr	PRIMASK, r3
}
 8004c38:	e004      	b.n	8004c44 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8004c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7fb ff9d 	bl	8000b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	46c0      	nop			@ (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b00c      	add	sp, #48	@ 0x30
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f7ff faf9 	bl	8004254 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b004      	add	sp, #16
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b094      	sub	sp, #80	@ 0x50
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c78:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2220      	movs	r2, #32
 8004c82:	4013      	ands	r3, r2
 8004c84:	d16f      	bne.n	8004d66 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c88:	225e      	movs	r2, #94	@ 0x5e
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c92:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c94:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c98:	2301      	movs	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	493a      	ldr	r1, [pc, #232]	@ (8004d98 <UART_DMAReceiveCplt+0x12c>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cb6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	f383 8810 	msr	PRIMASK, r3
}
 8004cbe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cca:	2301      	movs	r3, #1
 8004ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd0:	f383 8810 	msr	PRIMASK, r3
}
 8004cd4:	46c0      	nop			@ (mov r8, r8)
 8004cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	438a      	bics	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cec:	f383 8810 	msr	PRIMASK, r3
}
 8004cf0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d02:	f383 8810 	msr	PRIMASK, r3
}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2140      	movs	r1, #64	@ 0x40
 8004d14:	438a      	bics	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1e:	f383 8810 	msr	PRIMASK, r3
}
 8004d22:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d26:	228c      	movs	r2, #140	@ 0x8c
 8004d28:	2120      	movs	r1, #32
 8004d2a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d118      	bne.n	8004d66 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d34:	f3ef 8310 	mrs	r3, PRIMASK
 8004d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d3e:	2301      	movs	r3, #1
 8004d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f383 8810 	msr	PRIMASK, r3
}
 8004d48:	46c0      	nop			@ (mov r8, r8)
 8004d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2110      	movs	r1, #16
 8004d56:	438a      	bics	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f383 8810 	msr	PRIMASK, r3
}
 8004d64:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d68:	2200      	movs	r2, #0
 8004d6a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d108      	bne.n	8004d86 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d76:	225c      	movs	r2, #92	@ 0x5c
 8004d78:	5a9a      	ldrh	r2, [r3, r2]
 8004d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d7c:	0011      	movs	r1, r2
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f7fb fea0 	bl	8000ac4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d84:	e003      	b.n	8004d8e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f7ff fa6b 	bl	8004264 <HAL_UART_RxCpltCallback>
}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b014      	add	sp, #80	@ 0x50
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	fffffeff 	.word	0xfffffeff

08004d9c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10a      	bne.n	8004dce <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	225c      	movs	r2, #92	@ 0x5c
 8004dbc:	5a9b      	ldrh	r3, [r3, r2]
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	0011      	movs	r1, r2
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7fb fe7c 	bl	8000ac4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dcc:	e003      	b.n	8004dd6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7ff fa4f 	bl	8004274 <HAL_UART_RxHalfCpltCallback>
}
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b004      	add	sp, #16
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2288      	movs	r2, #136	@ 0x88
 8004df0:	589b      	ldr	r3, [r3, r2]
 8004df2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	228c      	movs	r2, #140	@ 0x8c
 8004df8:	589b      	ldr	r3, [r3, r2]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2280      	movs	r2, #128	@ 0x80
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b80      	cmp	r3, #128	@ 0x80
 8004e08:	d10a      	bne.n	8004e20 <UART_DMAError+0x42>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b21      	cmp	r3, #33	@ 0x21
 8004e0e:	d107      	bne.n	8004e20 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2256      	movs	r2, #86	@ 0x56
 8004e14:	2100      	movs	r1, #0
 8004e16:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7ff fe24 	bl	8004a68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2240      	movs	r2, #64	@ 0x40
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b40      	cmp	r3, #64	@ 0x40
 8004e2c:	d10a      	bne.n	8004e44 <UART_DMAError+0x66>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b22      	cmp	r3, #34	@ 0x22
 8004e32:	d107      	bne.n	8004e44 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	225e      	movs	r2, #94	@ 0x5e
 8004e38:	2100      	movs	r1, #0
 8004e3a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f7ff fe52 	bl	8004ae8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2290      	movs	r2, #144	@ 0x90
 8004e48:	589b      	ldr	r3, [r3, r2]
 8004e4a:	2210      	movs	r2, #16
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2190      	movs	r1, #144	@ 0x90
 8004e52:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fb fe9e 	bl	8000b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e5c:	46c0      	nop			@ (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b006      	add	sp, #24
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	225e      	movs	r2, #94	@ 0x5e
 8004e76:	2100      	movs	r1, #0
 8004e78:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2256      	movs	r2, #86	@ 0x56
 8004e7e:	2100      	movs	r1, #0
 8004e80:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7fb fe87 	bl	8000b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f383 8810 	msr	PRIMASK, r3
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2140      	movs	r1, #64	@ 0x40
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f383 8810 	msr	PRIMASK, r3
}
 8004eca:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2288      	movs	r2, #136	@ 0x88
 8004ed0:	2120      	movs	r1, #32
 8004ed2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f7fb fe4d 	bl	8000b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b006      	add	sp, #24
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e05d      	b.n	8004fc0 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2288      	movs	r2, #136	@ 0x88
 8004f08:	589b      	ldr	r3, [r3, r2]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d107      	bne.n	8004f1e <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2284      	movs	r2, #132	@ 0x84
 8004f12:	2100      	movs	r1, #0
 8004f14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7fc fba1 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2288      	movs	r2, #136	@ 0x88
 8004f22:	2124      	movs	r1, #36	@ 0x24
 8004f24:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2101      	movs	r1, #1
 8004f32:	438a      	bics	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7ff fb1d 	bl	8004580 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff f99b 	bl	8004284 <UART_SetConfig>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e033      	b.n	8004fc0 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2180      	movs	r1, #128	@ 0x80
 8004f64:	01c9      	lsls	r1, r1, #7
 8004f66:	430a      	orrs	r2, r1
 8004f68:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4a15      	ldr	r2, [pc, #84]	@ (8004fc8 <HAL_RS485Ex_Init+0xdc>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	0019      	movs	r1, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	055b      	lsls	r3, r3, #21
 8004f84:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a0d      	ldr	r2, [pc, #52]	@ (8004fcc <HAL_RS485Ex_Init+0xe0>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7ff fb95 	bl	80046e8 <UART_CheckIdleState>
 8004fbe:	0003      	movs	r3, r0
}
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b006      	add	sp, #24
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	ffff7fff 	.word	0xffff7fff
 8004fcc:	fc00ffff 	.word	0xfc00ffff

08004fd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fd8:	46c0      	nop			@ (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b002      	add	sp, #8
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004fe8:	46c0      	nop			@ (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b002      	add	sp, #8
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ff8:	46c0      	nop			@ (mov r8, r8)
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2284      	movs	r2, #132	@ 0x84
 800500c:	5c9b      	ldrb	r3, [r3, r2]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_UARTEx_DisableFifoMode+0x16>
 8005012:	2302      	movs	r3, #2
 8005014:	e027      	b.n	8005066 <HAL_UARTEx_DisableFifoMode+0x66>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2284      	movs	r2, #132	@ 0x84
 800501a:	2101      	movs	r1, #1
 800501c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2288      	movs	r2, #136	@ 0x88
 8005022:	2124      	movs	r1, #36	@ 0x24
 8005024:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2101      	movs	r1, #1
 800503a:	438a      	bics	r2, r1
 800503c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a0b      	ldr	r2, [pc, #44]	@ (8005070 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005042:	4013      	ands	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2288      	movs	r2, #136	@ 0x88
 8005058:	2120      	movs	r1, #32
 800505a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2284      	movs	r2, #132	@ 0x84
 8005060:	2100      	movs	r1, #0
 8005062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	0018      	movs	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	b004      	add	sp, #16
 800506c:	bd80      	pop	{r7, pc}
 800506e:	46c0      	nop			@ (mov r8, r8)
 8005070:	dfffffff 	.word	0xdfffffff

08005074 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2284      	movs	r2, #132	@ 0x84
 8005082:	5c9b      	ldrb	r3, [r3, r2]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005088:	2302      	movs	r3, #2
 800508a:	e02e      	b.n	80050ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2284      	movs	r2, #132	@ 0x84
 8005090:	2101      	movs	r1, #1
 8005092:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2288      	movs	r2, #136	@ 0x88
 8005098:	2124      	movs	r1, #36	@ 0x24
 800509a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2101      	movs	r1, #1
 80050b0:	438a      	bics	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	08d9      	lsrs	r1, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	0018      	movs	r0, r3
 80050cc:	f000 f8bc 	bl	8005248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2288      	movs	r2, #136	@ 0x88
 80050dc:	2120      	movs	r1, #32
 80050de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2284      	movs	r2, #132	@ 0x84
 80050e4:	2100      	movs	r1, #0
 80050e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	0018      	movs	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b004      	add	sp, #16
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2284      	movs	r2, #132	@ 0x84
 8005102:	5c9b      	ldrb	r3, [r3, r2]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005108:	2302      	movs	r3, #2
 800510a:	e02f      	b.n	800516c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2284      	movs	r2, #132	@ 0x84
 8005110:	2101      	movs	r1, #1
 8005112:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2288      	movs	r2, #136	@ 0x88
 8005118:	2124      	movs	r1, #36	@ 0x24
 800511a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2101      	movs	r1, #1
 8005130:	438a      	bics	r2, r1
 8005132:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	4a0e      	ldr	r2, [pc, #56]	@ (8005174 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800513c:	4013      	ands	r3, r2
 800513e:	0019      	movs	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	0018      	movs	r0, r3
 800514e:	f000 f87b 	bl	8005248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2288      	movs	r2, #136	@ 0x88
 800515e:	2120      	movs	r1, #32
 8005160:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2284      	movs	r2, #132	@ 0x84
 8005166:	2100      	movs	r1, #0
 8005168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b004      	add	sp, #16
 8005172:	bd80      	pop	{r7, pc}
 8005174:	f1ffffff 	.word	0xf1ffffff

08005178 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005178:	b5b0      	push	{r4, r5, r7, lr}
 800517a:	b08a      	sub	sp, #40	@ 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	1dbb      	adds	r3, r7, #6
 8005184:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	228c      	movs	r2, #140	@ 0x8c
 800518a:	589b      	ldr	r3, [r3, r2]
 800518c:	2b20      	cmp	r3, #32
 800518e:	d156      	bne.n	800523e <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005196:	1dbb      	adds	r3, r7, #6
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e04e      	b.n	8005240 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	015b      	lsls	r3, r3, #5
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d109      	bne.n	80051c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d105      	bne.n	80051c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2201      	movs	r2, #1
 80051ba:	4013      	ands	r3, r2
 80051bc:	d001      	beq.n	80051c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e03e      	b.n	8005240 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80051ce:	2527      	movs	r5, #39	@ 0x27
 80051d0:	197c      	adds	r4, r7, r5
 80051d2:	1dbb      	adds	r3, r7, #6
 80051d4:	881a      	ldrh	r2, [r3, #0]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	0018      	movs	r0, r3
 80051dc:	f7ff fb9e 	bl	800491c <UART_Start_Receive_DMA>
 80051e0:	0003      	movs	r3, r0
 80051e2:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80051e4:	197b      	adds	r3, r7, r5
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d124      	bne.n	8005236 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d11c      	bne.n	800522e <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2210      	movs	r2, #16
 80051fa:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005200:	617b      	str	r3, [r7, #20]
  return(result);
 8005202:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	2301      	movs	r3, #1
 8005208:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	f383 8810 	msr	PRIMASK, r3
}
 8005210:	46c0      	nop			@ (mov r8, r8)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2110      	movs	r1, #16
 800521e:	430a      	orrs	r2, r1
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f383 8810 	msr	PRIMASK, r3
}
 800522c:	e003      	b.n	8005236 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800522e:	2327      	movs	r3, #39	@ 0x27
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005236:	2327      	movs	r3, #39	@ 0x27
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	e000      	b.n	8005240 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800523e:	2302      	movs	r3, #2
  }
}
 8005240:	0018      	movs	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	b00a      	add	sp, #40	@ 0x28
 8005246:	bdb0      	pop	{r4, r5, r7, pc}

08005248 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005254:	2b00      	cmp	r3, #0
 8005256:	d108      	bne.n	800526a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	226a      	movs	r2, #106	@ 0x6a
 800525c:	2101      	movs	r1, #1
 800525e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2268      	movs	r2, #104	@ 0x68
 8005264:	2101      	movs	r1, #1
 8005266:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005268:	e043      	b.n	80052f2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800526a:	260f      	movs	r6, #15
 800526c:	19bb      	adds	r3, r7, r6
 800526e:	2208      	movs	r2, #8
 8005270:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005272:	200e      	movs	r0, #14
 8005274:	183b      	adds	r3, r7, r0
 8005276:	2208      	movs	r2, #8
 8005278:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	0e5b      	lsrs	r3, r3, #25
 8005282:	b2da      	uxtb	r2, r3
 8005284:	240d      	movs	r4, #13
 8005286:	193b      	adds	r3, r7, r4
 8005288:	2107      	movs	r1, #7
 800528a:	400a      	ands	r2, r1
 800528c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	0f5b      	lsrs	r3, r3, #29
 8005296:	b2da      	uxtb	r2, r3
 8005298:	250c      	movs	r5, #12
 800529a:	197b      	adds	r3, r7, r5
 800529c:	2107      	movs	r1, #7
 800529e:	400a      	ands	r2, r1
 80052a0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052a2:	183b      	adds	r3, r7, r0
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	197a      	adds	r2, r7, r5
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	4914      	ldr	r1, [pc, #80]	@ (80052fc <UARTEx_SetNbDataToProcess+0xb4>)
 80052ac:	5c8a      	ldrb	r2, [r1, r2]
 80052ae:	435a      	muls	r2, r3
 80052b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80052b2:	197b      	adds	r3, r7, r5
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	4a12      	ldr	r2, [pc, #72]	@ (8005300 <UARTEx_SetNbDataToProcess+0xb8>)
 80052b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052ba:	0019      	movs	r1, r3
 80052bc:	f7fa ffae 	bl	800021c <__divsi3>
 80052c0:	0003      	movs	r3, r0
 80052c2:	b299      	uxth	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	226a      	movs	r2, #106	@ 0x6a
 80052c8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ca:	19bb      	adds	r3, r7, r6
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	193a      	adds	r2, r7, r4
 80052d0:	7812      	ldrb	r2, [r2, #0]
 80052d2:	490a      	ldr	r1, [pc, #40]	@ (80052fc <UARTEx_SetNbDataToProcess+0xb4>)
 80052d4:	5c8a      	ldrb	r2, [r1, r2]
 80052d6:	435a      	muls	r2, r3
 80052d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052da:	193b      	adds	r3, r7, r4
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	4a08      	ldr	r2, [pc, #32]	@ (8005300 <UARTEx_SetNbDataToProcess+0xb8>)
 80052e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052e2:	0019      	movs	r1, r3
 80052e4:	f7fa ff9a 	bl	800021c <__divsi3>
 80052e8:	0003      	movs	r3, r0
 80052ea:	b299      	uxth	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2268      	movs	r2, #104	@ 0x68
 80052f0:	5299      	strh	r1, [r3, r2]
}
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b005      	add	sp, #20
 80052f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fa:	46c0      	nop			@ (mov r8, r8)
 80052fc:	080058ec 	.word	0x080058ec
 8005300:	080058f4 	.word	0x080058f4

08005304 <EE_Init>:
  * @return Boolean value indicating the success of the initialization:
  *       - true: Initialization successful.
  *       - false: Initialization failed.
  */
bool EE_Init(void *StoragePointer, uint32_t Size)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800530e:	230f      	movs	r3, #15
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]
  do
  {
    /* checking size of eeprom area*/
    if (Size > EE_SIZE)
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	2380      	movs	r3, #128	@ 0x80
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	429a      	cmp	r2, r3
 800531e:	d906      	bls.n	800532e <EE_Init+0x2a>
    {
      eeHandle.Size = 0;
 8005320:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <EE_Init+0x4c>)
 8005322:	2200      	movs	r2, #0
 8005324:	605a      	str	r2, [r3, #4]
      eeHandle.DataPointer = NULL;
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <EE_Init+0x4c>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
      break;
 800532c:	e009      	b.n	8005342 <EE_Init+0x3e>
    }
    eeHandle.Size = Size;
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <EE_Init+0x4c>)
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	605a      	str	r2, [r3, #4]
    eeHandle.DataPointer = (uint8_t*)StoragePointer;
 8005334:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <EE_Init+0x4c>)
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	601a      	str	r2, [r3, #0]
    answer = true;
 800533a:	230f      	movs	r3, #15
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	2201      	movs	r2, #1
 8005340:	701a      	strb	r2, [r3, #0]

  } while (0);

  return answer;
 8005342:	230f      	movs	r3, #15
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	781b      	ldrb	r3, [r3, #0]
}
 8005348:	0018      	movs	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	b004      	add	sp, #16
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20000440 	.word	0x20000440

08005354 <EE_Format>:
  * @return bool Boolean value indicating the success of the operation:
  *     - true: Formatting successful.
  *     - false: Formatting failed.
  */
bool EE_Format(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
  bool answer = false;
 800535a:	2317      	movs	r3, #23
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
  uint32_t error;
  FLASH_EraseInitTypeDef flashErase;
  do
  {
    HAL_FLASH_Unlock();
 8005362:	f7fd f903 	bl	800256c <HAL_FLASH_Unlock>
#if EE_ERASE == EE_ERASE_PAGE_ADDRESS
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
    flashErase.PageAddress = EE_ADDRESS;
    flashErase.NbPages = 1;
#elif EE_ERASE == EE_ERASE_PAGE_NUMBER
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	2202      	movs	r2, #2
 800536a:	601a      	str	r2, [r3, #0]
    flashErase.Page = EE_PAGE_SECTOR;
 800536c:	4b19      	ldr	r3, [pc, #100]	@ (80053d4 <EE_Format+0x80>)
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	4a19      	ldr	r2, [pc, #100]	@ (80053d8 <EE_Format+0x84>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00b      	beq.n	800538e <EE_Format+0x3a>
 8005376:	4b17      	ldr	r3, [pc, #92]	@ (80053d4 <EE_Format+0x80>)
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <EE_Format+0x36>
 800537e:	4b15      	ldr	r3, [pc, #84]	@ (80053d4 <EE_Format+0x80>)
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	029b      	lsls	r3, r3, #10
 8005384:	0b1b      	lsrs	r3, r3, #12
 8005386:	3b01      	subs	r3, #1
 8005388:	e002      	b.n	8005390 <EE_Format+0x3c>
 800538a:	231f      	movs	r3, #31
 800538c:	e000      	b.n	8005390 <EE_Format+0x3c>
 800538e:	231f      	movs	r3, #31
 8005390:	1d3a      	adds	r2, r7, #4
 8005392:	6053      	str	r3, [r2, #4]
    flashErase.NbPages = 1;
 8005394:	1d3b      	adds	r3, r7, #4
 8005396:	2201      	movs	r2, #1
 8005398:	609a      	str	r2, [r3, #8]
#endif
#ifdef FLASH_VOLTAGE_RANGE_3
    flashErase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
#endif
    /* erasing page/sector */
    if (HAL_FLASHEx_Erase(&flashErase, &error) != HAL_OK)
 800539a:	2310      	movs	r3, #16
 800539c:	18fa      	adds	r2, r7, r3
 800539e:	1d3b      	adds	r3, r7, #4
 80053a0:	0011      	movs	r1, r2
 80053a2:	0018      	movs	r0, r3
 80053a4:	f7fd f99c 	bl	80026e0 <HAL_FLASHEx_Erase>
 80053a8:	1e03      	subs	r3, r0, #0
 80053aa:	d107      	bne.n	80053bc <EE_Format+0x68>
    {
      break;
    }
    /* checking result */
    if (error != 0xFFFFFFFF)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	3301      	adds	r3, #1
 80053b0:	d106      	bne.n	80053c0 <EE_Format+0x6c>
    {
      break;
    }
    answer = true;
 80053b2:	2317      	movs	r3, #23
 80053b4:	18fb      	adds	r3, r7, r3
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e002      	b.n	80053c2 <EE_Format+0x6e>
      break;
 80053bc:	46c0      	nop			@ (mov r8, r8)
 80053be:	e000      	b.n	80053c2 <EE_Format+0x6e>
      break;
 80053c0:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  HAL_FLASH_Lock();
 80053c2:	f7fd f8f7 	bl	80025b4 <HAL_FLASH_Lock>
#ifdef HAL_ICACHE_MODULE_ENABLED
  HAL_ICACHE_Enable();
#endif
  return answer;
 80053c6:	2317      	movs	r3, #23
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	781b      	ldrb	r3, [r3, #0]
}
 80053cc:	0018      	movs	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b006      	add	sp, #24
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	1fff75a0 	.word	0x1fff75a0
 80053d8:	0000ffff 	.word	0x0000ffff

080053dc <EE_Read>:
  * @brief Reads data from the EEPROM emulation area.
  * @note This function reads data from the EEPROM emulation area
  *  and loads it into the specified storage pointer.
  */
void EE_Read(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
  uint8_t *data = eeHandle.DataPointer;
 80053e2:	4b1a      	ldr	r3, [pc, #104]	@ (800544c <EE_Read+0x70>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	607b      	str	r3, [r7, #4]
#ifdef HAL_ICACHE_MODULE_ENABLED
    /* disabling ICACHE if enabled*/
    HAL_ICACHE_Disable();
#endif
  if (data != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d029      	beq.n	8005442 <EE_Read+0x66>
  {
    /* reading flash */
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 80053ee:	2300      	movs	r3, #0
 80053f0:	603b      	str	r3, [r7, #0]
 80053f2:	e021      	b.n	8005438 <EE_Read+0x5c>
    {
      *data = (*(__IO uint8_t*) (EE_ADDRESS + i));
 80053f4:	4b16      	ldr	r3, [pc, #88]	@ (8005450 <EE_Read+0x74>)
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	4a16      	ldr	r2, [pc, #88]	@ (8005454 <EE_Read+0x78>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00f      	beq.n	800541e <EE_Read+0x42>
 80053fe:	4b14      	ldr	r3, [pc, #80]	@ (8005450 <EE_Read+0x74>)
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <EE_Read+0x3e>
 8005406:	4b12      	ldr	r3, [pc, #72]	@ (8005450 <EE_Read+0x74>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	029b      	lsls	r3, r3, #10
 800540c:	0b1b      	lsrs	r3, r3, #12
 800540e:	3b01      	subs	r3, #1
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	4a11      	ldr	r2, [pc, #68]	@ (8005458 <EE_Read+0x7c>)
 8005414:	4694      	mov	ip, r2
 8005416:	4463      	add	r3, ip
 8005418:	e002      	b.n	8005420 <EE_Read+0x44>
 800541a:	4b10      	ldr	r3, [pc, #64]	@ (800545c <EE_Read+0x80>)
 800541c:	e000      	b.n	8005420 <EE_Read+0x44>
 800541e:	4b0f      	ldr	r3, [pc, #60]	@ (800545c <EE_Read+0x80>)
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	189b      	adds	r3, r3, r2
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	701a      	strb	r2, [r3, #0]
      data++;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3301      	adds	r3, #1
 8005430:	607b      	str	r3, [r7, #4]
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	3301      	adds	r3, #1
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4b04      	ldr	r3, [pc, #16]	@ (800544c <EE_Read+0x70>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d3d8      	bcc.n	80053f4 <EE_Read+0x18>
  }
#ifdef HAL_ICACHE_MODULE_ENABLED
    /* disabling ICACHE if enabled*/
    HAL_ICACHE_Enable();
#endif
}
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	46bd      	mov	sp, r7
 8005446:	b002      	add	sp, #8
 8005448:	bd80      	pop	{r7, pc}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	20000440 	.word	0x20000440
 8005450:	1fff75a0 	.word	0x1fff75a0
 8005454:	0000ffff 	.word	0x0000ffff
 8005458:	08000800 	.word	0x08000800
 800545c:	0801f800 	.word	0x0801f800

08005460 <EE_Write>:
  * @brief Writes data to the EEPROM emulation area.
  * @note This function writes data to the EEPROM emulation area.
  * @retval true if the write operation is successful, false otherwise.
  */
bool EE_Write(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
  bool answer = true;
 8005466:	2117      	movs	r1, #23
 8005468:	187b      	adds	r3, r7, r1
 800546a:	2201      	movs	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
  uint8_t *data = eeHandle.DataPointer;
 800546e:	4b47      	ldr	r3, [pc, #284]	@ (800558c <EE_Write+0x12c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	613b      	str	r3, [r7, #16]
  do
  {
    /* checking eeprom is initialize correctly */
    if (data == NULL)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d103      	bne.n	8005482 <EE_Write+0x22>
    {
      answer = false;
 800547a:	187b      	adds	r3, r7, r1
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
      break;
 8005480:	e07b      	b.n	800557a <EE_Write+0x11a>
    }
    /* formating flash area before writing */
    if (EE_Format() == false)
 8005482:	f7ff ff67 	bl	8005354 <EE_Format>
 8005486:	0003      	movs	r3, r0
 8005488:	001a      	movs	r2, r3
 800548a:	2301      	movs	r3, #1
 800548c:	4053      	eors	r3, r2
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <EE_Write+0x3e>
    {
      answer = false;
 8005494:	2317      	movs	r3, #23
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
      break;
 800549c:	e06d      	b.n	800557a <EE_Write+0x11a>
    }
    HAL_FLASH_Unlock();
 800549e:	f7fd f865 	bl	800256c <HAL_FLASH_Unlock>
      }
      data += 2;
    }
#elif (defined FLASH_TYPEPROGRAM_DOUBLEWORD)
    /* writing buffer to flash */
    for (uint32_t i = 0; i < eeHandle.Size; i += 8)
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e02f      	b.n	8005508 <EE_Write+0xa8>
    {
      uint64_t doubleWord;
      memcpy((uint8_t*)&doubleWord, data, 8);
 80054a8:	6939      	ldr	r1, [r7, #16]
 80054aa:	003b      	movs	r3, r7
 80054ac:	2208      	movs	r2, #8
 80054ae:	0018      	movs	r0, r3
 80054b0:	f000 f8a2 	bl	80055f8 <memcpy>
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, EE_ADDRESS + i, doubleWord) != HAL_OK)
 80054b4:	4b36      	ldr	r3, [pc, #216]	@ (8005590 <EE_Write+0x130>)
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	4a36      	ldr	r2, [pc, #216]	@ (8005594 <EE_Write+0x134>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00f      	beq.n	80054de <EE_Write+0x7e>
 80054be:	4b34      	ldr	r3, [pc, #208]	@ (8005590 <EE_Write+0x130>)
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <EE_Write+0x7a>
 80054c6:	4b32      	ldr	r3, [pc, #200]	@ (8005590 <EE_Write+0x130>)
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	029b      	lsls	r3, r3, #10
 80054cc:	0b1b      	lsrs	r3, r3, #12
 80054ce:	3b01      	subs	r3, #1
 80054d0:	031b      	lsls	r3, r3, #12
 80054d2:	4a31      	ldr	r2, [pc, #196]	@ (8005598 <EE_Write+0x138>)
 80054d4:	4694      	mov	ip, r2
 80054d6:	4463      	add	r3, ip
 80054d8:	e002      	b.n	80054e0 <EE_Write+0x80>
 80054da:	4b30      	ldr	r3, [pc, #192]	@ (800559c <EE_Write+0x13c>)
 80054dc:	e000      	b.n	80054e0 <EE_Write+0x80>
 80054de:	4b2f      	ldr	r3, [pc, #188]	@ (800559c <EE_Write+0x13c>)
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	1899      	adds	r1, r3, r2
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2001      	movs	r0, #1
 80054ea:	f7fc fff1 	bl	80024d0 <HAL_FLASH_Program>
 80054ee:	1e03      	subs	r3, r0, #0
 80054f0:	d004      	beq.n	80054fc <EE_Write+0x9c>
      {
        answer = false;
 80054f2:	2317      	movs	r3, #23
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e00a      	b.n	8005512 <EE_Write+0xb2>
        break;
      }
      data += 8;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	3308      	adds	r3, #8
 8005500:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < eeHandle.Size; i += 8)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3308      	adds	r3, #8
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	4b20      	ldr	r3, [pc, #128]	@ (800558c <EE_Write+0x12c>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	429a      	cmp	r2, r3
 8005510:	d3ca      	bcc.n	80054a8 <EE_Write+0x48>
      }
      data += FLASH_NB_32BITWORD_IN_FLASHWORD * 4;
    }
#endif
    /* verifying Flash content */
    data = eeHandle.DataPointer;
 8005512:	4b1e      	ldr	r3, [pc, #120]	@ (800558c <EE_Write+0x12c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 8005518:	2300      	movs	r3, #0
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	e028      	b.n	8005570 <EE_Write+0x110>
    {
      if (*data != (*(__IO uint8_t*) (EE_ADDRESS + i)))
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	4b1b      	ldr	r3, [pc, #108]	@ (8005590 <EE_Write+0x130>)
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	491b      	ldr	r1, [pc, #108]	@ (8005594 <EE_Write+0x134>)
 8005528:	428b      	cmp	r3, r1
 800552a:	d00f      	beq.n	800554c <EE_Write+0xec>
 800552c:	4b18      	ldr	r3, [pc, #96]	@ (8005590 <EE_Write+0x130>)
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <EE_Write+0xe8>
 8005534:	4b16      	ldr	r3, [pc, #88]	@ (8005590 <EE_Write+0x130>)
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	029b      	lsls	r3, r3, #10
 800553a:	0b1b      	lsrs	r3, r3, #12
 800553c:	3b01      	subs	r3, #1
 800553e:	031b      	lsls	r3, r3, #12
 8005540:	4915      	ldr	r1, [pc, #84]	@ (8005598 <EE_Write+0x138>)
 8005542:	468c      	mov	ip, r1
 8005544:	4463      	add	r3, ip
 8005546:	e002      	b.n	800554e <EE_Write+0xee>
 8005548:	4b14      	ldr	r3, [pc, #80]	@ (800559c <EE_Write+0x13c>)
 800554a:	e000      	b.n	800554e <EE_Write+0xee>
 800554c:	4b13      	ldr	r3, [pc, #76]	@ (800559c <EE_Write+0x13c>)
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	185b      	adds	r3, r3, r1
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	429a      	cmp	r2, r3
 8005558:	d004      	beq.n	8005564 <EE_Write+0x104>
      {
        answer = false;
 800555a:	2317      	movs	r3, #23
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
        break;
 8005562:	e00a      	b.n	800557a <EE_Write+0x11a>
      }
      data++;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	3301      	adds	r3, #1
 8005568:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < eeHandle.Size; i++)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3301      	adds	r3, #1
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	4b06      	ldr	r3, [pc, #24]	@ (800558c <EE_Write+0x12c>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	d3d1      	bcc.n	800551e <EE_Write+0xbe>
    }

  } while (0);

  HAL_FLASH_Lock();
 800557a:	f7fd f81b 	bl	80025b4 <HAL_FLASH_Lock>
#ifdef HAL_ICACHE_MODULE_ENABLED
  HAL_ICACHE_Enable();
#endif
  return answer;
 800557e:	2317      	movs	r3, #23
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	781b      	ldrb	r3, [r3, #0]
}
 8005584:	0018      	movs	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	b006      	add	sp, #24
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000440 	.word	0x20000440
 8005590:	1fff75a0 	.word	0x1fff75a0
 8005594:	0000ffff 	.word	0x0000ffff
 8005598:	08000800 	.word	0x08000800
 800559c:	0801f800 	.word	0x0801f800

080055a0 <memset>:
 80055a0:	0003      	movs	r3, r0
 80055a2:	1882      	adds	r2, r0, r2
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d100      	bne.n	80055aa <memset+0xa>
 80055a8:	4770      	bx	lr
 80055aa:	7019      	strb	r1, [r3, #0]
 80055ac:	3301      	adds	r3, #1
 80055ae:	e7f9      	b.n	80055a4 <memset+0x4>

080055b0 <__libc_init_array>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	2600      	movs	r6, #0
 80055b4:	4c0c      	ldr	r4, [pc, #48]	@ (80055e8 <__libc_init_array+0x38>)
 80055b6:	4d0d      	ldr	r5, [pc, #52]	@ (80055ec <__libc_init_array+0x3c>)
 80055b8:	1b64      	subs	r4, r4, r5
 80055ba:	10a4      	asrs	r4, r4, #2
 80055bc:	42a6      	cmp	r6, r4
 80055be:	d109      	bne.n	80055d4 <__libc_init_array+0x24>
 80055c0:	2600      	movs	r6, #0
 80055c2:	f000 f823 	bl	800560c <_init>
 80055c6:	4c0a      	ldr	r4, [pc, #40]	@ (80055f0 <__libc_init_array+0x40>)
 80055c8:	4d0a      	ldr	r5, [pc, #40]	@ (80055f4 <__libc_init_array+0x44>)
 80055ca:	1b64      	subs	r4, r4, r5
 80055cc:	10a4      	asrs	r4, r4, #2
 80055ce:	42a6      	cmp	r6, r4
 80055d0:	d105      	bne.n	80055de <__libc_init_array+0x2e>
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	00b3      	lsls	r3, r6, #2
 80055d6:	58eb      	ldr	r3, [r5, r3]
 80055d8:	4798      	blx	r3
 80055da:	3601      	adds	r6, #1
 80055dc:	e7ee      	b.n	80055bc <__libc_init_array+0xc>
 80055de:	00b3      	lsls	r3, r6, #2
 80055e0:	58eb      	ldr	r3, [r5, r3]
 80055e2:	4798      	blx	r3
 80055e4:	3601      	adds	r6, #1
 80055e6:	e7f2      	b.n	80055ce <__libc_init_array+0x1e>
 80055e8:	080058fc 	.word	0x080058fc
 80055ec:	080058fc 	.word	0x080058fc
 80055f0:	08005900 	.word	0x08005900
 80055f4:	080058fc 	.word	0x080058fc

080055f8 <memcpy>:
 80055f8:	2300      	movs	r3, #0
 80055fa:	b510      	push	{r4, lr}
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d100      	bne.n	8005602 <memcpy+0xa>
 8005600:	bd10      	pop	{r4, pc}
 8005602:	5ccc      	ldrb	r4, [r1, r3]
 8005604:	54c4      	strb	r4, [r0, r3]
 8005606:	3301      	adds	r3, #1
 8005608:	e7f8      	b.n	80055fc <memcpy+0x4>
	...

0800560c <_init>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	46c0      	nop			@ (mov r8, r8)
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr

08005618 <_fini>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr
 8005624:	0000      	movs	r0, r0
	...

08005628 <__FLASH_Program_Fast_veneer>:
 8005628:	b401      	push	{r0}
 800562a:	4802      	ldr	r0, [pc, #8]	@ (8005634 <__FLASH_Program_Fast_veneer+0xc>)
 800562c:	4684      	mov	ip, r0
 800562e:	bc01      	pop	{r0}
 8005630:	4760      	bx	ip
 8005632:	bf00      	nop
 8005634:	20000021 	.word	0x20000021

Disassembly of section .data:

20000000 <holding_register_database>:
20000000:	00030007 000203e8 00000000 03e80000     ................

20000010 <modbus_header>:
20000010:	                                         ..

20000012 <uart_tx_int>:
20000012:	                                         ..

20000014 <SystemCoreClock>:
20000014:	00b71b00                                ....

20000018 <uwTickPrio>:
20000018:	00000004                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000020:	b580      	push	{r7, lr}
20000022:	b088      	sub	sp, #32
20000024:	af00      	add	r7, sp, #0
20000026:	6078      	str	r0, [r7, #4]
20000028:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000002a:	231f      	movs	r3, #31
2000002c:	18fb      	adds	r3, r7, r3
2000002e:	2200      	movs	r2, #0
20000030:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000032:	687b      	ldr	r3, [r7, #4]
20000034:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000036:	683b      	ldr	r3, [r7, #0]
20000038:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000003a:	4b1a      	ldr	r3, [pc, #104]	@ (200000a4 <FLASH_Program_Fast+0x84>)
2000003c:	695a      	ldr	r2, [r3, #20]
2000003e:	4b19      	ldr	r3, [pc, #100]	@ (200000a4 <FLASH_Program_Fast+0x84>)
20000040:	2180      	movs	r1, #128	@ 0x80
20000042:	02c9      	lsls	r1, r1, #11
20000044:	430a      	orrs	r2, r1
20000046:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20000048:	f3ef 8310 	mrs	r3, PRIMASK
2000004c:	60fb      	str	r3, [r7, #12]
  return(result);
2000004e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000052:	b672      	cpsid	i
}
20000054:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000056:	e00f      	b.n	20000078 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000058:	697a      	ldr	r2, [r7, #20]
2000005a:	69bb      	ldr	r3, [r7, #24]
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
    src += 4U;
20000060:	697b      	ldr	r3, [r7, #20]
20000062:	3304      	adds	r3, #4
20000064:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000066:	69bb      	ldr	r3, [r7, #24]
20000068:	3304      	adds	r3, #4
2000006a:	61bb      	str	r3, [r7, #24]
    index++;
2000006c:	211f      	movs	r1, #31
2000006e:	187b      	adds	r3, r7, r1
20000070:	781a      	ldrb	r2, [r3, #0]
20000072:	187b      	adds	r3, r7, r1
20000074:	3201      	adds	r2, #1
20000076:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000078:	231f      	movs	r3, #31
2000007a:	18fb      	adds	r3, r7, r3
2000007c:	781b      	ldrb	r3, [r3, #0]
2000007e:	2b3f      	cmp	r3, #63	@ 0x3f
20000080:	d9ea      	bls.n	20000058 <FLASH_Program_Fast+0x38>
  }

  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
20000082:	46c0      	nop			@ (mov r8, r8)
20000084:	4b07      	ldr	r3, [pc, #28]	@ (200000a4 <FLASH_Program_Fast+0x84>)
20000086:	691a      	ldr	r2, [r3, #16]
20000088:	2380      	movs	r3, #128	@ 0x80
2000008a:	025b      	lsls	r3, r3, #9
2000008c:	4013      	ands	r3, r2
2000008e:	d1f9      	bne.n	20000084 <FLASH_Program_Fast+0x64>
20000090:	693b      	ldr	r3, [r7, #16]
20000092:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000094:	68bb      	ldr	r3, [r7, #8]
20000096:	f383 8810 	msr	PRIMASK, r3
}
2000009a:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000009c:	46c0      	nop			@ (mov r8, r8)
2000009e:	46bd      	mov	sp, r7
200000a0:	b008      	add	sp, #32
200000a2:	bd80      	pop	{r7, pc}
200000a4:	40022000 	.word	0x40022000
